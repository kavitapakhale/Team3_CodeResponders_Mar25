{
	"info": {
		"_postman_id": "12f32e0c-8eb8-47cb-aff3-2b8b16392376",
		"name": "Team3_CodeResponders",
		"schema": "https://schema.postman.com/json/collection/v2.0.0/collection.json"
	},
	"item": [
		{
			"name": "Login",
			"item": [
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b51eb5c2-d1aa-471e-9042-a8d29be81441",
								"exec": [
									"const response = pm.response.json()\r",
									"\r",
									"//Validate status 200, roles value and  + response schema\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//Validate status being Active\r",
									"pm.test(\"User Status is Active\", function () {\r",
									"    pm.expect(response.status).to.equal(\"Active\");\r",
									"});\r",
									"\r",
									"//Validate Admin Roles\r",
									"pm.test(\"User have both Admin and Staff roles assigned\", function () {\r",
									"    const roles = response.roles\r",
									"    pm.expect(roles).to.include(\"ROLE_ADMIN\");\r",
									"    pm.expect(roles).to.include(\"ROLE_STAFF\");\r",
									"});\r",
									"\r",
									"\r",
									"//Set some values at collection level\r",
									"//1. Set Bearer Token\r",
									"pm.collectionVariables.set(\"BearerToken\", response.token);\r",
									"\r",
									"//2. set Admin UserID\r",
									"pm.collectionVariables.set(\"Admin_UserID\", response.userId);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "31952c94-aa19-4abe-a183-06636403f4c7",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n \"password\": \"{{password}}\",\r\n \"userLoginEmailId\": \"{{userLoginEmailId}}\"\r\n } ",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}/login"
					},
					"response": []
				}
			],
			"id": "3312d922-fda6-46ec-b80a-04af3e260030"
		},
		{
			"name": "Program",
			"item": [
				{
					"name": "AddNewProgram_Mandatory",
					"id": "646e43fb-ea5a-462c-a776-c82b2eec8692",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n \"programDescription\":\"String\",\r\n \"programName\":\"String\", //mandatory and unique\r\n \"programStatus\":\"String\" //mandatory\r\n }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}/saveprogram"
					},
					"response": []
				},
				{
					"name": "AddNewProgram_AllData",
					"id": "48002a7e-52e0-49b4-8a80-a91ca25ec9db",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n \"programDescription\":\"String\",\r\n \"programName\":\"String\", //mandatory\r\n \"programStatus\":\"String\" //mandatory\r\n }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}/saveprogram"
					},
					"response": []
				},
				{
					"name": "AllPrograms",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1fbc2e20-e724-4b6d-a436-fdadaa40a5b5",
								"exec": [
									"const response = pm.response.json()\r",
									"\r",
									"console.log(response.length)\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "8559b002-7de4-4f58-95d9-64452ccc334d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseURL}}/allPrograms"
					},
					"response": []
				},
				{
					"name": "AllProgramswithUsers",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1fbc2e20-e724-4b6d-a436-fdadaa40a5b5",
								"exec": [
									"const response = pm.response.json()\r",
									"\r",
									"console.log(response.length) //7 users\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "e80473db-d8c5-4120-a3df-c7933f20df0f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseURL}}/allProgramsWithUsers"
					},
					"response": []
				},
				{
					"name": "ProgrambyProgramId",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1fbc2e20-e724-4b6d-a436-fdadaa40a5b5",
								"exec": [
									"const response = pm.response.json()\r",
									"\r",
									"//Validate status, Program ID availability in response body and schema"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "96218ddb-88de-45d9-a59d-354be54b2620",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/programs/:programId",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"programs",
								":programId"
							],
							"variable": [
								{
									"id": "0993069f-4ce2-4a43-87d1-b7e19d5b265d",
									"key": "programId",
									"value": "16225"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "UpdateProgrambyProgramName",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "32d21eff-919c-4433-93ea-80ce325f8667",
								"exec": [
									"/*\r",
									" {\r",
									" \"programDescription\": \"Update\",\r",
									" \"programName\":\"TestChatBot\",\r",
									" \"programStatus\":\"Inactive\"\r",
									" }\r",
									" */\r",
									"\r",
									"const response = pm.response.json()\r",
									"\r",
									"/**\r",
									" MandatoryFields:\r",
									" programName,programStatus\r",
									" */\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "cea3d75e-8993-4dd3-9945-f0975ce58585",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": " {\r\n \"programDescription\": \"Update\",\r\n \"programName\":\"TestChatBot\",\r\n \"programStatus\":\"Inactive\"\r\n }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/program/:programName",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"program",
								":programName"
							],
							"variable": [
								{
									"id": "3c82a17c-3afd-4b19-8c80-870cf8d09dfd",
									"key": "programName",
									"value": "TestChatBot"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "ProgrambyProgramId",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a6c80eb2-0c14-419b-8191-0cd10764e897",
								"exec": [
									"/**\r",
									" MandatoryFields:\r",
									" programName,programStatus\r",
									" */"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "ce9f81d6-26d5-4243-9cb2-e42d68c9f5ca",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": " {\r\n    \"programDescription\": \"Ab odit velit distinctio ipsam. Update\",\r\n    \"programName\": \"Wanda Update\",\r\n    \"programStatus\": \"Inactive\"\r\n }\r\n\r\n/* {\r\n \"programDescription\": \"Update\",\r\n \"programName\":\"TestChatBot\",\r\n \"programStatus\":\"Inactive\"\r\n }\r\n\r\n response:[\r\n{\r\n    \"message\": \"Program Name TestChatBot already exists\",\r\n    \"success\": false\r\n}]*/",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/putprogram/:programId",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"putprogram",
								":programId"
							],
							"variable": [
								{
									"id": "e74a0d5c-aa67-499b-a3b6-0d4ec3fdbad9",
									"key": "programId",
									"value": "16487"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "ProgramByProgramID",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d2776f72-6515-460c-9854-74e5f1edc778",
								"exec": [
									"/*\r",
									"StatusCode:\r",
									" 200:okwithMessage(Eg:Message:Program\r",
									" Id-10isdeletedSuccessfully!)\r",
									" 404:ErrorwithMessage(Eg:\"message\":\"no\r",
									" recordfoundwithprogramId{programId}\",\r",
									" \"success\": false)\r",
									"  */"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "8abd7e75-2eda-4aa7-88b7-5fc9b978d342",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/deletebyprogid/:programId",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"deletebyprogid",
								":programId"
							],
							"variable": [
								{
									"id": "168a475e-4976-4686-ba67-763914f6b768",
									"key": "programId",
									"value": ""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "ProgramByProgramName",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d2776f72-6515-460c-9854-74e5f1edc778",
								"exec": [
									"/*\r",
									"StatusCode:\r",
									" 200:okwithMessage(Eg:Message:Program\r",
									" Name-{programName} isdeletedSuccessfully!)\r",
									" 404:ErrorwithMessage(Eg:\"message\":\"no\r",
									" recordfoundwithprogramName\", \"success\":\r",
									" false)\r",
									"  */"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "c60eb5a8-3d73-4ec4-ba34-c1658b29d2e4",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/deletebyprogname/:programName",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"deletebyprogname",
								":programName"
							],
							"variable": [
								{
									"id": "2e6285f9-62ac-4bf7-822a-32a2a575f22c",
									"key": "programName",
									"value": ""
								}
							]
						}
					},
					"response": []
				}
			],
			"id": "b2647423-abe4-44a8-b969-b94843f29a67"
		},
		{
			"name": "Batch",
			"item": [
				{
					"name": "CheckingGitUpdate",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "145639e6-1d68-40d2-8ccd-73adc375a3ef",
								"exec": [
									"console.log(\"Name\")"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "99d983af-8c01-4ce7-b0cf-52156f1f1c69",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "https://www.google.com/search"
					},
					"response": []
				}
			],
			"id": "ce10b472-a538-424a-ae11-1292c830e503"
		},
		{
			"name": "Class",
			"item": [
				{
					"name": "Class_K",
					"item": [
						{
							"name": "User Sign In",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d7879f0f-737d-4293-b2a7-bec56b12e059",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "ba9cf145-14d5-4abc-9800-7e1b3a98b318",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"password\": \"March@2025\",\r\n\"userLoginEmailId\":\"sdetorganizer@gmail.com\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "https://lms-hackthon-feb25-803334c87fbe.herokuapp.com/lms/login"
							},
							"response": []
						},
						{
							"name": "Create New Class",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fc70e53d-7e6a-4583-a90d-b4941e1c79f1",
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "22d1397a-c048-4f4e-b42b-c280be98fd1e",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJzZGV0b3JnYW5pemVyQGdtYWlsLmNvbSIsImlhdCI6MTc0MTM3NTA4MiwiZXhwIjoxNzQxNDAzODgyfQ.h3EmuVdOucUj3pDJim8Il9bNUsKc7SyqtjDOvUM6E_FpG1u7CXfNuTYweLZ3nBXs3ySwQLnsL_juCSA8RL47lA"
									}
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{ \"batchId\": 9518,\r\n\"classNo\": 1,\r\n\"classDate\": \"2025-06-06T19:04:41.220Z\",\r\n\"classTopic\": \"java\",\r\n\"classStatus\": \"null\",\r\n\"classStaffId\": \"U25\",\r\n\"classDescription\": \"java2.0\",\r\n\"classComments\": \"null\" ,\r\n\"classNotes\": \"null\",\r\n\"classRecordingPath\": \"null\",\r\n\"classScheduledDates\": [\"2025-06-06T19:04:41.220Z\"]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "https://lms-hackthon-feb25-803334c87fbe.herokuapp.com/lms/CreateClassSchedule"
							},
							"response": []
						},
						{
							"name": "Create New Class with No Auth",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "066c2f54-c788-4545-9aa3-c2d5d44414cd",
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "e03e7120-a505-4c94-b1dd-cb7e3ca0b363",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{ \"batchId\": 9518,\r\n\"classNo\": 45,\r\n\"classDate\": \"2025-03-06T19:04:41.220Z\",\r\n\"classTopic\": \"java\",\r\n\"classStatus\": \"null\",\r\n\"classStaffId\": \"U81\",\r\n\"classDescription\": \"java2.0\",\r\n\"classComments\": \"null\" ,\r\n\"classNotes\": \"null\",\r\n\"classRecordingPath\": \"null\",\r\n\"classScheduledDates\": [\"2025-03-06T19:04:41.220Z\"]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "https://lms-hackthon-feb25-803334c87fbe.herokuapp.com/lms/CreateClassSchedule"
							},
							"response": []
						},
						{
							"name": "Get All Class List",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c8131416-8a75-4753-be8b-d67b5ce3eceb",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "1c737c05-0f95-412d-8c74-6fef8cd196c0",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJzZGV0b3JnYW5pemVyQGdtYWlsLmNvbSIsImlhdCI6MTc0MTM3NTA4MiwiZXhwIjoxNzQxNDAzODgyfQ.h3EmuVdOucUj3pDJim8Il9bNUsKc7SyqtjDOvUM6E_FpG1u7CXfNuTYweLZ3nBXs3ySwQLnsL_juCSA8RL47lA"
									}
								},
								"method": "GET",
								"header": [],
								"url": "https://lms-hackthon-feb25-803334c87fbe.herokuapp.com/lms/allClasses"
							},
							"response": []
						},
						{
							"name": "Get All Class List with No Auth",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a341bc4d-0825-4536-a359-39c0b8e5695e",
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "db739aeb-8abb-400a-b545-a4c154e34575",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": "https://lms-hackthon-feb25-803334c87fbe.herokuapp.com/lms/allClasses"
							},
							"response": []
						},
						{
							"name": "Get All Class List with invalid end points",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "989646da-763a-4cf0-969a-d31c36b5d495",
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "2c0106bb-1c73-4f3d-9756-f0dba026688c",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJzZGV0b3JnYW5pemVyQGdtYWlsLmNvbSIsImlhdCI6MTc0MTM3NTA4MiwiZXhwIjoxNzQxNDAzODgyfQ.h3EmuVdOucUj3pDJim8Il9bNUsKc7SyqtjDOvUM6E_FpG1u7CXfNuTYweLZ3nBXs3ySwQLnsL_juCSA8RL47lA"
									}
								},
								"method": "GET",
								"header": [],
								"url": "https://lms-hackthon-feb25-803334c87fbe.herokuapp.com/lms/allClass"
							},
							"response": []
						},
						{
							"name": "Upcoming Classes for particular Student",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "162e9c59-bf49-4cfb-b4e5-d569eed50eda",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "046ca8ff-6943-4de7-9dcc-801aa586994d",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJzZGV0b3JnYW5pemVyQGdtYWlsLmNvbSIsImlhdCI6MTc0MTM3NTA4MiwiZXhwIjoxNzQxNDAzODgyfQ.h3EmuVdOucUj3pDJim8Il9bNUsKc7SyqtjDOvUM6E_FpG1u7CXfNuTYweLZ3nBXs3ySwQLnsL_juCSA8RL47lA"
									}
								},
								"method": "GET",
								"header": [],
								"url": "https://lms-hackthon-feb25-803334c87fbe.herokuapp.com/lms/upcomingClasses/297"
							},
							"response": []
						},
						{
							"name": "Upcoming Classes for particular Student with No Auth",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "162e9c59-bf49-4cfb-b4e5-d569eed50eda",
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "38a9a8ff-d1c6-4b05-a515-e3c7b310f800",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": "https://lms-hackthon-feb25-803334c87fbe.herokuapp.com/lms/upcomingClasses/48"
							},
							"response": []
						},
						{
							"name": "Upcoming Classes for particular Student with Invalid end points",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "162e9c59-bf49-4cfb-b4e5-d569eed50eda",
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "a70e5832-e5a8-4fe8-8f74-af31b215cc5e",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJzZGV0b3JnYW5pemVyQGdtYWlsLmNvbSIsImlhdCI6MTc0MTM3NTA4MiwiZXhwIjoxNzQxNDAzODgyfQ.h3EmuVdOucUj3pDJim8Il9bNUsKc7SyqtjDOvUM6E_FpG1u7CXfNuTYweLZ3nBXs3ySwQLnsL_juCSA8RL47lA"
									}
								},
								"method": "GET",
								"header": [],
								"url": "https://lms-hackthon-feb25-803334c87fbe.herokuapp.com/lms/upcomingClass/48"
							},
							"response": []
						},
						{
							"name": "Upcoming Classes for particular Student with special character student Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "162e9c59-bf49-4cfb-b4e5-d569eed50eda",
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "bfadd5a1-5fc5-479d-9b83-eee1ac4735bd",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJzZGV0b3JnYW5pemVyQGdtYWlsLmNvbSIsImlhdCI6MTc0MTM3NTA4MiwiZXhwIjoxNzQxNDAzODgyfQ.h3EmuVdOucUj3pDJim8Il9bNUsKc7SyqtjDOvUM6E_FpG1u7CXfNuTYweLZ3nBXs3ySwQLnsL_juCSA8RL47lA"
									}
								},
								"method": "GET",
								"header": [],
								"url": "https://lms-hackthon-feb25-803334c87fbe.herokuapp.com/lms/upcomingClasses/@f"
							},
							"response": []
						},
						{
							"name": "Upcoming Classes for particular Student with letters student Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "162e9c59-bf49-4cfb-b4e5-d569eed50eda",
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "44abc250-2f96-43df-9a8d-9fa19b1ff746",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJzZGV0b3JnYW5pemVyQGdtYWlsLmNvbSIsImlhdCI6MTc0MTM3NTA4MiwiZXhwIjoxNzQxNDAzODgyfQ.h3EmuVdOucUj3pDJim8Il9bNUsKc7SyqtjDOvUM6E_FpG1u7CXfNuTYweLZ3nBXs3ySwQLnsL_juCSA8RL47lA"
									}
								},
								"method": "GET",
								"header": [],
								"url": "https://lms-hackthon-feb25-803334c87fbe.herokuapp.com/lms/upcomingClasses/RY"
							},
							"response": []
						},
						{
							"name": "Upcoming Classes for particular Student with letters numbers and special character student Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "162e9c59-bf49-4cfb-b4e5-d569eed50eda",
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "90cb7bd8-0120-41e4-af10-18d03a55886f",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJzZGV0b3JnYW5pemVyQGdtYWlsLmNvbSIsImlhdCI6MTc0MTM3NTA4MiwiZXhwIjoxNzQxNDAzODgyfQ.h3EmuVdOucUj3pDJim8Il9bNUsKc7SyqtjDOvUM6E_FpG1u7CXfNuTYweLZ3nBXs3ySwQLnsL_juCSA8RL47lA"
									}
								},
								"method": "GET",
								"header": [],
								"url": "https://lms-hackthon-feb25-803334c87fbe.herokuapp.com/lms/upcomingClasses/@f3"
							},
							"response": []
						},
						{
							"name": "Update New Class",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d350511c-fc91-4538-99ee-cb45faff617e",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "5a4c3be9-8ed3-447c-8643-b89f4c44630a",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJzZGV0b3JnYW5pemVyQGdtYWlsLmNvbSIsImlhdCI6MTc0MTM3NTA4MiwiZXhwIjoxNzQxNDAzODgyfQ.h3EmuVdOucUj3pDJim8Il9bNUsKc7SyqtjDOvUM6E_FpG1u7CXfNuTYweLZ3nBXs3ySwQLnsL_juCSA8RL47lA"
									}
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{ \"csId\": 65,\r\n  \"batchId\": 78,\r\n  \"classNo\": 0,\r\n  \"classDate\": \"2025-03-07T21:02:04.502Z\",\r\n  \"classTopic\": \"java\",\r\n  \"classStatus\": \"null\",\r\n  \"classStaffId\": \"U78\",\r\n  \"classDescription\": \"lodk2 o-D-66_MdRIdH6oSFhkqPbb0VcTPy\",\r\n  \"classComments\": \"  \",\r\n  \"classNotes\": \"null\",\r\n  \"classRecordingPath\": \"c:\\\\recordings\",\r\n  \"batchName\": \"java2.5\",\r\n  \"classScheduledDates\": [\r\n    \"2025-03-07T21:02:04.504Z\"]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "https://lms-hackthon-feb25-803334c87fbe.herokuapp.com/lms/updateClass/62"
							},
							"response": []
						},
						{
							"name": "Get All Recordings",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4b8734d8-b6bd-4f63-b803-b59dbb1adf9c",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "43c95a36-0674-4710-84ef-b5ba24df382b",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJzZGV0b3JnYW5pemVyQGdtYWlsLmNvbSIsImlhdCI6MTc0MTM3NTA4MiwiZXhwIjoxNzQxNDAzODgyfQ.h3EmuVdOucUj3pDJim8Il9bNUsKc7SyqtjDOvUM6E_FpG1u7CXfNuTYweLZ3nBXs3ySwQLnsL_juCSA8RL47lA"
									}
								},
								"method": "GET",
								"header": [],
								"url": "https://lms-hackthon-feb25-803334c87fbe.herokuapp.com/lms/classrecordings"
							},
							"response": []
						},
						{
							"name": "Get All Recordings with No Auth",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c8713d54-8903-4fef-8ecf-02b6ce033c79",
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "73f359a1-0629-447d-be7a-1accff7a7a3f",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": "https://lms-hackthon-feb25-803334c87fbe.herokuapp.com/lms/classrecordings"
							},
							"response": []
						},
						{
							"name": "Get All Recordings with invalid end points",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a4d1726e-41fa-4824-a05a-9f7136597585",
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "298d8941-fd9c-4cf0-823c-5eb1f3569e23",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJzZGV0b3JnYW5pemVyQGdtYWlsLmNvbSIsImlhdCI6MTc0MTM3NTA4MiwiZXhwIjoxNzQxNDAzODgyfQ.h3EmuVdOucUj3pDJim8Il9bNUsKc7SyqtjDOvUM6E_FpG1u7CXfNuTYweLZ3nBXs3ySwQLnsL_juCSA8RL47lA"
									}
								},
								"method": "GET",
								"header": [],
								"url": "https://lms-hackthon-feb25-803334c87fbe.herokuapp.com/lms/classrecording"
							},
							"response": []
						},
						{
							"name": "Update class recordings by class Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "52e01a32-a06e-4eb9-9d75-2cdc15e56fb8",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "83b4a8a3-d8c8-4a43-8071-74478dd80e44",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJzZGV0b3JnYW5pemVyQGdtYWlsLmNvbSIsImlhdCI6MTc0MTM3NTA4MiwiZXhwIjoxNzQxNDAzODgyfQ.h3EmuVdOucUj3pDJim8Il9bNUsKc7SyqtjDOvUM6E_FpG1u7CXfNuTYweLZ3nBXs3ySwQLnsL_juCSA8RL47lA"
									}
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"batchId\": 0,\r\n\"classComments\": \"string\",\r\n\"classDate\": \"2023-12-16T06:53:55.590Z\",\r\n\"classDescription\": \"string\",\r\n\"classNo\": 0,\r\n\"classNotes\": \"string\",\r\n\"classRecordingPath\": \"string\",\r\n\"classStaffId\": \"string\",\r\n\"classTopic\": \"string\",\r\n\"csId\": 0\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "https://lms-hackthon-feb25-803334c87fbe.herokuapp.com/lms/updateClassrecording/297"
							},
							"response": []
						},
						{
							"name": "Get all Classes by Batch Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f535f038-e7b3-4c30-b164-067147d5ab35",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "0e8577ce-7db5-4e65-9447-1cdb0ebc78a4",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJzZGV0b3JnYW5pemVyQGdtYWlsLmNvbSIsImlhdCI6MTc0MTM3NTA4MiwiZXhwIjoxNzQxNDAzODgyfQ.h3EmuVdOucUj3pDJim8Il9bNUsKc7SyqtjDOvUM6E_FpG1u7CXfNuTYweLZ3nBXs3ySwQLnsL_juCSA8RL47lA"
									}
								},
								"method": "GET",
								"header": [],
								"url": "https://lms-hackthon-feb25-803334c87fbe.herokuapp.com/lms/classesbyBatch/8432"
							},
							"response": []
						},
						{
							"name": "Get all Classes by Batch Id with No Auth",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "16a03190-1afb-4e25-bad2-b6a7a88edfad",
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "b1bf4a5c-2d11-4d26-8c4b-ed1b32e7dc9f",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": "https://lms-hackthon-feb25-803334c87fbe.herokuapp.com/lms/classesbyBatch/8432"
							},
							"response": []
						},
						{
							"name": "Get all Classes by Batch Id with invalid endpoints",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "af78921a-1df8-4805-be8d-b1f0fd48ef20",
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "0318b542-5d31-4944-abbf-f254d5c7b280",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJzZGV0b3JnYW5pemVyQGdtYWlsLmNvbSIsImlhdCI6MTc0MTM3NTA4MiwiZXhwIjoxNzQxNDAzODgyfQ.h3EmuVdOucUj3pDJim8Il9bNUsKc7SyqtjDOvUM6E_FpG1u7CXfNuTYweLZ3nBXs3ySwQLnsL_juCSA8RL47lA"
									}
								},
								"method": "GET",
								"header": [],
								"url": "https://lms-hackthon-feb25-803334c87fbe.herokuapp.com/lms/classesbyBat/8432"
							},
							"response": []
						},
						{
							"name": "Get all Classes by Batch Id with only letters",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "666cd6db-1215-4661-8389-ce62502be30e",
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "fe0a5247-3447-41d8-81a8-cf5f25d75c5a",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJzZGV0b3JnYW5pemVyQGdtYWlsLmNvbSIsImlhdCI6MTc0MTM3NTA4MiwiZXhwIjoxNzQxNDAzODgyfQ.h3EmuVdOucUj3pDJim8Il9bNUsKc7SyqtjDOvUM6E_FpG1u7CXfNuTYweLZ3nBXs3ySwQLnsL_juCSA8RL47lA"
									}
								},
								"method": "GET",
								"header": [],
								"url": "https://lms-hackthon-feb25-803334c87fbe.herokuapp.com/lms/classesbyBatch/abc"
							},
							"response": []
						},
						{
							"name": "Get all Classes by Batch Id with only special characters",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1f8dcfb0-589c-4136-ab0b-a183650258fc",
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "e3214e93-50b8-4d4f-ab64-478bfb76f424",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJzZGV0b3JnYW5pemVyQGdtYWlsLmNvbSIsImlhdCI6MTc0MTM3NTA4MiwiZXhwIjoxNzQxNDAzODgyfQ.h3EmuVdOucUj3pDJim8Il9bNUsKc7SyqtjDOvUM6E_FpG1u7CXfNuTYweLZ3nBXs3ySwQLnsL_juCSA8RL47lA"
									}
								},
								"method": "GET",
								"header": [],
								"url": "https://lms-hackthon-feb25-803334c87fbe.herokuapp.com/lms/classesbyBatch/&#%%"
							},
							"response": []
						},
						{
							"name": "Get all Classes by Batch Id with letters numbers and special character",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4a25b36a-d4f8-4f0d-9e84-dc3eb775d85f",
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "60c0e472-517e-4b74-af3f-9efe5bdc52fd",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJzZGV0b3JnYW5pemVyQGdtYWlsLmNvbSIsImlhdCI6MTc0MTM3NTA4MiwiZXhwIjoxNzQxNDAzODgyfQ.h3EmuVdOucUj3pDJim8Il9bNUsKc7SyqtjDOvUM6E_FpG1u7CXfNuTYweLZ3nBXs3ySwQLnsL_juCSA8RL47lA"
									}
								},
								"method": "GET",
								"header": [],
								"url": "https://lms-hackthon-feb25-803334c87fbe.herokuapp.com/lms/classesbyBatch/T4*"
							},
							"response": []
						},
						{
							"name": "Get all Classes By Staff Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ab47f3c0-47e8-4418-9003-3ad576455204",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "d4a8ad28-c151-4e10-9477-722153e26827",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJzZGV0b3JnYW5pemVyQGdtYWlsLmNvbSIsImlhdCI6MTc0MTM3NTA4MiwiZXhwIjoxNzQxNDAzODgyfQ.h3EmuVdOucUj3pDJim8Il9bNUsKc7SyqtjDOvUM6E_FpG1u7CXfNuTYweLZ3nBXs3ySwQLnsL_juCSA8RL47lA"
									}
								},
								"method": "GET",
								"header": [],
								"url": "https://lms-hackthon-feb25-803334c87fbe.herokuapp.com/lms/classesByStaff/U25"
							},
							"response": []
						},
						{
							"name": "Get all Classes By Staff with No Auth",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b8142df4-479e-4a53-87f0-bcb59430695b",
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "77384f72-48bd-426a-8617-70b5e2620a05",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": "https://lms-hackthon-feb25-803334c87fbe.herokuapp.com/lms/classesByStaff/U25"
							},
							"response": []
						},
						{
							"name": "Get all Classes By Staff with invalid end points",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "db377aae-cea4-415c-a12c-34f99f01407f",
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "2f2e5c0a-df24-48e5-933c-fabdf84fd621",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJzZGV0b3JnYW5pemVyQGdtYWlsLmNvbSIsImlhdCI6MTc0MTM3NTA4MiwiZXhwIjoxNzQxNDAzODgyfQ.h3EmuVdOucUj3pDJim8Il9bNUsKc7SyqtjDOvUM6E_FpG1u7CXfNuTYweLZ3nBXs3ySwQLnsL_juCSA8RL47lA"
									}
								},
								"method": "GET",
								"header": [],
								"url": "https://lms-hackthon-feb25-803334c87fbe.herokuapp.com/lms/classesBySta/U25"
							},
							"response": []
						},
						{
							"name": "Get all Classes By Staff Id with only letters",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b38329e2-eb2b-48c7-8ef1-724ff36f0ee1",
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "52e504ec-abb3-4e62-9ee5-94d650374593",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJzZGV0b3JnYW5pemVyQGdtYWlsLmNvbSIsImlhdCI6MTc0MTM3NTA4MiwiZXhwIjoxNzQxNDAzODgyfQ.h3EmuVdOucUj3pDJim8Il9bNUsKc7SyqtjDOvUM6E_FpG1u7CXfNuTYweLZ3nBXs3ySwQLnsL_juCSA8RL47lA"
									}
								},
								"method": "GET",
								"header": [],
								"url": "https://lms-hackthon-feb25-803334c87fbe.herokuapp.com/lms/classesByStaff/UN"
							},
							"response": []
						},
						{
							"name": "Get all Classes By Staff Id with only special characters",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7674f282-cffe-4b42-a508-0f74d607ae80",
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "e813720f-6161-40f9-9868-fd576265e74f",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJzZGV0b3JnYW5pemVyQGdtYWlsLmNvbSIsImlhdCI6MTc0MTM3NTA4MiwiZXhwIjoxNzQxNDAzODgyfQ.h3EmuVdOucUj3pDJim8Il9bNUsKc7SyqtjDOvUM6E_FpG1u7CXfNuTYweLZ3nBXs3ySwQLnsL_juCSA8RL47lA"
									}
								},
								"method": "GET",
								"header": [],
								"url": "https://lms-hackthon-feb25-803334c87fbe.herokuapp.com/lms/classesByStaff/&*#"
							},
							"response": []
						},
						{
							"name": "Get all Classes By Staff Id with letters numbers and special character",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "237278da-7c43-472a-bf97-c3e801af8675",
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "e97a9f84-eee1-4774-b0c4-1958e464f52d",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJzZGV0b3JnYW5pemVyQGdtYWlsLmNvbSIsImlhdCI6MTc0MTM3NTA4MiwiZXhwIjoxNzQxNDAzODgyfQ.h3EmuVdOucUj3pDJim8Il9bNUsKc7SyqtjDOvUM6E_FpG1u7CXfNuTYweLZ3nBXs3ySwQLnsL_juCSA8RL47lA"
									}
								},
								"method": "GET",
								"header": [],
								"url": "https://lms-hackthon-feb25-803334c87fbe.herokuapp.com/lms/classesByStaff/U2&"
							},
							"response": []
						}
					],
					"id": "8381426f-9c7b-488a-ac1e-0f5e6ee07df6"
				},
				{
					"name": "Class_A",
					"item": [],
					"id": "94bdcba5-c940-4da7-a7a0-5bf43438163d"
				}
			],
			"id": "f182f213-6d11-4f60-baa0-bbac79bb628b"
		},
		{
			"name": "Users",
			"item": [
				{
					"name": "Users_An",
					"item": [
						{
							"name": "Create Users with Role Student",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0f2f7847-f0e4-4246-82c0-d3b12a7b7e11",
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"//POSITIVE TEST VALIDATION\r",
											"//1. Status\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"//1. Status Line\r",
											"pm.test(\"Status message is Created\", function () {\r",
											"    pm.response.to.have.status(\"Created\");\r",
											"});\r",
											"\r",
											"//3. Test for Content-Type header having a particular value\r",
											"pm.test(\"Content-Type header is application/json\", () => {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
											"});\r",
											"\r",
											"//4. Schema Validation -- TO BE DONE\r",
											"const schemastruct = \r",
											"{\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"userComments\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"userEduPg\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"userEduUg\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"userFirstName\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"userId\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"userLastName\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"userLinkedinUrl\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"userLocation\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"userMiddleName\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"userPhoneNumber\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"userTimeZone\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"userVisaStatus\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"userLoginEmail\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"userComments\",\r",
											"    \"userEduPg\",\r",
											"    \"userEduUg\",\r",
											"    \"userFirstName\",\r",
											"    \"userId\",\r",
											"    \"userLastName\",\r",
											"    \"userLinkedinUrl\",\r",
											"    \"userLocation\",\r",
											"    \"userMiddleName\",\r",
											"    \"userPhoneNumber\",\r",
											"    \"userTimeZone\",\r",
											"    \"userVisaStatus\",\r",
											"    \"userLoginEmail\"\r",
											"  ]\r",
											"}\r",
											"pm.test(\"Validate Schema\"),function(){\r",
											"    pm.response.to.have.jsonSchema(schemastruct);\r",
											"}\r",
											"\r",
											"\r",
											"//5. Request VS Response Body Validation\r",
											"pm.test(\"Program name matches\", function () {\r",
											"\r",
											"    // Get the raw request body and Parse it to JSON\r",
											"    const rawRequestBody = pm.request.body.raw;\r",
											"    const requestBody = JSON.parse(rawRequestBody);\r",
											"\r",
											"    pm.expect(requestBody.userLinkedinUrl).to.eql(response.userLinkedinUrl);\r",
											"    pm.expect(requestBody.userComments).to.eql(response.userComments);\r",
											"    pm.expect(requestBody.userEduPg).to.eql(response.userEduPg);\r",
											"    pm.expect(requestBody.userEduUg).to.eql(response.userEduUg);\r",
											"    pm.expect(requestBody.userLastName).to.eql(response.userLastName);\r",
											"    pm.expect(requestBody.userFirstName).to.eql(response.userFirstName);\r",
											"    pm.expect(requestBody.userMiddleName).to.eql(response.userMiddleName);\r",
											"    pm.expect(requestBody.userPhoneNumber).to.eql(response.userPhoneNumber);\r",
											"    pm.expect(requestBody.userTimeZone).to.eql(response.userTimeZone);\r",
											"    pm.expect(requestBody.userVisaStatus).to.eql(response.userVisaStatus);\r",
											"    pm.expect(requestBody.userLoginEmail).to.eql(response.userLoginEmail);\r",
											"  \r",
											"\r",
											"});\r",
											"//SET VALUE AT RUN TIME (LATER CHECK IF THIS COULD BE TRANSFERRED AS PROGRAM OBJECT!!!!)\r",
											"pm.collectionVariables.set(\"Student_Id\", response.user.userId)"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "57c24f75-5b25-4ae6-8bd7-8daf78327742",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"userComments\": \"string\",\r\n\"userEduPg\": \"string\",\r\n\"userEduUg\": \"string\",\r\n\"userFirstName\": \"Testdata\",\r\n\"userLastName\": \"nine\",\r\n\"userLinkedinUrl\": \"www.linkedin.com/in/prakash-roy-d5622787/\",\r\n\"userLocation\": \"string\",\r\n\"userMiddleName\": \"string\",\r\n\"userPhoneNumber\": \"+91 2624567999\",\r\n\"userRoleMaps\": [\r\n{\r\n\"roleId\": \"R03\",\r\n\"userRoleStatus\": \"Active\"\r\n}\r\n],\r\n\"userTimeZone\": \"EST\",\r\n\"userVisaStatus\": \"H4\",\r\n\"userLogin\": {\r\n\"loginStatus\" : \"String\",\r\n\"userLoginEmail\": \"dat9999@gmail.com\"\r\n}\r\n}\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}/users/roleStatus"
							},
							"response": []
						},
						{
							"name": "Create Users with Role -",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0f2f7847-f0e4-4246-82c0-d3b12a7b7e11",
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"//POSITIVE TEST VALIDATION\r",
											"//1. Status\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"//1. Status Line\r",
											"pm.test(\"Status message is Created\", function () {\r",
											"    pm.response.to.have.status(\"Created\");\r",
											"});\r",
											"\r",
											"//3. Test for Content-Type header having a particular value\r",
											"pm.test(\"Content-Type header is application/json\", () => {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
											"});\r",
											"\r",
											"//4. Schema Validation -- TO BE DONE\r",
											"const schemastruct = \r",
											"{\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"userComments\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"userEduPg\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"userEduUg\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"userFirstName\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"userId\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"userLastName\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"userLinkedinUrl\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"userLocation\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"userMiddleName\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"userPhoneNumber\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"userTimeZone\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"userVisaStatus\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"userLoginEmail\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"userComments\",\r",
											"    \"userEduPg\",\r",
											"    \"userEduUg\",\r",
											"    \"userFirstName\",\r",
											"    \"userId\",\r",
											"    \"userLastName\",\r",
											"    \"userLinkedinUrl\",\r",
											"    \"userLocation\",\r",
											"    \"userMiddleName\",\r",
											"    \"userPhoneNumber\",\r",
											"    \"userTimeZone\",\r",
											"    \"userVisaStatus\",\r",
											"    \"userLoginEmail\"\r",
											"  ]\r",
											"}\r",
											"pm.test(\"Validate Schema\"),function(){\r",
											"    pm.response.to.have.jsonSchema(schemastruct);\r",
											"}\r",
											"\r",
											"\r",
											"//5. Request VS Response Body Validation\r",
											"pm.test(\"Program name matches\", function () {\r",
											"\r",
											"    // Get the raw request body and Parse it to JSON\r",
											"    const rawRequestBody = pm.request.body.raw;\r",
											"    const requestBody = JSON.parse(rawRequestBody);\r",
											"\r",
											"    pm.expect(requestBody.userLinkedinUrl).to.eql(response.userLinkedinUrl);\r",
											"    pm.expect(requestBody.userComments).to.eql(response.userComments);\r",
											"    pm.expect(requestBody.userEduPg).to.eql(response.userEduPg);\r",
											"    pm.expect(requestBody.userEduUg).to.eql(response.userEduUg);\r",
											"    pm.expect(requestBody.userLastName).to.eql(response.userLastName);\r",
											"    pm.expect(requestBody.userFirstName).to.eql(response.userFirstName);\r",
											"    pm.expect(requestBody.userMiddleName).to.eql(response.userMiddleName);\r",
											"    pm.expect(requestBody.userPhoneNumber).to.eql(response.userPhoneNumber);\r",
											"    pm.expect(requestBody.userTimeZone).to.eql(response.userTimeZone);\r",
											"    pm.expect(requestBody.userVisaStatus).to.eql(response.userVisaStatus);\r",
											"    pm.expect(requestBody.userLoginEmail).to.eql(response.userLoginEmail);\r",
											"  \r",
											"\r",
											"});\r",
											"//SET VALUE AT RUN TIME (LATER CHECK IF THIS COULD BE TRANSFERRED AS PROGRAM OBJECT!!!!)\r",
											"pm.collectionVariables.set(\"Student_Id\", response.user.userId)"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "9a38ade0-7b05-44d2-83ef-a9653423f2ef",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"userComments\": {{userComments}},\r\n\"userEduPg\": {{userEduPg}},\r\n\"userEduUg\": {{userEduUg}},\r\n\"userFirstName\": {{userFirstName}},//mandatory\r\n\"userLastName\": {{userLastName}},\r\n\"userLinkedinUrl\": {{userLinkedinUrl}},\r\n\"userLocation\": {{userLocation}},\r\n\"userMiddleName\": {{userMiddleName}},\r\n\"userPhoneNumber\": {{userPhoneNumber}},\r\n\"userRoleMaps\": [\r\n{\r\n\"roleId\": {{roleId}},\r\n\"userRoleStatus\": \"Active\"\r\n}\r\n],\r\n\"userTimeZone\": {{userTimeZone}} ,\r\n\"userVisaStatus\": {{userVisaStatus}},\r\n\"userLogin\": {\r\n\"loginStatus\" : \"String\",\r\n\"userLoginEmail\": {{userLoginEmail}}\r\n}\r\n}\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}/users/roleStatus"
							},
							"response": []
						},
						{
							"name": "Create Users with Staff Role",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0f2f7847-f0e4-4246-82c0-d3b12a7b7e11",
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"//POSITIVE TEST VALIDATION\r",
											"//1. Status\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"//1. Status Line\r",
											"pm.test(\"Status message is Created\", function () {\r",
											"    pm.response.to.have.status(\"Created\");\r",
											"});\r",
											"\r",
											"//3. Test for Content-Type header having a particular value\r",
											"pm.test(\"Content-Type header is application/json\", () => {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
											"});\r",
											"\r",
											"//4. Schema Validation -- TO BE DONE\r",
											"\r",
											"\r",
											"//5. Request VS Response Body Validation\r",
											"pm.test(\"user name matches\", function () {\r",
											"\r",
											"    // Get the raw request body and Parse it to JSON\r",
											"    const rawRequestBody = pm.request.body.raw;\r",
											"    const requestBody = JSON.parse(rawRequestBody);\r",
											"\r",
											"    pm.expect(requestBody.userLinkedinUrl).to.eql(response.userLinkedinUrl);\r",
											"    pm.expect(requestBody.userComments).to.eql(response.userComments);\r",
											"    pm.expect(requestBody.userEduPg).to.eql(response.userEduPg);\r",
											"    pm.expect(requestBody.userEduUg).to.eql(response.userEduUg);\r",
											"    pm.expect(requestBody.userLastName).to.eql(response.userLastName);\r",
											"    pm.expect(requestBody.userFirstName).to.eql(response.userFirstName);\r",
											"    pm.expect(requestBody.userMiddleName).to.eql(response.userMiddleName);\r",
											"    pm.expect(requestBody.userPhoneNumber).to.eql(response.userPhoneNumber);\r",
											"    pm.expect(requestBody.userTimeZone).to.eql(response.userTimeZone);\r",
											"    pm.expect(requestBody.userVisaStatus).to.eql(response.userVisaStatus);\r",
											"    pm.expect(requestBody.userLoginEmail).to.eql(response.userLoginEmail);\r",
											"\r",
											"    \r",
											"    \r",
											"\r",
											"\r",
											"   \r",
											"\r",
											"});\r",
											"\r",
											"//SET VALUE AT RUN TIME (LATER CHECK IF THIS COULD BE TRANSFERRED AS PROGRAM OBJECT!!!!)\r",
											"pm.collectionVariables.set(\"Staff_Id\", response.user.userId)\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "133e5360-c385-4abb-9a8f-f2f0fbe27323",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"userComments\": \"string\",\r\n\"userEduPg\": \"string\",\r\n\"userEduUg\": \"string\",\r\n\"userFirstName\": \"Staff\",\r\n\"userLastName\": \"string\",\r\n\"userLinkedinUrl\": \"www.linkedin.com/in/prakash-roy-d5622787/\",\r\n\"userLocation\": \"string\",\r\n\"userMiddleName\": \"string\",\r\n\"userPhoneNumber\": \"+91 2624227833\",\r\n\"userRoleMaps\": [\r\n{\r\n\"roleId\": \"R02\",\r\n\"userRoleStatus\": \"Active\"\r\n}\r\n],\r\n\"userTimeZone\": \"EST\",\r\n\"userVisaStatus\": \"H4\",\r\n\"userLogin\": {\r\n\"loginStatus\" : \"String\",\r\n\"userLoginEmail\": \"R02toR03@gmail.com\"\r\n}\r\n}\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}/users/roleStatus"
							},
							"response": []
						},
						{
							"name": "Get all users",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "38b76818-cf33-4625-9f4d-8ab54a8d232e",
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"//POSITIVE TEST VALIDATION\r",
											"//1. Status\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"//2. Status Line\r",
											"pm.test(\"Status message is OK\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"//3. Test for Content-Type header having a particular value\r",
											"pm.test(\"Content-Type header is application/json\", () => {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
											"});\r",
											"//4 Schema validation\r",
											"\r",
											"const schemaconstant = \r",
											"{\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"array\",\r",
											"  \"items\": [\r",
											"    {\r",
											"      \"type\": \"object\",\r",
											"      \"properties\": {\r",
											"        \"userComments\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"userEduPg\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"userEduUg\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"userFirstName\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"userId\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"userLastName\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"userLinkedinUrl\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"userLocation\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"userMiddleName\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"userPhoneNumber\": {\r",
											"          \"type\": \"integer\"\r",
											"        },\r",
											"        \"userTimeZone\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"userVisaStatus\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"userLoginEmail\": {\r",
											"          \"type\": \"string\"\r",
											"        }\r",
											"      },\r",
											"      \"required\": [\r",
											"        \"userComments\",\r",
											"        \"userEduPg\",\r",
											"        \"userEduUg\",\r",
											"        \"userFirstName\",\r",
											"        \"userId\",\r",
											"        \"userLastName\",\r",
											"        \"userLinkedinUrl\",\r",
											"        \"userLocation\",\r",
											"        \"userMiddleName\",\r",
											"        \"userPhoneNumber\",\r",
											"        \"userTimeZone\",\r",
											"        \"userVisaStatus\",\r",
											"        \"userLoginEmail\"\r",
											"      ]\r",
											"    }\r",
											"  ]\r",
											"}\r",
											"pm.test(\"Validate Schema\"),function(){\r",
											"    pm.response.to.have.jsonSchema(schemaconstant);\r",
											"}\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "c2d199d6-5f04-4581-babd-cf5ffe2a247a",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{baseURL}}/users"
							},
							"response": []
						},
						{
							"name": "Negative-All users",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "38b76818-cf33-4625-9f4d-8ab54a8d232e",
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"//POSITIVE TEST VALIDATION\r",
											"//1. Status\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"//2. Status Line\r",
											"pm.test(\"Status message is OK\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"//3. Test for Content-Type header having a particular value\r",
											"pm.test(\"Content-Type header is application/json\", () => {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
											"});\r",
											"//4 Schema validation\r",
											"\r",
											"const schemaconstant = \r",
											"{\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"array\",\r",
											"  \"items\": [\r",
											"    {\r",
											"      \"type\": \"object\",\r",
											"      \"properties\": {\r",
											"        \"userComments\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"userEduPg\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"userEduUg\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"userFirstName\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"userId\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"userLastName\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"userLinkedinUrl\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"userLocation\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"userMiddleName\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"userPhoneNumber\": {\r",
											"          \"type\": \"integer\"\r",
											"        },\r",
											"        \"userTimeZone\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"userVisaStatus\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"userLoginEmail\": {\r",
											"          \"type\": \"string\"\r",
											"        }\r",
											"      },\r",
											"      \"required\": [\r",
											"        \"userComments\",\r",
											"        \"userEduPg\",\r",
											"        \"userEduUg\",\r",
											"        \"userFirstName\",\r",
											"        \"userId\",\r",
											"        \"userLastName\",\r",
											"        \"userLinkedinUrl\",\r",
											"        \"userLocation\",\r",
											"        \"userMiddleName\",\r",
											"        \"userPhoneNumber\",\r",
											"        \"userTimeZone\",\r",
											"        \"userVisaStatus\",\r",
											"        \"userLoginEmail\"\r",
											"      ]\r",
											"    }\r",
											"  ]\r",
											"}\r",
											"pm.test(\"Validate Schema\"),function(){\r",
											"    pm.response.to.have.jsonSchema(schemaconstant);\r",
											"}\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "b685efb1-459c-4ad3-8d63-62b2445115e7",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{baseURL}}/users"
							},
							"response": []
						},
						{
							"name": "Get all Active User",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "75bb4a08-82b7-4a9c-8394-943b2410363c",
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"//POSITIVE TEST VALIDATION\r",
											"//1. Status\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"//2. Status Line\r",
											"pm.test(\"Status message is OK\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"//3. Test for Content-Type header having a particular value\r",
											"pm.test(\"Content-Type header is application/json\", () => {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
											"});\r",
											"\r",
											"//4. Schema validation\r",
											"const schemaconstant = \r",
											"{\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"array\",\r",
											"  \"items\": [\r",
											"    {\r",
											"      \"type\": \"object\",\r",
											"      \"properties\": {\r",
											"        \"userComments\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"userEduPg\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"userEduUg\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"userFirstName\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"userId\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"userLastName\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"userLinkedinUrl\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"userLocation\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"userMiddleName\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"userPhoneNumber\": {\r",
											"          \"type\": \"integer\"\r",
											"        },\r",
											"        \"userTimeZone\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"userVisaStatus\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"userLoginEmail\": {\r",
											"          \"type\": \"string\"\r",
											"        }\r",
											"      },\r",
											"      \"required\": [\r",
											"        \"userComments\",\r",
											"        \"userEduPg\",\r",
											"        \"userEduUg\",\r",
											"        \"userFirstName\",\r",
											"        \"userId\",\r",
											"        \"userLastName\",\r",
											"        \"userLinkedinUrl\",\r",
											"        \"userLocation\",\r",
											"        \"userMiddleName\",\r",
											"        \"userPhoneNumber\",\r",
											"        \"userTimeZone\",\r",
											"        \"userVisaStatus\",\r",
											"        \"userLoginEmail\"\r",
											"      ]\r",
											"    }\r",
											"  ]\r",
											"}\r",
											"\r",
											"pm.test(\"Validate Schema\"),function(){\r",
											"    pm.response.to.have.jsonSchema(schemaconstant);\r",
											"}\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "cd6df083-f592-4774-bf65-60c7067de2c9",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{baseURL}}/users/activeUsers"
							},
							"response": []
						},
						{
							"name": "Get emails of all users with active status",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "25e09dd3-0b29-4082-8d36-a235d49a11d3",
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"//POSITIVE TEST VALIDATION\r",
											"//1. Status\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"//2. Status Line\r",
											"pm.test(\"Status message is OK\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"//3. Test for Content-Type header having a particular value\r",
											"pm.test(\"Content-Type header is application/json\", () => {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
											"});\r",
											"\r",
											"//4 Schema validation\r",
											"const schemaconstant = \r",
											"{\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"array\",\r",
											"  \"items\": [\r",
											"    {\r",
											"      \"type\": \"object\",\r",
											"      \"properties\": {\r",
											"        \"creationTime\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"lastModTime\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"roleDesc\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"roleId\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"roleName\": {\r",
											"          \"type\": \"string\"\r",
											"        }\r",
											"      },\r",
											"      \"required\": [\r",
											"        \"creationTime\",\r",
											"        \"lastModTime\",\r",
											"        \"roleDesc\",\r",
											"        \"roleId\",\r",
											"        \"roleName\"\r",
											"      ]\r",
											"    }\r",
											"  ]\r",
											"}\r",
											"pm.test(\"Validate Schema\"),function(){\r",
											"    pm.response.to.have.jsonSchema(schemaconstant);\r",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "3cb5dc52-f5e2-43e3-8fab-a7c940fde0a1",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{baseURL}}/fetch-emails"
							},
							"response": []
						},
						{
							"name": "Get All Roles",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "751b4de8-707a-468e-8654-484403fb0b62",
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"//POSITIVE TEST VALIDATION\r",
											"//1. Status\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"//2. Status Line\r",
											"pm.test(\"Status message is OK\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"//3. Test for Content-Type header having a particular value\r",
											"pm.test(\"Content-Type header is application/json\", () => {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
											"});\r",
											"//4. Schema validation\r",
											"const schemaconstant = \r",
											"{\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"array\",\r",
											"  \"items\": [\r",
											"    {\r",
											"      \"type\": \"object\",\r",
											"      \"properties\": {\r",
											"        \"userComments\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"userEduPg\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"userEduUg\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"userFirstName\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"userId\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"userLastName\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"userLinkedinUrl\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"userLocation\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"userMiddleName\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"userPhoneNumber\": {\r",
											"          \"type\": \"integer\"\r",
											"        },\r",
											"        \"userTimeZone\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"userVisaStatus\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"userLoginEmail\": {\r",
											"          \"type\": \"string\"\r",
											"        }\r",
											"      },\r",
											"      \"required\": [\r",
											"        \"userComments\",\r",
											"        \"userEduPg\",\r",
											"        \"userEduUg\",\r",
											"        \"userFirstName\",\r",
											"        \"userId\",\r",
											"        \"userLastName\",\r",
											"        \"userLinkedinUrl\",\r",
											"        \"userLocation\",\r",
											"        \"userMiddleName\",\r",
											"        \"userPhoneNumber\",\r",
											"        \"userTimeZone\",\r",
											"        \"userVisaStatus\",\r",
											"        \"userLoginEmail\"\r",
											"      ]\r",
											"    }\r",
											"  ]\r",
											"}\r",
											"pm.test(\"Validate Schema\"),function(){\r",
											"    pm.response.to.have.jsonSchema(schemaconstant);\r",
											"}\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "25df65b2-1c55-4524-9980-9bac0e48645b",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{baseURL}}/roles"
							},
							"response": []
						},
						{
							"name": "Get User Info by userId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d1231ceb-a289-4b10-ac44-d4daefa5dfbb",
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"//POSITIVE TEST VALIDATION\r",
											"//1. Status\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"//2. Status Line\r",
											"pm.test(\"Status message is OK\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"//3. Test for Content-Type header having a particular value\r",
											"pm.test(\"Content-Type header is application/json\", () => {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
											"});\r",
											"\r",
											"//4. Schema Validation -- TO BE DONE\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "6e097ded-b187-4443-bf65-79a38573a7b0",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{baseURL}}/users/U330"
							},
							"response": []
						},
						{
							"name": "Get all Users with roles",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d1231ceb-a289-4b10-ac44-d4daefa5dfbb",
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"//POSITIVE TEST VALIDATION\r",
											"//1. Status\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"//2. Status Line\r",
											"pm.test(\"Status message is OK\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"//3. Test for Content-Type header having a particular value\r",
											"pm.test(\"Content-Type header is application/json\", () => {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
											"});\r",
											"\r",
											"//4. Schema Validation -- TO BE DONE\r",
											"{\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"array\",\r",
											"  \"items\": [\r",
											"    {\r",
											"      \"type\": \"object\",\r",
											"      \"properties\": {\r",
											"        \"userRoleId\": {\r",
											"          \"type\": \"integer\"\r",
											"        },\r",
											"        \"user\": {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"userId\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"userFirstName\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"userLastName\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"userMiddleName\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"userPhoneNumber\": {\r",
											"              \"type\": \"integer\"\r",
											"            },\r",
											"            \"userLocation\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"userTimeZone\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"userLinkedinUrl\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"userEduUg\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"used g\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"userComments\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"userVisaStatus\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"hibernateLazyInitializer\": {\r",
											"              \"type\": \"object\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"userId\",\r",
											"            \"userFirstName\",\r",
											"            \"userLastName\",\r",
											"            \"userMiddleName\",\r",
											"            \"userPhoneNumber\",\r",
											"            \"userLocation\",\r",
											"            \"userTimeZone\",\r",
											"            \"userLinkedinUrl\",\r",
											"            \"userEduUg\",\r",
											"            \"used g\",\r",
											"            \"userComments\",\r",
											"            \"userVisaStatus\",\r",
											"            \"hibernateLazyInitializer\"\r",
											"          ]\r",
											"        },\r",
											"        \"role\": {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"roleId\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"roleName\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"roleDesc\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"creationTime\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"lastModTime\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"hibernateLazyInitializer\": {\r",
											"              \"type\": \"object\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"roleId\",\r",
											"            \"roleName\",\r",
											"            \"roleDesc\",\r",
											"            \"creationTime\",\r",
											"            \"lastModTime\",\r",
											"            \"hibernateLazyInitializer\"\r",
											"          ]\r",
											"        },\r",
											"        \"batches\": {\r",
											"          \"type\": \"array\",\r",
											"          \"items\": {}\r",
											"        },\r",
											"        \"userRoleStatus\": {\r",
											"          \"type\": \"string\"\r",
											"        }\r",
											"      },\r",
											"      \"required\": [\r",
											"        \"userRoleId\",\r",
											"        \"user\",\r",
											"        \"role\",\r",
											"        \"batches\",\r",
											"        \"userRoleStatus\"\r",
											"      ]\r",
											"    }\r",
											"  ]\r",
											"}\r",
											"pm.test(\"Validate Schema\"),function(){\r",
											"    pm.response.to.have.jsonSchema(schemaconstant);\r",
											"}\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "106ca4ce-3b73-4e0c-b5d0-cc9068fb0e09",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{baseURL}}/users/roles"
							},
							"response": []
						},
						{
							"name": "Update User",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "dba1bbfb-194f-40f0-9820-8a8a34020a9e",
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"//POSITIVE TEST VALIDATION\r",
											"//1. Status\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"//2. Status Line\r",
											"pm.test(\"Status message is OK\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"//3. Test for Content-Type header having a particular value\r",
											"pm.test(\"Content-Type header is application/json\", () => {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
											"});\r",
											"\r",
											"//4. schema validation\r",
											"const schemaconstant = \r",
											"{\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"userComments\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"userEduPg\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"userEduUg\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"userFirstName\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"userId\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"userLastName\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"userLinkedinUrl\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"userLocation\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"userMiddleName\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"userPhoneNumber\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"userTimeZone\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"userVisaStatus\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"userComments\",\r",
											"    \"userEduPg\",\r",
											"    \"userEduUg\",\r",
											"    \"userFirstName\",\r",
											"    \"userId\",\r",
											"    \"userLastName\",\r",
											"    \"userLinkedinUrl\",\r",
											"    \"userLocation\",\r",
											"    \"userMiddleName\",\r",
											"    \"userPhoneNumber\",\r",
											"    \"userTimeZone\",\r",
											"    \"userVisaStatus\"\r",
											"  ]\r",
											"}\r",
											"pm.test(\"Validate Schema\"),function(){\r",
											"    pm.response.to.have.jsonSchema(schemaconstant);\r",
											"}\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "4810b4ee-755e-4d3d-a35c-264b02fb340d",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"userComments\": \"String\",\r\n\"userEduPg\": \"String\",\r\n\"userEduUg\": \"String\",\r\n\"userFirstName\": \"Ram\",\r\n\"userId\": \"String\",\r\n\"userLastName\": \"Sandy\",\r\n\"userMiddleName\": \"string\",\r\n\"userLinkedinUrl\": \"www.linkedin.com\",\r\n\"userLocation\": \"String\",\r\n\"userLoginEmail\": \"Test1@gmail.com\",\r\n\"userPhoneNumber\": \"+91 2624567894\",\r\n\"userTimeZone\": \"EST\",\r\n\"userVisaStatus\": \"H4\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}/users/U330"
							},
							"response": []
						},
						{
							"name": "Update User RoleId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cc62d710-6117-4d3c-a429-02ae24e4d8f4",
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"//POSITIVE TEST VALIDATION\r",
											"//1. Status\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"//2. Status Line\r",
											"pm.test(\"Status message is OK\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"//3. Test for Content-Type header having a particular value\r",
											"pm.test(\"Content-Type header is application/json\", () => {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
											"});\r",
											"//4. Schema validation\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "98f71043-a0ef-4923-801f-0c5344ce9754",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"userRoleList\": [\r\n{\r\n\"roleId\": \"R03\",\r\n\"userRoleStatus\": \"Active\"\r\n}\r\n]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}/users/roleId/U650"
							},
							"response": []
						},
						{
							"name": "Assign Update User Role Program Batch Status",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "00366d36-835f-4688-9b7c-226c1d6cd6cd",
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"//POSITIVE TEST VALIDATION\r",
											"//1. Status\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"//2. Status Line\r",
											"pm.test(\"Status message is OK\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"//3. Test for Content-Type header having a particular value\r",
											"pm.test(\"Content-Type header is application/json\", () => {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "fabd78f1-3f1f-40ec-b667-92b33b90c85c",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"programI\": 0,\r\n\"roleId\": \"string\",\r\n\"userId\": \"string\",\r\n\"userRoleProgramBatches\": [\r\n{\r\n\"batchId\": 0,\r\n\"userRoleProgramBatchStatus\":\r\n\"string\"\r\n}\r\n]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}//users/roleProgramBatchStatus/{userId}"
							},
							"response": []
						},
						{
							"name": "Update User Login Status",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5525b58d-5a1a-49b7-a2f4-b489cf258cac",
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"//POSITIVE TEST VALIDATION\r",
											"//1. Status\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"//2. Status Line\r",
											"pm.test(\"Status message is OK\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"//3. Test for Content-Type header having a particular value\r",
											"pm.test(\"Content-Type header is application/json\", () => {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "666a2660-2751-4071-a009-3d8ec870b03b",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"loginStatus\": \"string\",\r\n\"password\": \"string\",\r\n\"roleIds\": [\r\n\"string\"\r\n],\r\n\"status\": \"string\",\r\n\"userLoginEmail\": \"string\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}///users/userLogin/{userId}"
							},
							"response": []
						},
						{
							"name": "Delete User-staff",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "351cbed9-051a-412b-b65d-fbfabb6d63e1",
										"exec": [
											"var userid_staff = pm.collectionVariables.get(\"Staff_Id\")\r",
											"pm.variables.set(\"userid_staff\",userid_staff)"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "49b68ab6-a962-438f-a5c0-2d967e71c8ea",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/users/:userid",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"users",
										":userid"
									],
									"variable": [
										{
											"key": "userid",
											"value": "{{userid_staff}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete User-student",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "351cbed9-051a-412b-b65d-fbfabb6d63e1",
										"exec": [
											"var userid_student = pm.collectionVariables.get(\"Student_Id\")\r",
											"pm.variables.set(\"userid_student\",userid_student)"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "170672ae-77d8-440e-b4d8-499474793a4b",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/users/:userid",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"users",
										":userid"
									],
									"variable": [
										{
											"key": "userid",
											"value": "{{userid_staff}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"id": "f705aeb9-4eb4-4cb8-b77c-ebacbad1b4da"
				}
			],
			"id": "7d2c0f15-7473-45c7-aa30-fd9565751346"
		},
		{
			"name": "Tear Down and Logout",
			"item": [
				{
					"name": "Logout",
					"id": "d73507bc-e2f7-4c55-a8b6-45f42c674551",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseURL}}//logoutlms"
					},
					"response": []
				}
			],
			"id": "1a9cce7f-3ac9-4faf-896c-b31dd875cc26"
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": {
			"token": "{{BearerToken}}"
		}
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "3e3aadfb-775b-4602-bb64-06fed0295123",
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "49d463dd-0635-4d6c-91c6-4800c2d567d2",
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "BearerToken",
			"value": ""
		},
		{
			"key": "Admin_UserID",
			"value": ""
		},
		{
			"key": "baseUrl",
			"value": "https://lms-hackthon-feb25-803334c87fbe.herokuapp.com/lms",
			"type": "default"
		},
		{
			"key": "Student_Id",
			"value": ""
		},
		{
			"key": "Staff_Id",
			"value": ""
		}
	]
}