{
	"info": {
		"_postman_id": "6b92f49d-5788-4a9d-a692-c53cab4ad45f",
		"name": "Team3_CodeResponders",
		"schema": "https://schema.postman.com/json/collection/v2.0.0/collection.json"
	},
	"item": [
		{
			"name": "Login",
			"item": [
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b51eb5c2-d1aa-471e-9042-a8d29be81441",
								"exec": [
									"const response = pm.response.json()\r",
									"\r",
									"//Validate status 200, roles value and  + response schema\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//Validate status being Active\r",
									"pm.test(\"User Status is Active\", function () {\r",
									"    pm.expect(response.status).to.equal(\"Active\");\r",
									"});\r",
									"\r",
									"//Validate Admin Roles\r",
									"pm.test(\"User have both Admin and Staff roles assigned\", function () {\r",
									"    const roles = response.roles\r",
									"    pm.expect(roles).to.include(\"ROLE_ADMIN\");\r",
									"    pm.expect(roles).to.include(\"ROLE_STAFF\");\r",
									"});\r",
									"\r",
									"\r",
									"//Set some values at collection level\r",
									"//1. Set Bearer Token\r",
									"pm.collectionVariables.set(\"BearerToken\", response.token);\r",
									"\r",
									"//2. set Admin UserID\r",
									"pm.collectionVariables.set(\"Admin_UserID\", response.userId);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "7b7a0350-53f3-46a6-abe0-628e3ea33d12",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n \"password\": \"{{password}}\",\r\n \"userLoginEmailId\": \"{{userLoginEmailId}}\"\r\n } ",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}/login"
					},
					"response": []
				},
				{
					"name": "Negative - Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b51eb5c2-d1aa-471e-9042-a8d29be81441",
								"exec": [
									"//INCORRECT ENDPOINT SHOULD GIVE 404 BOT FOUND. DEFECT --> GETTING 401 UNAUTHORIZED\r",
									"\r",
									"const expStatusCode = pm.collectionVariables.get(\"statusCode\");\r",
									"const expStatusLine = pm.collectionVariables.get(\"statusLine\");\r",
									"const expHttpMethod = pm.collectionVariables.get(\"httpMethod\");\r",
									"const scenarioName = pm.collectionVariables.get(\"scenarioName\");\r",
									"const expMessage = pm.collectionVariables.get(\"message\");\r",
									"\r",
									"\r",
									"//NEGATIVE TEST VALIDATION\r",
									"//1. Status\r",
									"pm.test(`Status code is ${expStatusCode}`, function () {\r",
									"    pm.response.to.have.status(expStatusCode);\r",
									"});\r",
									"\r",
									"//2. Status Line\r",
									"pm.test(`Status message is ${expStatusLine}`, function () {\r",
									"    pm.response.to.have.status(expStatusLine);\r",
									"});\r",
									"\r",
									"//3. Scenario specific Tests\r",
									"if(scenarioName === \"Incorrect Http Method\") {\r",
									"    pm.test(`Validate ${scenarioName} JSON Response msg`, () => {\r",
									"        pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"        pm.expect(pm.response.json().message).to.include(`Request method '${expHttpMethod}' is not supported`);\r",
									"        pm.expect(pm.response.json().success).to.eql(false);\r",
									"        \r",
									"    });\r",
									"}\r",
									"\r",
									"if(scenarioName.includes(\"Incorrect Endpoint\")) {\r",
									"    pm.test(`Validate ${scenarioName}  Response msg`, () => {\r",
									"        pm.expect(pm.response.headers.get('Content-Type')).to.includes('text/plain');\r",
									"        pm.expect(pm.response.text()).to.eql(`Invalid endpoint`);\r",
									"        \r",
									"    });\r",
									"}\r",
									"\r",
									"if(scenarioName === \"Incorrect BaseURL\") {\r",
									"    pm.test(`Validate ${scenarioName} Response msg`, () => {\r",
									"        pm.expect(pm.response.headers.get('Content-Type')).to.include('text/html');\r",
									"        pm.expect(pm.response.text()).to.include('<title>Heroku | Application Error</title>');\r",
									"        \r",
									"    });\r",
									"}\r",
									"\r",
									"pm.test(`Validate ${scenarioName} Response msg`, () => {\r",
									"        pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"        pm.expect(pm.response.json().message).to.include(expMessage);\r",
									"        pm.expect(pm.response.json().success).to.eql(false);\r",
									"        \r",
									"    });\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "3d6426d2-99aa-40a9-9493-c07787f807e3",
								"exec": [
									"setTimeout(() => {}, 1000);\r",
									"console.log(\"Inside pre-requisite\")\r",
									"var scenarioName = pm.collectionVariables.get(\"scenarioName\");\r",
									"console.log(\"Scenario Name \"+scenarioName)\r",
									"\r",
									"//For every iteration, set the credentials and baseURL to base true values\r",
									"pm.variables.set(\"baseURL\", pm.environment.get('baseURL'))\r",
									"pm.variables.set(\"userLoginEmailId\", pm.environment.get('userLoginEmailId'))\r",
									"pm.variables.set(\"password\", pm.environment.get('password'))\r",
									"\r",
									"\r",
									"//Tweak data based on scenario needs\r",
									"if(scenarioName === \"Incorrect Http Method\"){\r",
									"    pm.request.method = pm.collectionVariables.get(\"httpMethod\");\r",
									"}\r",
									"else if(scenarioName === \"Incorrect BaseURL\"){\r",
									"    pm.variables.set(\"baseURL\", pm.collectionVariables.get('baseURL'))\r",
									"}\r",
									"else if(scenarioName === \"Incorrect Content-Type\"){\r",
									"    var contentType = \"application/xml\"; \r",
									"\r",
									"    // Set the header for Content-Type\r",
									"    pm.request.headers.add({\r",
									"        key: \"Content-Type\",\r",
									"        value: contentType\r",
									"    });\r",
									"}\r",
									"else if(scenarioName === \"Incorrect UserLogin\"){\r",
									"    pm.variables.set(\"userLoginEmailId\", pm.collectionVariables.get('userLoginEmailId'))\r",
									"}\r",
									"else if(scenarioName === \"Empty Credentials\"){\r",
									"    pm.variables.set(\"userLoginEmailId\", \"\")\r",
									"    pm.variables.set(\"password\", \"\")\r",
									"}\r",
									"else if(scenarioName === \"Empty UserLogin\"){\r",
									"    pm.variables.set(\"userLoginEmailId\", \"\")\r",
									"}\r",
									"else if(scenarioName === \"Empty password\"){\r",
									"    pm.variables.set(\"password\", \"\")\r",
									"}\r",
									"else if(scenarioName === \"Incorrect UserLogin\"){\r",
									"    pm.variables.set(\"password\", pm.collectionVariables.get(\"userLoginEmailId\"))\r",
									"}\r",
									"else if(scenarioName.includes(\"space\")){\r",
									"    pm.variables.set(\"password\", pm.environment.get(\"password\"+\" \")) //add space to correct password value at environment level\r",
									"}\r",
									"else {\r",
									"    pm.variables.set(\"password\", pm.collectionVariables.get(\"password\"))\r",
									"}\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "d1c067bb-29a8-4e14-bfd5-99de6728fcc1",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n \"password\": \"{{password}}\",\r\n \"userLoginEmailId\": \"{{userLoginEmailId}}\"\r\n } \r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}/{{endPoint}}"
					},
					"response": []
				}
			],
			"id": "62ebfba9-b3c2-4cb7-a492-dc55d0cd8502"
		},
		{
			"name": "Program",
			"item": [
				{
					"name": "AllPrograms",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "194cf698-6aee-4d1a-8aba-6e5589f54743",
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"//POSITIVE TEST VALIDATION\r",
									"//1. Status\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//2. Status Line\r",
									"pm.test(\"Status message is OK\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"//3. Test for Content-Type header having a particular value\r",
									"pm.test(\"Content-Type header is application/json\", () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"});\r",
									"\r",
									"//4. Schema Validation -- TO BE DONE\r",
									"const schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"array\",\r",
									"  \"items\": [\r",
									"    {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"programId\": {\r",
									"          \"type\": \"integer\"\r",
									"        },\r",
									"        \"programName\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"programDescription\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"programStatus\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"creationTime\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"lastModTime\": {\r",
									"          \"type\": \"string\"\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"programId\",\r",
									"        \"programName\",\r",
									"        \"programDescription\",\r",
									"        \"programStatus\",\r",
									"        \"creationTime\",\r",
									"        \"lastModTime\"\r",
									"      ]\r",
									"    }\r",
									"  ]\r",
									"}\r",
									"\r",
									"//SET TOTAL COUNT\r",
									"console.log(response.length)\r",
									"pm.collectionVariables.set(\"ProgramCount_BeforeAdd\",response.length)\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "862fb363-ff92-457a-95f8-1b373ed7112d",
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "dd26bcfe-bfd0-4488-b4a9-39e51467c9c8",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseURL}}/allPrograms"
					},
					"response": []
				},
				{
					"name": "Negative - AllPrograms",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "e152b533-6218-4ec0-bc43-a5d3ae19ea42",
								"exec": [
									"var scenarioName = pm.collectionVariables.get(\"scenarioName\");\r",
									"console.log(\"Scenario Name \"+scenarioName)\r",
									"\r",
									"if(scenarioName === \"Incorrect Http Method\"){\r",
									"    pm.request.method = pm.collectionVariables.get(\"httpMethod\");;\r",
									"}\r",
									"\r",
									"if(scenarioName === \"Incorrect BaseURL\"){\r",
									"    pm.variables.set(\"baseURL\", pm.collectionVariables.get('baseURL'))\r",
									"}\r",
									"\r",
									"if(scenarioName === \"No Auth\"){\r",
									"    pm.variables.set(\"BearerToken\",\"\")\r",
									"    pm.variables.set(\"baseURL\", pm.collectionVariables.get('baseURL'))\r",
									"}\r",
									"\r",
									"/*\r",
									"In Postman, the priority for variable resolution is as follows:\r",
									"\r",
									"Data Variables (from the CSV or JSON file used in collection runs) — Highest priority\r",
									"Environment Variables — Second priority\r",
									"Global Variables — Third priority\r",
									"Collection Variables — Lowest priority\r",
									" */\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "2932fa53-5b2d-4f5d-9d5a-edf6e7de20d6",
								"exec": [
									"const expStatusCode = pm.collectionVariables.get(\"statusCode\");\r",
									"const expStatusLine = pm.collectionVariables.get(\"statusLine\");\r",
									"const expHttpMethod = pm.collectionVariables.get(\"httpMethod\");\r",
									"const scenarioName = pm.collectionVariables.get(\"scenarioName\");\r",
									"\r",
									"//NEGATIVE TEST VALIDATION\r",
									"//1. Status\r",
									"pm.test(`Status code is ${expStatusCode}`, function () {\r",
									"    pm.response.to.have.status(expStatusCode);\r",
									"});\r",
									"\r",
									"//2. Status Line\r",
									"pm.test(`Status message is ${expStatusLine}`, function () {\r",
									"    pm.response.to.have.status(expStatusLine);\r",
									"});\r",
									"\r",
									"//3. Scenario specific Tests\r",
									"if(scenarioName === \"Incorrect Http Method\") {\r",
									"    pm.test(\"Validate Incorrect HTTP Method JSON Response msg\", () => {\r",
									"        pm.expect(pm.response.json().message).to.eql(`Request method '${expHttpMethod}' is not supported`);\r",
									"        pm.expect(pm.response.json().success).to.eql(false);\r",
									"        \r",
									"    });\r",
									"}\r",
									"\r",
									"if(scenarioName === \"Incorrect Endpoint\") {\r",
									"    pm.test(\"Validate Incorrect Endpoint Response msg\", () => {\r",
									"        pm.expect(pm.response.headers.get('Content-Type')).to.include('text/plain');\r",
									"        pm.expect(pm.response.text()).to.eql(`Invalid endpoint`);\r",
									"        \r",
									"    });\r",
									"}\r",
									"\r",
									"if(scenarioName === \"Incorrect BaseURL\") {\r",
									"    pm.test(\"Validate Incorrect BaseURL Response msg\", () => {\r",
									"        pm.expect(pm.response.headers.get('Content-Type')).to.include('text/html');\r",
									"        pm.expect(pm.response.text()).to.include('<title>Heroku | Application Error</title>');\r",
									"        \r",
									"    });\r",
									"}\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "092211b9-ef01-44aa-8912-dbfe073f6ac5",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseURL}}/{{endPoint}}"
					},
					"response": []
				},
				{
					"name": "AddNewProgram_Mandatory",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "adb5e00d-dbb4-4492-9fb4-ee85b63be627",
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"//POSITIVE TEST VALIDATION\r",
									"if(pm.response.to.have.status(201)){ // HAPPY PATH\r",
									"\r",
									"    //1. Status\r",
									"    pm.test(\"Status code is 201\", function () {\r",
									"        pm.response.to.have.status(201);\r",
									"    });\r",
									"\r",
									"    //2. Status Line\r",
									"    pm.test(\"Status message is Created\", function () {\r",
									"        pm.response.to.have.status(\"Created\");\r",
									"    });\r",
									"\r",
									"    //3. Test for Content-Type header having a particular value\r",
									"    pm.test(\"Content-Type header is application/json\", () => {\r",
									"        pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"    });\r",
									"\r",
									"    //4. Schema Validation -- TO BE DONE\r",
									"\r",
									"    //5. Request VS Response Body Validation\r",
									"    pm.test(\"Program details in Request and Response matches\", function () {\r",
									"\r",
									"        // Get the raw request body and Parse it to JSON\r",
									"        const rawRequestBody = pm.request.body.raw;\r",
									"        const requestBody = JSON.parse(rawRequestBody);\r",
									"\r",
									"        pm.expect(response).to.have.property(\"programId\")\r",
									"        pm.expect(requestBody.programName).to.eql(response.programName);\r",
									"        pm.expect(requestBody.programDescription).to.eql(response.programDescription);\r",
									"        pm.expect(requestBody.programStatus).to.eql(response.programStatus);\r",
									"\r",
									"    });\r",
									"\r",
									"    //GET ALL PROGRAMS COUNT AFTER PROGRAM CREATION\r",
									"    pm.test(\"Check Total Program Count increased by 1\", function () {\r",
									"        \r",
									"        // Perform GET request programmatically\r",
									"        pm.sendRequest({\r",
									"            url: pm.environment.get(\"baseURL\")+'/allPrograms',  \r",
									"            method: 'GET',\r",
									"            header: {\r",
									"               'Authorization': 'Bearer ' + pm.collectionVariables.get(\"BearerToken\") \r",
									"            }\r",
									"        }, function (err, res) {\r",
									"            if (err) {\r",
									"                console.log(err);\r",
									"                return;\r",
									"            } else {\r",
									"               \r",
									"                const programs = res.json(); \r",
									"                const count = programs.length; \r",
									"\r",
									"                    pm.expect(programs).to.include(response.programName);\r",
									"                    pm.expect(count).to.equal((pm.collectionVariables.get(\"ProgramCount_BeforeAdd\"))+1); \r",
									"                \r",
									"            }\r",
									"        });\r",
									"    });\r",
									"\r",
									"}\r",
									"\r",
									"\r",
									"//SET VALUE AT RUN TIME (LATER CHECK IF THIS COULD BE TRANSFERRED AS PROGRAM OBJECT!!!!)\r",
									"pm.collectionVariables.set(\"programID_Mandatory\", response.programId)\r",
									"pm.collectionVariables.set(\"programName_Mandatory\", response.programName)\r",
									"pm.collectionVariables.set(\"programDesc_Mandatory\", response.programDescription)\r",
									"pm.collectionVariables.set(\"programStatus_Mandatory\", response.programStatus)\r",
									"\r",
									"\r",
									"//NEGATIVE TEST VALIDATION\r",
									"\r",
									"\r",
									"/**\r",
									" * status code = 400\r",
									"{   \r",
									"    \"message\": \"programName Must contain only letters and sometimes hyphens\",\r",
									"    \"success\": false\r",
									"}\r",
									" */\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "98767db8-9111-45b7-b2ca-b176472c0380",
								"exec": [
									"function getRandomLetterString() {\r",
									"    const letters = 'abcdefghijklmnopqrstuvwxyz'; // Available letters\r",
									"    let randomString = '';\r",
									"    \r",
									"    // Loop 3 times to generate a 3-letter string\r",
									"    for (let i = 0; i < 3; i++) {\r",
									"        const randomIndex = Math.floor(Math.random() * letters.length); // Get a random index\r",
									"        randomString += letters[randomIndex]; // Add the random letter to the string\r",
									"    }\r",
									"\r",
									"    return randomString;\r",
									"}\r",
									"\r",
									"var programName_Mandatory_data = 'SeleniumPython-Ten'+ getRandomLetterString();\r",
									"pm.variables.set(\"programName_Mandatory_data\",programName_Mandatory_data)\r",
									"console.log('randome data ' + programName_Mandatory_data)\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "1e18e14e-83eb-4bee-b60f-505c1ccbb5c4",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n \"programDescription\":\"\",\r\n \"programName\":\"{{programName_Mandatory_data}}\", //mandatory\r\n \"programStatus\":\"Active\" //mandatory\r\n }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}/saveprogram"
					},
					"response": []
				},
				{
					"name": "Negative - AddNewProgram_Mandatory",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "adb5e00d-dbb4-4492-9fb4-ee85b63be627",
								"exec": [
									"pm.test(\"Incorrect BaseURL Test\", function () {\r",
									"    // Get the raw response text (HTML)\r",
									"    const responseText = pm.response.text();\r",
									"\r",
									"    // Log the raw HTML response to the console\r",
									"    console.log(responseText);\r",
									"\r",
									"    // Check if the response contains some specific text or HTML element\r",
									"    pm.expect(responseText).to.include('<title>Heroku | Application Error</title>');\r",
									"});\r",
									"\r",
									"//const response = pm.response.json();\r",
									"\r",
									"//delete later program id = 17692, 17693\r",
									"\r",
									"//NEGATIVE TEST VALIDATION\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "98767db8-9111-45b7-b2ca-b176472c0380",
								"exec": [
									"function getRandomLetterString() {\r",
									"    const letters = 'abcdefghijklmnopqrstuvwxyz'; // Available letters\r",
									"    let randomString = '';\r",
									"    \r",
									"    // Loop 3 times to generate a 3-letter string\r",
									"    for (let i = 0; i < 3; i++) {\r",
									"        const randomIndex = Math.floor(Math.random() * letters.length); // Get a random index\r",
									"        randomString += letters[randomIndex]; // Add the random letter to the string\r",
									"    }\r",
									"\r",
									"    return randomString;\r",
									"}\r",
									"\r",
									"var programName_Mandatory_data = 'SeleniumPython-Ten'+ getRandomLetterString();\r",
									"//var programName_Mandatory_data = '3-Ten';\r",
									"\r",
									"pm.variables.set(\"programName_Mandatory_data\",programName_Mandatory_data)\r",
									"console.log('randome data ' + programName_Mandatory_data)\r",
									"\r",
									"/**\r",
									" * status code = 400\r",
									"{   \r",
									"    \"message\": \"programName Must contain only letters and sometimes hyphens\",\r",
									"    \"success\": false\r",
									"}\r",
									" */\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "0a4a4a7c-827c-49b1-864b-04968f88d9bf",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "/*{\r\n \"programDescription\":\"description-desc\",\r\n \"programName\": \"{{programName_Mandatory_data}}\", //mandatory\r\n //\"programName\":true, //mandatory\r\n \"programStatus\": \"Active\" //mandatory\r\n}*/\r\n\r\n{\r\n \"programDescription\":\"\",\r\n //\"programName\": \"{{programName_Mandatory_data}}\", //mandatory\r\n \"programName\":\"\", //mandatory\r\n \"programStatus\": \"\" //mandatory\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "https://lms-hackthon-feb25-803334c87fbe.herokuapp.com/lms/saveprogram"
					},
					"response": []
				},
				{
					"name": "AddNewProgram_AllData",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "97f11445-4b2d-4a2f-a5c3-fa351beef767",
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"//POSITIVE TEST VALIDATION\r",
									"if(pm.response.to.have.status(201)){ // HAPPY PATH\r",
									"\r",
									"    //1. Status\r",
									"    pm.test(\"Status code is 201\", function () {\r",
									"        pm.response.to.have.status(201);\r",
									"    });\r",
									"\r",
									"    //2. Status Line\r",
									"    pm.test(\"Status message is Created\", function () {\r",
									"        pm.response.to.have.status(\"Created\");\r",
									"    });\r",
									"\r",
									"    //3. Test for Content-Type header having a particular value\r",
									"    pm.test(\"Content-Type header is application/json\", () => {\r",
									"        pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"    });\r",
									"\r",
									"    //4. Schema Validation -- TO BE DONE\r",
									"\r",
									"    //5. Request VS Response Body Validation\r",
									"    pm.test(\"Program name matches\", function () {\r",
									"\r",
									"        // Get the raw request body and Parse it to JSON\r",
									"        const rawRequestBody = pm.request.body.raw;\r",
									"        const requestBody = JSON.parse(rawRequestBody);\r",
									"\r",
									"        pm.expect(response).to.have.property(\"programId\")\r",
									"        pm.expect(requestBody.programName).to.eql(response.programName);\r",
									"        pm.expect(requestBody.programDescription).to.eql(response.programDescription);\r",
									"        pm.expect(requestBody.programStatus).to.eql(response.programStatus);\r",
									"\r",
									"    });\r",
									"\r",
									"    //GET ALL PROGRAMS COUNT AFTER PROGRAM CREATION\r",
									"    pm.test(\"Check Total Program Count increased by 1\", function () {\r",
									"        \r",
									"        // Perform GET request programmatically\r",
									"        pm.sendRequest({\r",
									"            url: pm.environment.get(\"baseURL\")+'/allPrograms',  \r",
									"            method: 'GET',\r",
									"            header: {\r",
									"               'Authorization': 'Bearer ' + pm.collectionVariables.get(\"BearerToken\") \r",
									"            }\r",
									"        }, function (err, res) {\r",
									"            if (err) {\r",
									"                console.log(err);\r",
									"                   // pm.expect(err).to.be.null; // Ensure there is no error\r",
									"                return;\r",
									"            } else {\r",
									"               \r",
									"                const programs = res.json(); \r",
									"                const count = programs.length; \r",
									"\r",
									"                    pm.expect(programs).to.include(response.programName);\r",
									"                    pm.expect(count).to.equal((pm.collectionVariables.get(\"ProgramCount_BeforeAdd\"))+2); \r",
									"                \r",
									"            }\r",
									"        });\r",
									"    });\r",
									"\r",
									"}\r",
									"\r",
									"\r",
									"//SET VALUE AT RUN TIME (LATER CHECK IF THIS COULD BE TRANSFERRED AS PROGRAM OBJECT!!!!!!!)\r",
									"pm.collectionVariables.set(\"programID_All\", response.programId)\r",
									"pm.collectionVariables.set(\"programName_All\", response.programName)\r",
									"pm.collectionVariables.set(\"programDesc_All\", response.programDescription)\r",
									"pm.collectionVariables.set(\"programStatus_All\", response.programStatus)\r",
									"\r",
									"\r",
									"//NEGATIVE TEST VALIDATION\r",
									"\r",
									"\r",
									"/**\r",
									" * status code = 400\r",
									"{   \r",
									"    \"message\": \"programName Must contain only letters and sometimes hyphens\",\r",
									"    \"success\": false\r",
									"}\r",
									" */"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "39732b31-aa79-47c8-90b0-e315ef0523cd",
								"exec": [
									"function getRandomLetterString() {\r",
									"    const letters = 'abcdefghijklmnopqrstuvwxyz'; // Available letters\r",
									"    let randomString = '';\r",
									"    \r",
									"    // Loop 3 times to generate a 3-letter string\r",
									"    for (let i = 0; i < 3; i++) {\r",
									"        const randomIndex = Math.floor(Math.random() * letters.length); // Get a random index\r",
									"        randomString += letters[randomIndex]; // Add the random letter to the string\r",
									"    }\r",
									"\r",
									"    return randomString;\r",
									"}\r",
									"\r",
									"var programName_Mandatory_data = 'SeleniumPython-Ten'+ getRandomLetterString();\r",
									"pm.variables.set(\"programName_Mandatory_data\",programName_Mandatory_data)\r",
									"console.log('randome data ' + programName_Mandatory_data)"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "d24a44bd-9c10-43cd-80f1-77fcca0e2490",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n \"programDescription\":\"Payload has data for all fields\",\r\n \"programName\":\"{{programName_Mandatory_data}}\", //mandatory and unique\r\n \"programStatus\":\"Active\" //mandatory\r\n }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}/saveprogram"
					},
					"response": []
				},
				{
					"name": "AddNewProgram_ModuleInt",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "97f11445-4b2d-4a2f-a5c3-fa351beef767",
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"//POSITIVE TEST VALIDATION\r",
									"if(pm.response.to.have.status(201)){ // HAPPY PATH\r",
									"\r",
									"    //1. Status\r",
									"    pm.test(\"Status code is 201\", function () {\r",
									"        pm.response.to.have.status(201);\r",
									"    });\r",
									"\r",
									"    //2. Status Line\r",
									"    pm.test(\"Status message is Created\", function () {\r",
									"        pm.response.to.have.status(\"Created\");\r",
									"    });\r",
									"\r",
									"    //3. Test for Content-Type header having a particular value\r",
									"    pm.test(\"Content-Type header is application/json\", () => {\r",
									"        pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"    });\r",
									"\r",
									"    //4. Schema Validation -- TO BE DONE\r",
									"\r",
									"    //5. Request VS Response Body Validation\r",
									"    pm.test(\"Program name matches\", function () {\r",
									"\r",
									"        // Get the raw request body and Parse it to JSON\r",
									"        const rawRequestBody = pm.request.body.raw;\r",
									"        const requestBody = JSON.parse(rawRequestBody);\r",
									"\r",
									"        pm.expect(response).to.have.property(\"programId\")\r",
									"        pm.expect(requestBody.programName).to.eql(response.programName);\r",
									"        pm.expect(requestBody.programDescription).to.eql(response.programDescription);\r",
									"        pm.expect(requestBody.programStatus).to.eql(response.programStatus);\r",
									"\r",
									"    });\r",
									"\r",
									"    //GET ALL PROGRAMS COUNT AFTER PROGRAM CREATION\r",
									"    pm.test(\"Check Total Program Count increased by 1\", function () {\r",
									"        \r",
									"        // Perform GET request programmatically\r",
									"        pm.sendRequest({\r",
									"            url: pm.environment.get(\"baseURL\")+'/allPrograms',  \r",
									"            method: 'GET',\r",
									"            header: {\r",
									"               'Authorization': 'Bearer ' + pm.collectionVariables.get(\"BearerToken\") \r",
									"            }\r",
									"        }, function (err, res) {\r",
									"            if (err) {\r",
									"                console.log(err);\r",
									"                   // pm.expect(err).to.be.null; // Ensure there is no error\r",
									"                return;\r",
									"            } else {\r",
									"               \r",
									"                const programs = res.json(); \r",
									"                const count = programs.length; \r",
									"\r",
									"                    pm.expect(programs).to.include(response.programName);\r",
									"                    pm.expect(count).to.equal((pm.collectionVariables.get(\"ProgramCount_BeforeAdd\"))+2); \r",
									"                \r",
									"            }\r",
									"        });\r",
									"    });\r",
									"\r",
									"}\r",
									"\r",
									"\r",
									"//SET VALUE AT RUN TIME (LATER CHECK IF THIS COULD BE TRANSFERRED AS PROGRAM OBJECT!!!!!!!)\r",
									"pm.collectionVariables.set(\"programID_ModuleIntegration\", response.programId)\r",
									"pm.collectionVariables.set(\"programName_ModuleIntegration\", response.programName)\r",
									"pm.collectionVariables.set(\"programDesc_ModuleIntegration\", response.programDescription)\r",
									"pm.collectionVariables.set(\"programStatus_ModuleIntegration\", response.programStatus)\r",
									"\r",
									"\r",
									"//NEGATIVE TEST VALIDATION\r",
									"\r",
									"\r",
									"/**\r",
									" * status code = 400\r",
									"{   \r",
									"    \"message\": \"programName Must contain only letters and sometimes hyphens\",\r",
									"    \"success\": false\r",
									"}\r",
									" */"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "39732b31-aa79-47c8-90b0-e315ef0523cd",
								"exec": [
									"function getRandomLetterString() {\r",
									"    const letters = 'abcdefghijklmnopqrstuvwxyz'; // Available letters\r",
									"    let randomString = '';\r",
									"    \r",
									"    // Loop 3 times to generate a 3-letter string\r",
									"    for (let i = 0; i < 3; i++) {\r",
									"        const randomIndex = Math.floor(Math.random() * letters.length); // Get a random index\r",
									"        randomString += letters[randomIndex]; // Add the random letter to the string\r",
									"    }\r",
									"\r",
									"    return randomString;\r",
									"}\r",
									"\r",
									"var programName_Mandatory_data = 'SeleniumPython-Ten'+ getRandomLetterString();\r",
									"pm.variables.set(\"programName_Mandatory_data\",programName_Mandatory_data)\r",
									"console.log('randome data ' + programName_Mandatory_data)"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "a4e52baa-9421-4aac-97ab-6d36ee624ded",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n \"programDescription\":\"Payload has data for all fields\",\r\n \"programName\":\"{{programName_Mandatory_data}}\", //mandatory and unique\r\n \"programStatus\":\"Active\" //mandatory\r\n }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}/saveprogram"
					},
					"response": []
				},
				{
					"name": "AllProgramswithUsers",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1fbc2e20-e724-4b6d-a436-fdadaa40a5b5",
								"exec": [
									"const response = pm.response.json()\r",
									"\r",
									"console.log(response.length) //7 distinct programs with multiple users\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "55a7fa98-c345-4da6-a94f-6c3aecf88c34",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseURL}}/allProgramsWithUsers - execute this after User or class creation"
					},
					"response": []
				},
				{
					"name": "ProgrambyProgramId",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1fbc2e20-e724-4b6d-a436-fdadaa40a5b5",
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"var programList = pm.collectionVariables.get(\"programList\");\r",
									"\r",
									"//Happy Path - Positive\r",
									"if(pm.response.to.have.status(200)){\r",
									"\r",
									"    //1. Status Code\r",
									"    pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    });\r",
									"\r",
									"    //2. Status Line\r",
									"    pm.test(\"Status message is OK\", function () {\r",
									"        pm.response.to.have.status(\"OK\");\r",
									"    });\r",
									"\r",
									"    //3. Test for Content-Type header having a particular value\r",
									"    pm.test(\"Content-Type header is application/json\", () => {\r",
									"        pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"    });\r",
									"\r",
									"    //4. Schema Validation -- TO BE DONE\r",
									"\r",
									"    //5. Data Validation\r",
									"    if(pm.variables.get(\"programId\") === pm.collectionVariables.get(\"programID_Mandatory\")){\r",
									"        \r",
									"        console.log(pm.collectionVariables.get(\"programID_Mandatory\"))\r",
									"        pm.test(\"Validate stored programs data with response data\", function () {\r",
									"\r",
									"        pm.expect(pm.collectionVariables.get(\"programID_Mandatory\")).to.eql(response.programId);\r",
									"        pm.expect(pm.collectionVariables.get(\"programName_Mandatory\")).to.eql(response.programName);\r",
									"        pm.expect(pm.collectionVariables.get(\"programDesc_Mandatory\")).to.eql(response.programDescription);\r",
									"        pm.expect(pm.collectionVariables.get(\"programStatus_Mandatory\")).to.eql(response.programStatus);\r",
									"         });\r",
									"\r",
									"    } else if (pm.variables.get(\"programId\") === \"programID_All\") {\r",
									"\r",
									"        console.log(pm.collectionVariables.get(\"programID_All\"))\r",
									"         pm.test(\"Validate stored programs data with response data\", function () {\r",
									"\r",
									"            pm.expect(pm.collectionVariables.get(\"programID_All\")).to.eql(response.programId);\r",
									"            pm.expect(pm.collectionVariables.get(\"programName_All\")).to.eql(response.programName);\r",
									"            pm.expect(pm.collectionVariables.get(\"programDesc_All\")).to.eql(response.programDescription);\r",
									"            pm.expect(pm.collectionVariables.get(\"programStatus_All\")).to.eql(response.programStatus);\r",
									"         });\r",
									"    }\r",
									"\r",
									"\r",
									"}\r",
									"\r",
									"\r",
									"if(programList.length>0){\r",
									"    console.log(\"Inside loop for next repetition\")\r",
									"    pm.execution.setNextRequest(\"ProgrambyProgramId\")\r",
									"    //pm.execution.setNextRequest(pm.info.requestName)\r",
									"\r",
									"}\r",
									"else{\r",
									"    console.log(\"No more program id list\")\r",
									"    pm.collectionVariables.unset(\"programList\");\r",
									"    pm.collectionVariables.unset(\"programId\");\r",
									"    pm.execution.setNextRequest(null);\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "530b8c98-a627-48d0-8649-6f3163d936fb",
								"exec": [
									"//Get list of program created\r",
									"var programList = pm.collectionVariables.get(\"programList\")\r",
									"console.log(programList);\r",
									"\r",
									"if(!programList){\r",
									"  programList = [pm.collectionVariables.get(\"programID_Mandatory\"), pm.collectionVariables.get(\"programID_All\")];\r",
									"  console.log(\"programList = \"+programList);\r",
									"}\r",
									"\r",
									"var currentProgram = programList.shift();\r",
									"console.log('Current Program = '+currentProgram);\r",
									"\r",
									"pm.collectionVariables.set(\"programId\", currentProgram)\r",
									"\r",
									"//set the remainder names at data level\r",
									"pm.collectionVariables.set(\"programList\", programList); \r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "b0d52db6-a9b1-4aba-9dda-ea450407c6c9",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/programs/{{programId}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"programs",
								"{{programId}}"
							],
							"variable": [
								{
									"value": "16225",
									"key": "programId"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Negative - ProgrambyProgramId",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1fbc2e20-e724-4b6d-a436-fdadaa40a5b5",
								"exec": [
									"const expStatusCode = pm.collectionVariables.get(\"statusCode\");\r",
									"const expStatusLine = pm.collectionVariables.get(\"statusLine\");\r",
									"const expHttpMethod = pm.collectionVariables.get(\"httpMethod\");\r",
									"const scenarioName = pm.collectionVariables.get(\"scenarioName\");\r",
									"const pathParameter = pm.collectionVariables.get(\"pathParameter\");\r",
									"\r",
									"\r",
									"//NEGATIVE TEST VALIDATION\r",
									"//1. Status\r",
									"pm.test(`Status code is ${expStatusCode}`, function () {\r",
									"    pm.response.to.have.status(expStatusCode);\r",
									"});\r",
									"\r",
									"//2. Status Line\r",
									"pm.test(`Status message is ${expStatusLine}`, function () {\r",
									"    pm.response.to.have.status(expStatusLine);\r",
									"});\r",
									"\r",
									"//3. Scenario specific Tests\r",
									"if(scenarioName === \"Incorrect Http Method\") {\r",
									"    pm.test(`Validate ${scenarioName} JSON Response msg`, () => {\r",
									"        pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"        pm.expect(pm.response.json().message).to.eql(`Request method '${expHttpMethod}' is not supported`);\r",
									"        pm.expect(pm.response.json().success).to.eql(false);\r",
									"        \r",
									"    });\r",
									"}\r",
									"\r",
									"if(scenarioName.includes(\"Non-existing ID\")) {\r",
									"    pm.test(`Validate ${scenarioName} JSON Response msg`, () => {\r",
									"        pm.expect(pm.response.json().message).to.eql(`program with this: ${pathParameter}not found`);\r",
									"        pm.expect(pm.response.json().success).to.eql(false);\r",
									"        \r",
									"    });\r",
									"}\r",
									"\r",
									"if(scenarioName.includes(\"Incorrect Endpoint\")||scenarioName.includes(\"String\")||scenarioName.includes(\"Special Character\")||scenarioName.includes(\"Null Value\")) {\r",
									"    pm.test(`Validate ${scenarioName}  Response msg`, () => {\r",
									"        pm.expect(pm.response.headers.get('Content-Type')).to.includes('text/plain');\r",
									"        pm.expect(pm.response.text()).to.eql(`Invalid endpoint`);\r",
									"        \r",
									"    });\r",
									"}\r",
									"\r",
									"if(scenarioName === \"Incorrect BaseURL\") {\r",
									"    pm.test(`Validate ${scenarioName} Response msg`, () => {\r",
									"        pm.expect(pm.response.headers.get('Content-Type')).to.includes('text/html');\r",
									"        pm.expect(pm.response.text()).to.includes('<title>Heroku | Application Error</title>');\r",
									"        \r",
									"    });\r",
									"}\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "530b8c98-a627-48d0-8649-6f3163d936fb",
								"exec": [
									"console.log(\"Inside pre-requisite\")\r",
									"var scenarioName = pm.collectionVariables.get(\"scenarioName\");\r",
									"console.log(\"Scenario Name \"+scenarioName)\r",
									"pm.variables.set(\"BearerToken\",pm.collectionVariables.get(\"BearerToken\"));\r",
									"pm.variables.set(\"programId\", pm.collectionVariables.get(\"programID_ModuleIntegration\"))\r",
									"\r",
									"if(scenarioName === \"Incorrect Http Method\"){\r",
									"    pm.request.method = pm.collectionVariables.get(\"httpMethod\");;\r",
									"}\r",
									"\r",
									"if(scenarioName.includes(\"PathParameter\")){\r",
									"    pm.variables.set(\"programId\", pm.collectionVariables.get(\"pathParameter\"))\r",
									"}\r",
									"\r",
									"\r",
									"if(scenarioName === \"Incorrect BaseURL\"){\r",
									"    pm.variables.set(\"baseURL\", pm.collectionVariables.get('baseURL'))\r",
									"}\r",
									"\r",
									"if(scenarioName === \"No Auth\"){\r",
									"    pm.variables.set(\"BearerToken\",\"\")\r",
									"    pm.variables.set(\"baseURL\", pm.collectionVariables.get('baseURL'))\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "1745d6f2-0654-4c75-b037-fc8b8dcf3a07",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseURL}}/{{endPoint}}/{{programId}}"
					},
					"response": []
				},
				{
					"name": "UpdateProgrambyProgramId",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a6c80eb2-0c14-419b-8191-0cd10764e897",
								"exec": [
									"\r",
									"//POSITIVE TEST VALIDATION\r",
									"if(pm.response.to.have.status(200)){ // HAPPY PATH\r",
									"\r",
									"    //1. Status\r",
									"    pm.test(\"Status code is 200\", function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    });\r",
									"\r",
									"    //2. Status Line\r",
									"    pm.test(\"Status message is OK\", function () {\r",
									"        pm.response.to.have.status(\"OK\");\r",
									"    });\r",
									"\r",
									"    //3. Test for Content-Type header having a particular value\r",
									"    pm.test(\"Content-Type header is application/json\", () => {\r",
									"        pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"    });\r",
									"\r",
									"    //4. Schema Validation -- TO BE DONE\r",
									"\r",
									"    //5. Request VS Response Body Validation\r",
									"    pm.test(\"Program details in Request and Response matches\", function () {\r",
									"\r",
									"        // Get the raw request body and Parse it to JSON\r",
									"        const response = pm.response.json();\r",
									"\r",
									"        const rawRequestBody = pm.request.body.raw;\r",
									"        console.log(\"Raw Request Body:\", rawRequestBody);\r",
									"\r",
									"        \r",
									"        const requestBody = JSON.parse(rawRequestBody);\r",
									"\r",
									"        pm.expect(pm.collectionVariables.get(\"programID_Mandatory\")).to.eql(response.programId)\r",
									"        pm.expect(requestBody.programName).to.eql(response.programName);\r",
									"        pm.expect(requestBody.programDescription).to.eql(response.programDescription);\r",
									"        pm.expect(requestBody.programStatus).to.eql(response.programStatus);\r",
									"\r",
									"        \r",
									"\r",
									"    });\r",
									"\r",
									"}\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "b4044272-d1b8-4e79-a1c9-34f76d956f0b",
								"exec": [
									"function getRandomLetterString() {\r",
									"    const letters = 'abcdefghijklmnopqrstuvwxyz'; // Available letters\r",
									"    let randomString = '';\r",
									"    \r",
									"    // Loop 3 times to generate a 3-letter string\r",
									"    for (let i = 0; i < 3; i++) {\r",
									"        const randomIndex = Math.floor(Math.random() * letters.length); // Get a random index\r",
									"        randomString += letters[randomIndex]; // Add the random letter to the string\r",
									"    }\r",
									"\r",
									"    return randomString;\r",
									"}\r",
									"\r",
									"var programName_Mandatory_dataupdate = 'Mandatory-Update-'+ getRandomLetterString();\r",
									"pm.variables.set(\"programName_Mandatory_dataupdate\",programName_Mandatory_dataupdate)\r",
									"console.log('randome data ' + programName_Mandatory_dataupdate)"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "1b3ad132-8168-44f3-a44f-d3dd5fe1d494",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": " {\r\n \"programDescription\":\"Mandatory Update\",\r\n \"programName\":\"{{programName_Mandatory_dataupdate}}\", //also has to be unique\r\n \"programStatus\":\"Active\" //mandatory\r\n }\r\n\r\n//POSSIBLE DEFECT: ONLY ACCEPTING HYPHENATED PROGRAM NAME\r\n/*\r\nGetting error for program name without hyphen\r\n    PAYLOAD\r\n     {\r\n    \"programDescription\": \"Mandatory Update\",\r\n    \"programName\": \"Mandatory Update\", \r\n    \"programStatus\": \"Active\" \r\n    }\r\n\r\n    ERROR CODE = 401 UNAUTHORIZED --> SHOULD HAVE BEEN 400 BAD REQUEST INSTEAD OF 401\r\n    ERROR MSG\r\n    {\r\n        \"message\": \"programName Must contain only letters and sometimes hyphens\",\r\n        \"success\": false\r\n    }\r\n*/\r\n\r\n/*==================================================================*/\r\n/*\r\nDifferent msgs from contract doc\r\nStatusCode:\r\n 404:Error withmessageandbooleansuccessdetail–ForInvalidProgramId\r\n 400:BadRequestMissingfield\r\n\r\n response:[\r\n{\r\n    \"message\": \"Program Name TestChatBot already exists\",\r\n    \"success\": false\r\n}]*/",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/putprogram/:programId",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"putprogram",
								":programId"
							],
							"variable": [
								{
									"key": "programId",
									"value": "{{programID_Mandatory}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Negative - UpdateProgrambyProgramId",
					"id": "e4a15d08-3eb4-4d70-b47e-025b32cdc6b3",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": " {\r\n \"programDescription\":\"update\",\r\n \"programName\":\"yaoza\", //also has to be unique\r\n \"programStatus\": \"Active\" //mandatory\r\n }\r\n\r\n//All fields empty - \r\n\r\n//POSSIBLE DEFECT: ONLY ACCEPTING HYPHENATED PROGRAM NAME\r\n/*\r\nGetting error for program name without hyphen\r\n    PAYLOAD\r\n     {\r\n    \"programDescription\": \"Mandatory Update\",\r\n    \"programName\": \"Mandatory Update\", \r\n    \"programStatus\": \"Active\" \r\n    }\r\n\r\n    ERROR CODE = 401 UNAUTHORIZED --> SHOULD HAVE BEEN 400 BAD REQUEST INSTEAD OF 401\r\n    ERROR MSG\r\n    {\r\n        \"message\": \"programName Must contain only letters and sometimes hyphens\",\r\n        \"success\": false\r\n    }\r\n*/\r\n\r\n/*==================================================================*/\r\n/*\r\nDifferent msgs from contract doc\r\nStatusCode:\r\n 404:Error withmessageandbooleansuccessdetail–ForInvalidProgramId\r\n 400:BadRequestMissingfield\r\n\r\n response:[\r\n{\r\n    \"message\": \"Program Name TestChatBot already exists\",\r\n    \"success\": false\r\n}]*/",
							"options": {
								"raw": {
									"language": "text"
								}
							}
						},
						"url": {
							"raw": "https://lms-hackthon-feb25-803334c87fbe.herokuapp.com/lms/putprogram/:programId",
							"protocol": "https",
							"host": [
								"lms-hackthon-feb25-803334c87fbe",
								"herokuapp",
								"com"
							],
							"path": [
								"lms",
								"putprogram",
								":programId"
							],
							"variable": [
								{
									"id": "adf71176-e856-4562-9fa2-92c9ed880d5f",
									"key": "programId",
									"value": "17692"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "UpdateProgrambyProgramName",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "32d21eff-919c-4433-93ea-80ce325f8667",
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"//POSITIVE TEST VALIDATION\r",
									"if(pm.response.to.have.status(200)){ // HAPPY PATH\r",
									"\r",
									"    //1. Status\r",
									"    pm.test(\"Status code is 200\", function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    });\r",
									"\r",
									"    //2. Status Line\r",
									"    pm.test(\"Status message is OK\", function () {\r",
									"        pm.response.to.have.status(\"OK\");\r",
									"    });\r",
									"\r",
									"    //3. Test for Content-Type header having a particular value\r",
									"    pm.test(\"Content-Type header is application/json\", () => {\r",
									"        pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"    });\r",
									"\r",
									"    //4. Schema Validation -- TO BE DONE\r",
									"\r",
									"    //5. Request VS Response Body Validation\r",
									"    pm.test(\"Program details in Request and Response matches\", function () {\r",
									"\r",
									"        // Get the raw request body and Parse it to JSON\r",
									"        const rawRequestBody = pm.request.body.raw;\r",
									"        const requestBody = JSON.parse(rawRequestBody);\r",
									"\r",
									"        pm.expect(pm.collectionVariables.get(\"programID_All\")).to.eql(response.programId)\r",
									"        pm.expect(requestBody.programName).to.eql(response.programName);\r",
									"        pm.expect(requestBody.programDescription).to.eql(response.programDescription);\r",
									"        pm.expect(requestBody.programStatus).to.eql(response.programStatus);\r",
									"\r",
									"    });\r",
									"\r",
									"}\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "627b66a0-2fc2-44f9-9106-9676d8b12d1d",
								"exec": [
									"function getRandomLetterString() {\r",
									"    const letters = 'abcdefghijklmnopqrstuvwxyz'; // Available letters\r",
									"    let randomString = '';\r",
									"    \r",
									"    // Loop 3 times to generate a 3-letter string\r",
									"    for (let i = 0; i < 3; i++) {\r",
									"        const randomIndex = Math.floor(Math.random() * letters.length); // Get a random index\r",
									"        randomString += letters[randomIndex]; // Add the random letter to the string\r",
									"    }\r",
									"\r",
									"    return randomString;\r",
									"}\r",
									"\r",
									"var programName_Mandatory_dataupdate = 'All-Update-'+ getRandomLetterString();\r",
									"pm.variables.set(\"programName_Mandatory_dataupdate\",programName_Mandatory_dataupdate)\r",
									"console.log('randome data ' + programName_Mandatory_dataupdate)"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "943fa7fa-6472-4e29-8593-c58304c8c1ab",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n \"programDescription\":\"Mandatory Update\",\r\n \"programName\":\"{{programName_Mandatory_dataupdate}}\", //also has to be unique\r\n \"programStatus\":\"Active\" //mandatory\r\n }\r\n\r\n//POSSIBLE DEFECT\r\n/*\r\nGetting error for program name without hyphen\r\n    PAYLOAD\r\n     {\r\n    \"programDescription\": \"All Update\",\r\n    \"programName\": \"All Update\", //Mandatory\r\n    \"programStatus\": \"Active\" //Mandatory\r\n    }\r\n\r\n    ERROR CODE = 400\r\n    ERROR MSG\r\n    {\r\n        \"message\": \"programName Must contain only letters and sometimes hyphens\",\r\n        \"success\": false\r\n    }\r\n*/\r\n\r\n /*\r\n StatusCode:\r\n 200ok\r\n 404:Error withmessageandbooleansuccessdetail–ForInvalidProgramId\r\n 400:BadRequestMissingfield\r\n */",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/program/:programName",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"program",
								":programName"
							],
							"variable": [
								{
									"key": "programName",
									"value": "{{programName_All}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Negative - UpdateProgrambyProgramName",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "32d21eff-919c-4433-93ea-80ce325f8667",
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "627b66a0-2fc2-44f9-9106-9676d8b12d1d",
								"exec": [
									"function getRandomLetterString() {\r",
									"    const letters = 'abcdefghijklmnopqrstuvwxyz'; // Available letters\r",
									"    let randomString = '';\r",
									"    \r",
									"    // Loop 3 times to generate a 3-letter string\r",
									"    for (let i = 0; i < 3; i++) {\r",
									"        const randomIndex = Math.floor(Math.random() * letters.length); // Get a random index\r",
									"        randomString += letters[randomIndex]; // Add the random letter to the string\r",
									"    }\r",
									"\r",
									"    return randomString;\r",
									"}\r",
									"\r",
									"var programName_Mandatory_dataupdate = 'All-Update-'+ getRandomLetterString();\r",
									"pm.variables.set(\"programName_Mandatory_dataupdate\",programName_Mandatory_dataupdate)\r",
									"console.log('randome data ' + programName_Mandatory_dataupdate)"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "0f01ea7f-1704-419a-b837-f53b6ad796c7",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n \"programDescription\":\"jljklj\",\r\n \"programName\":\"Prog-Name-Updated\", //also has to be unique\r\n \"programStatus\":\"Active\" //mandatory\r\n }\r\n\r\n//POSSIBLE DEFECT\r\n/*\r\nGetting error for program name without hyphen\r\n    PAYLOAD\r\n     {\r\n    \"programDescription\": \"All Update\",\r\n    \"programName\": \"All Update\", //Mandatory\r\n    \"programStatus\": \"Active\" //Mandatory\r\n    }\r\n\r\n    ERROR CODE = 400\r\n    ERROR MSG\r\n    {\r\n        \"message\": \"programName Must contain only letters and sometimes hyphens\",\r\n        \"success\": false\r\n    }\r\n*/\r\n\r\n /*\r\n StatusCode:\r\n 200ok\r\n 404:Error withmessageandbooleansuccessdetail–ForInvalidProgramId\r\n 400:BadRequestMissingfield\r\n */",
							"options": {
								"raw": {
									"language": "text"
								}
							}
						},
						"url": {
							"raw": "https://lms-hackthon-feb25-803334c87fbe.herokuapp.com/lms/program/:programName",
							"protocol": "https",
							"host": [
								"lms-hackthon-feb25-803334c87fbe",
								"herokuapp",
								"com"
							],
							"path": [
								"lms",
								"program",
								":programName"
							],
							"variable": [
								{
									"id": "d644e83a-99e2-4908-adab-5e4ceb637b8c",
									"key": "programName",
									"value": "null"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "ProgramByProgramID",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d2776f72-6515-460c-9854-74e5f1edc778",
								"exec": [
									"// const responseText = pm.response.text();\r",
									"// console.log(responseText)\r",
									"\r",
									"//POSITIVE TEST VALIDATION\r",
									"//if(pm.response.to.have.status(200)){ // HAPPY PATH\r",
									"\r",
									"    //1. Status\r",
									"    pm.test(\"Status code is 200\", function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    });\r",
									"\r",
									"    //2. Status Line\r",
									"    pm.test(\"Status message is OK\", function () {\r",
									"        pm.response.to.have.status(\"OK\");\r",
									"    });\r",
									"\r",
									"    //3. Test for Content-Type header having a particular value\r",
									"    pm.test(\"Content-Type header is application/json\", () => {\r",
									"        pm.expect(pm.response.headers.get('Content-Type')).to.include('text/plain');\r",
									"    });\r",
									"\r",
									"    //4.Request VS Response Body Validation\r",
									"    pm.test(\"Validate Deletion Message\", function () {\r",
									"\r",
									"        //Message: Program Id-17037 is deleted Successfully!\r",
									"        \r",
									"        pm.expect(pm.response.text()).to.eql('Message: Program Id-'+pm.collectionVariables.get(\"programID_Mandatory\")+' is deleted Successfully!')\r",
									"        /*\r",
									"        pm.expect(responseText).to.eql(`Message: Program Id-${programID_Mandatory} is deleted Successfully!`)*/\r",
									"\r",
									"    });\r",
									"\r",
									"    //5. Validate Delete Program status has changed to Inactive\r",
									"        // Programmatically make a GET request using the ProgramID\r",
									"        pm.sendRequest({\r",
									"            url:  pm.environment.get(\"baseURL\") + `/programs/` + pm.collectionVariables.get(\"programID_Mandatory\") , \r",
									"            method: 'GET',\r",
									"            header: {\r",
									"                'Authorization': 'Bearer ' + pm.collectionVariables.get(\"BearerToken\") \r",
									"            }\r",
									"        }, function (err, res) {\r",
									"            if (err) {\r",
									"                pm.test(\"GET ProgramByID request failed after Program Deletion\", function() {\r",
									"                  console.log(err);\r",
									"                return;\r",
									"                });\r",
									"            } else {\r",
									"                pm.test(\"GET ProgramByID request Successful after Program Deletion\", function() {\r",
									"\r",
									"                    if(res.json().programId === pm.collectionVariables.get(\"programID_Mandatory\")){\r",
									"                        pm.expect(res.json().programStatus).to.eql(\"Inactive\")\r",
									"\r",
									"                    }    \r",
									"                });\r",
									"\r",
									"                // remove the program info at collection level\r",
									"                pm.collectionVariables.unset(\"programID_Mandatory\");\r",
									"                pm.collectionVariables.unset(\"programName_Mandatory\")\r",
									"                pm.collectionVariables.unset(\"programDesc_Mandatory\")\r",
									"                pm.collectionVariables.unset(\"programStatus_Mandatory\")\r",
									"            }\r",
									"    });\r",
									"//}    \r",
									"\r",
									"\r",
									"\r",
									"/*\r",
									"StatusCode:\r",
									" 404:ErrorwithMessage(Eg:\"message\":\"no recordfoundwithprogramId{programId}\",\r",
									" \"success\": false)\r",
									"  */"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "277ec926-5c15-453a-b5e9-29b51d32f850",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/deletebyprogid/:programId",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"deletebyprogid",
								":programId"
							],
							"variable": [
								{
									"key": "programId",
									"value": "{{programID_Mandatory}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Negative - DelProgramByProgramID",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d2776f72-6515-460c-9854-74e5f1edc778",
								"exec": [
									"const expStatusCode = pm.collectionVariables.get(\"statusCode\");\r",
									"const expStatusLine = pm.collectionVariables.get(\"statusLine\");\r",
									"const expHttpMethod = pm.collectionVariables.get(\"httpMethod\");\r",
									"const scenarioName = pm.collectionVariables.get(\"scenarioName\");\r",
									"const pathParameter = pm.collectionVariables.get(\"pathParameter\");\r",
									"\r",
									"\r",
									"//NEGATIVE TEST VALIDATION\r",
									"//1. Status\r",
									"pm.test(`Status code is ${expStatusCode}`, function () {\r",
									"    pm.response.to.have.status(expStatusCode);\r",
									"});\r",
									"\r",
									"//2. Status Line\r",
									"pm.test(`Status message is ${expStatusLine}`, function () {\r",
									"    pm.response.to.have.status(expStatusLine);\r",
									"});\r",
									"\r",
									"//3. Scenario specific Tests\r",
									"if(scenarioName === \"Incorrect Http Method\") {\r",
									"    pm.test(`Validate ${scenarioName} JSON Response msg`, () => {\r",
									"        pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"        pm.expect(pm.response.json().message).to.eql(`Request method '${expHttpMethod}' is not supported`);\r",
									"        pm.expect(pm.response.json().success).to.eql(false);\r",
									"        \r",
									"    });\r",
									"}\r",
									"\r",
									"if(scenarioName.includes(\"Non-existing ID\")) {\r",
									"    pm.test(`Validate ${scenarioName} Response msg`, () => {\r",
									"        pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"        pm.expect(pm.response.json().message).to.eql(`No active program with the program Id${pathParameter}`);\r",
									"        pm.expect(pm.response.json().success).to.eql(false);\r",
									"        \r",
									"    });\r",
									"}\r",
									"\r",
									"if(scenarioName.includes(\"Incorrect Endpoint\")||scenarioName.includes(\"String\")||scenarioName.includes(\"Special Character\")||scenarioName.includes(\"Null Value\")) {\r",
									"    pm.test(`Validate ${scenarioName}  Response msg`, () => {\r",
									"        pm.expect(pm.response.headers.get('Content-Type')).to.includes('text/plain');\r",
									"        pm.expect(pm.response.text()).to.eql(`Invalid endpoint`);\r",
									"        \r",
									"    });\r",
									"}\r",
									"\r",
									"if(scenarioName === \"Incorrect BaseURL\") {\r",
									"    pm.test(`Validate ${scenarioName} Response msg`, () => {\r",
									"        pm.expect(pm.response.headers.get('Content-Type')).to.includes('text/html');\r",
									"        pm.expect(pm.response.text()).to.includes('<title>Heroku | Application Error</title>');\r",
									"        \r",
									"    });\r",
									"}\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "6ace579e-4702-4892-a56a-8fc19157904a",
								"exec": [
									"console.log(\"Inside pre-requisite\")\r",
									"var scenarioName = pm.collectionVariables.get(\"scenarioName\");\r",
									"console.log(\"Scenario Name \"+scenarioName)\r",
									"pm.variables.set(\"BearerToken\",pm.collectionVariables.get(\"BearerToken\"));\r",
									"pm.variables.set(\"programId\", pm.collectionVariables.get(\"programID_ModuleIntegration\"))\r",
									"\r",
									"if(scenarioName === \"Incorrect Http Method\"){\r",
									"    pm.request.method = pm.collectionVariables.get(\"httpMethod\");;\r",
									"}\r",
									"\r",
									"if(scenarioName.includes(\"PathParameter\")){\r",
									"    pm.variables.set(\"programId\", pm.collectionVariables.get(\"pathParameter\"))\r",
									"}\r",
									"\r",
									"\r",
									"if(scenarioName === \"Incorrect BaseURL\"){\r",
									"    pm.variables.set(\"baseURL\", pm.collectionVariables.get('baseURL'))\r",
									"}\r",
									"\r",
									"if(scenarioName === \"No Auth\"){\r",
									"    pm.variables.set(\"BearerToken\",\"\")\r",
									"    pm.variables.set(\"baseURL\", pm.collectionVariables.get('baseURL'))\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "98fbc7dd-0e33-4bc8-8268-e08545d56edc",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [],
						"url": "{{baseURL}}/{{endPoint}}/{{programId}}"
					},
					"response": []
				},
				{
					"name": "ProgramByProgramName",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d2776f72-6515-460c-9854-74e5f1edc778",
								"exec": [
									"//POSITIVE TEST VALIDATION\r",
									"//if (pm.response.to.have.status(200)) { // HAPPY PATH\r",
									"\r",
									"    //1. Status\r",
									"    pm.test(\"Status code is 200\", function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    });\r",
									"\r",
									"    //2. Status Line\r",
									"    pm.test(\"Status message is OK\", function () {\r",
									"        pm.response.to.have.status(\"OK\");\r",
									"    });\r",
									"\r",
									"    //3. Test for Content-Type header having a particular value\r",
									"    pm.test(\"Content-Type header is application/json\", () => {\r",
									"        pm.expect(pm.response.headers.get('Content-Type')).to.include('text/plain');\r",
									"    });\r",
									"\r",
									"    //4.Request VS Response Body Validation -- DEFECT: ACTUAL DEL MSG HAS A SPACE BETWEEN \"Name\" AND \"-\"\r",
									"    pm.test(\"Validate Deletion Message\", function () {\r",
									"        pm.expect(pm.response.text()).to.eql('Message: Program Name-'+pm.collectionVariables.get(\"programName_All\")+' is deleted Successfully!')\r",
									"    });\r",
									"\r",
									"    //5. Validate Deleted Program status has changed to Inactive\r",
									"    // Programmatically make a GET request using the ProgramID\r",
									"    pm.sendRequest({\r",
									"        url: pm.environment.get(\"baseURL\") + `/programs/` + pm.collectionVariables.get(\"programID_All\"),\r",
									"        method: 'GET',\r",
									"        header: {\r",
									"            'Authorization': 'Bearer ' + pm.collectionVariables.get(\"BearerToken\")\r",
									"        }\r",
									"    }, function (err, res) {\r",
									"        if (err) {\r",
									"            pm.test(\"GET ProgramByID request failed after Program Deletion\", function () {\r",
									"                console.log(err);\r",
									"                return;\r",
									"            });\r",
									"        } else {\r",
									"            pm.test(\"GET ProgramByID request Successful after Program Deletion\", function () {\r",
									"\r",
									"                if (res.json().programId === pm.collectionVariables.get(\"programID_All\")) {\r",
									"                    pm.expect(res.json().programStatus).to.eql(\"Inactive\")\r",
									"\r",
									"                }\r",
									"            });\r",
									"\r",
									"            // remove the program info at collection level\r",
									"            pm.collectionVariables.unset(\"programID_All\");\r",
									"            pm.collectionVariables.unset(\"programName_All\")\r",
									"            pm.collectionVariables.unset(\"programDesc_All\")\r",
									"            pm.collectionVariables.unset(\"programStatus_All\") \r",
									"            pm.collectionVariables.unset(\"ProgramCount_BeforeAdd\")\r",
									"            \r",
									"        }\r",
									"    });\r",
									"//}\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"//DEFECT 1 - 404 MSG IS INCORRECT\r",
									"/*\r",
									" 404:ErrorwithMessage(Eg:\"message\":\"no record found withprogramName\", \"success\":\r",
									" false)\r",
									"  */\r",
									"\r",
									"/*\r",
									"{ 404 Not Found\r",
									"  \"message\": \"Active Program with the program name SeleniumPython-Teneqn Not found\",\r",
									"  \"success\": false\r",
									"}\r",
									" */\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "63381237-d78a-4051-9f75-717e1e23c049",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/deletebyprogname/:programName",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"deletebyprogname",
								":programName"
							],
							"variable": [
								{
									"key": "programName",
									"value": "{{programName_All}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Negative - DelProgramByProgramName",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d2776f72-6515-460c-9854-74e5f1edc778",
								"exec": [
									"const expStatusCode = pm.collectionVariables.get(\"statusCode\");\r",
									"const expStatusLine = pm.collectionVariables.get(\"statusLine\");\r",
									"const expHttpMethod = pm.collectionVariables.get(\"httpMethod\");\r",
									"const scenarioName = pm.collectionVariables.get(\"scenarioName\");\r",
									"const pathParameter = pm.collectionVariables.get(\"pathParameter\");\r",
									"\r",
									"\r",
									"//NEGATIVE TEST VALIDATION\r",
									"//1. Status\r",
									"pm.test(`Status code is ${expStatusCode}`, function () {\r",
									"    pm.response.to.have.status(expStatusCode);\r",
									"});\r",
									"\r",
									"//2. Status Line\r",
									"pm.test(`Status message is ${expStatusLine}`, function () {\r",
									"    pm.response.to.have.status(expStatusLine);\r",
									"});\r",
									"\r",
									"//3. Scenario specific Tests\r",
									"if(scenarioName === \"Incorrect Http Method\") {\r",
									"    pm.test(`Validate ${scenarioName} Response msg`, () => {\r",
									"        pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"        pm.expect(pm.response.json().message).to.eql(`Request method '${expHttpMethod}' is not supported`);\r",
									"        pm.expect(pm.response.json().success).to.eql(false);\r",
									"        \r",
									"    });\r",
									"}\r",
									"\r",
									"if(scenarioName.includes(\"Non-existing Program Name\")||scenarioName.includes(\"Number\")||scenarioName.includes(\"Special Character\")||scenarioName.includes(\"Null Value\")) {\r",
									"    pm.test(`Validate ${scenarioName} Response msg`, () => {\r",
									"        pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"        pm.expect(pm.response.json().message).to.eql(`Active Program with the program name ${pathParameter} Not found`); //work on this\r",
									"        pm.expect(pm.response.json().success).to.eql(false);\r",
									"        \r",
									"    });\r",
									"}\r",
									"\r",
									"if(scenarioName.includes(\"Incorrect Endpoint\")) {\r",
									"    pm.test(`Validate ${scenarioName}  Response msg`, () => {\r",
									"        pm.expect(pm.response.headers.get('Content-Type')).to.includes('text/plain');\r",
									"        pm.expect(pm.response.text()).to.eql(`Invalid endpoint`);\r",
									"        \r",
									"    });\r",
									"}\r",
									"\r",
									"if(scenarioName === \"Incorrect BaseURL\") {\r",
									"    pm.test(`Validate ${scenarioName} Response msg`, () => {\r",
									"        pm.expect(pm.response.headers.get('Content-Type')).to.includes('text/html');\r",
									"        pm.expect(pm.response.text()).to.includes('<title>Heroku | Application Error</title>');\r",
									"        \r",
									"    });\r",
									"}\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "a57d31a9-20fe-4ece-b8a0-2d987f097c6a",
								"exec": [
									"console.log(\"Inside pre-requisite\")\r",
									"var scenarioName = pm.collectionVariables.get(\"scenarioName\");\r",
									"console.log(\"Scenario Name \"+scenarioName)\r",
									"pm.variables.set(\"BearerToken\",pm.collectionVariables.get(\"BearerToken\"));\r",
									"pm.variables.set(\"programName\", pm.collectionVariables.get(\"programName_ModuleIntegration\"))\r",
									"\r",
									"if(scenarioName === \"Incorrect Http Method\"){\r",
									"    pm.request.method = pm.collectionVariables.get(\"httpMethod\");;\r",
									"}\r",
									"\r",
									"if(scenarioName.includes(\"PathParameter\")){\r",
									"    pm.variables.set(\"programName\", pm.collectionVariables.get(\"pathParameter\"))\r",
									"}\r",
									"\r",
									"\r",
									"if(scenarioName === \"Incorrect BaseURL\"){\r",
									"    pm.variables.set(\"baseURL\", pm.collectionVariables.get('baseURL'))\r",
									"}\r",
									"\r",
									"if(scenarioName === \"No Auth\"){\r",
									"    pm.variables.set(\"BearerToken\",\"\")\r",
									"    pm.variables.set(\"baseURL\", pm.collectionVariables.get('baseURL'))\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "d7123df4-d125-4c8b-8605-b7973a0b090c",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [],
						"url": "{{baseURL}}/{{endPoint}}/{{programName}}"
					},
					"response": []
				}
			],
			"id": "cebf6f34-f2c4-4439-9067-fd483d168029"
		},
		{
			"name": "Batch",
			"item": [
				{
					"name": "AllBatches",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3148edf8-6d68-4c59-abcc-1fa7f149238a",
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"//POSITIVE TEST VALIDATION\r",
									"//1. Status\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//2. Status Line\r",
									"pm.test(\"Status message is OK\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"//3. Test for Content-Type header having a particular value\r",
									"pm.test(\"Content-Type header is application/json\", () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"});\r",
									"\r",
									"//4. Schema Validation -- TO BE DONE\r",
									"const schema = {}\r",
									"\r",
									"//SET TOTAL COUNT\r",
									"console.log(response.length)\r",
									"pm.collectionVariables.set(\"BatchCount_BeforeAdd\",response.length)\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "f9251d9f-7678-4ed8-ac5f-63bee5a75e67",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseURL}}/batches"
					},
					"response": []
				},
				{
					"name": "CreateNewBatch-Mandatory",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "54a6a48b-7699-4b70-9898-6ec3b615367e",
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"//POSITIVE TEST VALIDATION\r",
									"if(pm.response.to.have.status(201)){ // HAPPY PATH\r",
									"\r",
									"    //1. Status\r",
									"    pm.test(\"Status code is 201\", function () {\r",
									"        pm.response.to.have.status(201);\r",
									"    });\r",
									"\r",
									"    //2. Status Line\r",
									"    pm.test(\"Status message is Created\", function () {\r",
									"        pm.response.to.have.status(\"Created\");\r",
									"    });\r",
									"\r",
									"    //3. Test for Content-Type header having a particular value\r",
									"    pm.test(\"Content-Type header is application/json\", () => {\r",
									"        pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"    });\r",
									"\r",
									"    //4. Schema Validation -- TO BE DONE\r",
									"\r",
									"    //5. Request VS Response Body Validation\r",
									"    pm.test(\"Program details in Request and Response matches\", function () {\r",
									"\r",
									"        // Get the raw request body and Parse it to JSON\r",
									"        const rawRequestBody = pm.request.body.raw;\r",
									"        const requestBody = JSON.parse(rawRequestBody);\r",
									"\r",
									"        pm.expect(response).to.have.property(\"batchId\")\r",
									"        pm.expect(requestBody.batchDescription).to.eql(response.batchDescription);\r",
									"        pm.expect(requestBody.batchName).to.eql(response.batchName);        \r",
									"        pm.expect(requestBody.batchNoOfClasses).to.eql(response.batchNoOfClasses);\r",
									"        pm.expect(requestBody.batchStatus).to.eql(response.batchStatus);\r",
									"        pm.expect(requestBody.programId).to.eql(response.programId);\r",
									"        pm.expect(pm.collectionVariables.get(\"programName_ModuleIntegration\")).to.eql(response.programName);\r",
									"        \r",
									"\r",
									"    });\r",
									"\r",
									"    //GET ALL PROGRAMS COUNT AFTER PROGRAM CREATION\r",
									"    pm.test(\"Check Total Batch Count increased by 1\", function () {\r",
									"        \r",
									"        // Perform GET request programmatically\r",
									"        pm.sendRequest({\r",
									"            url: pm.environment.get(\"baseURL\")+'/batches',  \r",
									"            method: 'GET',\r",
									"            header: {\r",
									"               'Authorization': 'Bearer ' + pm.collectionVariables.get(\"BearerToken\") \r",
									"            }\r",
									"        }, function (err, res) {\r",
									"            if (err) {\r",
									"                console.log(err);\r",
									"                return;\r",
									"            } else {\r",
									"               \r",
									"                const batches = res.json(); \r",
									"                const count = batches.length; \r",
									"\r",
									"                    pm.expect(batches).to.include(response.batchName);\r",
									"                    pm.expect(count).to.equal((pm.collectionVariables.get(\"BatchCount_BeforeAdd\"))+1); \r",
									"                \r",
									"            }\r",
									"        });\r",
									"    });\r",
									"\r",
									"}\r",
									"\r",
									"\r",
									"//SET VALUE AT RUN TIME (LATER CHECK IF THIS COULD BE TRANSFERRED AS PROGRAM OBJECT!!!!)\r",
									"pm.collectionVariables.set(\"batchID_Mandatory\", response.batchId)\r",
									"pm.collectionVariables.set(\"batchName_Mandatory\", response.batchName)\r",
									"pm.collectionVariables.set(\"batchNoOfClasses_Mandatory\", response.batchNoOfClasses)\r",
									"pm.collectionVariables.set(\"batchDesc_Mandatory\", response.batchDescription)\r",
									"pm.collectionVariables.set(\"batchStatus_Mandatory\", response.batchStatus)\r",
									"\r",
									"\r",
									"//NEGATIVE TEST VALIDATION\r",
									"/**\r",
									" * status code = 400\r",
									"{   \r",
									"    \"message\": \"programName Must contain only letters and sometimes hyphens\",\r",
									"    \"success\": false\r",
									"}\r",
									" */\r",
									"\r",
									"\r",
									"\r",
									"/*\r",
									"Mandatory: BatchName,programID,Batchstatus,NoofClasses\r",
									"\r",
									"//Response\r",
									"{\r",
									" \"batchDescription\":\"string\",\r",
									" \"batchId\":0,\r",
									" \"batchName\":\"string\",\r",
									" \"batchNoOfClasses\":0,\r",
									" \"batchStatus\":\"string\",\r",
									" \"programId\":0,\r",
									" \"programName\":\"string\"\r",
									" }\r",
									" */"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "26e9f29d-e9ec-4cda-8a10-aadfc01f9210",
								"exec": [
									"const programIdData = pm.collectionVariables.get(\"programID_ModuleIntegration\")\r",
									"pm.variables.set(\"programIdData\", programIdData)\r",
									"\r",
									"function getRandomLetterString() {\r",
									"    const letters = 'abcdefghijklmnopqrstuvwxyz';\r",
									"    let randomString = '';\r",
									"    \r",
									"    // Loop 3 times to generate a 3-letter string\r",
									"    for (let i = 0; i < 3; i++) {\r",
									"        const randomIndex = Math.floor(Math.random() * letters.length); \r",
									"        randomString += letters[randomIndex]; \r",
									"    }\r",
									"\r",
									"    return randomString;\r",
									"}\r",
									"\r",
									"//var batchName_Mandatory_data = 'Batch Mandatory'+ getRandomLetterString(); //Defect\r",
									"var batchName_Mandatory_data = 'Batch-Mandatory'+ getRandomLetterString(); //worked\r",
									"\r",
									"pm.variables.set(\"batchName_Mandatory_data\",batchName_Mandatory_data)\r",
									"\r",
									"/*\r",
									"{\r",
									"    \"message\": \"batchName Please provide a valid name and must begin with letter and can have letters,numbers and sometimes hyphens\",\r",
									"    \"success\": false\r",
									"}\r",
									" */"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "80762521-dca7-4834-a140-ee9acf10e63c",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n \"batchDescription\":\"\",\r\n \"batchName\":\"{{batchName_Mandatory_data}}\", //Unique & Mandatory\r\n \"batchNoOfClasses\":8,  //Mandatory\r\n \"batchStatus\":\"Active\",  //Mandatory\r\n \"programId\":{{programIdData}}  //Mandatory\r\n }\r\n\r\n\r\n\r\n /*\r\n {\r\n    \"message\": \"batchName Please provide a valid name and must begin with letter and can have letters,numbers and sometimes hyphens\",\r\n    \"success\": false\r\n}\r\n */",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}/batches"
					},
					"response": []
				},
				{
					"name": "CreateNewBatch-All",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "54a6a48b-7699-4b70-9898-6ec3b615367e",
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"//POSITIVE TEST VALIDATION\r",
									"if (pm.response.to.have.status(201)) { // HAPPY PATH\r",
									"\r",
									"    //1. Status\r",
									"    pm.test(\"Status code is 201\", function () {\r",
									"        pm.response.to.have.status(201);\r",
									"    });\r",
									"\r",
									"    //2. Status Line\r",
									"    pm.test(\"Status message is Created\", function () {\r",
									"        pm.response.to.have.status(\"Created\");\r",
									"    });\r",
									"\r",
									"    //3. Test for Content-Type header having a particular value\r",
									"    pm.test(\"Content-Type header is application/json\", () => {\r",
									"        pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"    });\r",
									"\r",
									"    //4. Schema Validation -- TO BE DONE\r",
									"\r",
									"    //5. Request VS Response Body Validation\r",
									"    pm.test(\"Program details in Request and Response matches\", function () {\r",
									"\r",
									"        // Get the raw request body and Parse it to JSON\r",
									"        const rawRequestBody = pm.request.body.raw;\r",
									"        const requestBody = JSON.parse(rawRequestBody);\r",
									"\r",
									"        pm.expect(response).to.have.property(\"batchId\")\r",
									"        pm.expect(requestBody.batchDescription).to.eql(response.batchDescription);\r",
									"        pm.expect(requestBody.batchName).to.eql(response.batchName);\r",
									"        pm.expect(requestBody.batchNoOfClasses).to.eql(response.batchNoOfClasses);\r",
									"        pm.expect(requestBody.batchStatus).to.eql(response.batchStatus);\r",
									"        pm.expect(requestBody.programId).to.eql(response.programId);\r",
									"        pm.expect(pm.collectionVariables.get(\"programName_ModuleIntegration\")).to.eql(response.programName);\r",
									"\r",
									"\r",
									"    });\r",
									"\r",
									"    //GET ALL PROGRAMS COUNT AFTER PROGRAM CREATION\r",
									"    pm.test(\"Check Total Batch Count increased by 1\", function () {\r",
									"\r",
									"        // Perform GET request programmatically\r",
									"        pm.sendRequest({\r",
									"            url: pm.environment.get(\"baseURL\") + '/batches',\r",
									"            method: 'GET',\r",
									"            header: {\r",
									"                'Authorization': 'Bearer ' + pm.collectionVariables.get(\"BearerToken\")\r",
									"            }\r",
									"        }, function (err, res) {\r",
									"            if (err) {\r",
									"                console.log(err);\r",
									"                return;\r",
									"            } else {\r",
									"\r",
									"                const batches = res.json();\r",
									"                const count = batches.length;\r",
									"\r",
									"                pm.expect(batches).to.include(response.batchName);\r",
									"                pm.expect(count).to.equal((pm.collectionVariables.get(\"BatchCount_BeforeAdd\")) + 2);\r",
									"                pm.collectionVariables.unset(\"BatchCount_BeforeAdd\")\r",
									"            }\r",
									"        });\r",
									"    });\r",
									"\r",
									"}\r",
									"\r",
									"\r",
									"//SET VALUE AT RUN TIME (LATER CHECK IF THIS COULD BE TRANSFERRED AS PROGRAM OBJECT!!!!)\r",
									"pm.collectionVariables.set(\"batchID_ModuleIntegration\", response.batchId)\r",
									"pm.collectionVariables.set(\"batchName_ModuleIntegration\", response.batchName)\r",
									"pm.collectionVariables.set(\"batchNoOfClasses_ModuleIntegration\", response.batchNoOfClasses)\r",
									"pm.collectionVariables.set(\"batchDesc_ModuleIntegration\", response.batchDescription)\r",
									"pm.collectionVariables.set(\"batchStatus_ModuleIntegration\", response.batchStatus)\r",
									"\r",
									"\r",
									"//NEGATIVE TEST VALIDATION\r",
									"/**\r",
									" * status code = 400\r",
									"{   \r",
									"    \"message\": \"programName Must contain only letters and sometimes hyphens\",\r",
									"    \"success\": false\r",
									"}\r",
									" */\r",
									"\r",
									"\r",
									"\r",
									"/*\r",
									"Mandatory: BatchName,programID,Batchstatus,NoofClasses\r",
									"\r",
									"//Response\r",
									"{\r",
									" \"batchDescription\":\"string\",\r",
									" \"batchId\":0,\r",
									" \"batchName\":\"string\",\r",
									" \"batchNoOfClasses\":0,\r",
									" \"batchStatus\":\"string\",\r",
									" \"programId\":0,\r",
									" \"programName\":\"string\"\r",
									" }\r",
									" */"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "26e9f29d-e9ec-4cda-8a10-aadfc01f9210",
								"exec": [
									"const programIdData = pm.collectionVariables.get(\"programID_ModuleIntegration\")\r",
									"pm.variables.set(\"programIdData\", programIdData)\r",
									"\r",
									"function getRandomLetterString() {\r",
									"    const letters = 'abcdefghijklmnopqrstuvwxyz';\r",
									"    let randomString = '';\r",
									"    \r",
									"    // Loop 3 times to generate a 3-letter string\r",
									"    for (let i = 0; i < 3; i++) {\r",
									"        const randomIndex = Math.floor(Math.random() * letters.length); \r",
									"        randomString += letters[randomIndex]; \r",
									"    }\r",
									"\r",
									"    return randomString;\r",
									"}\r",
									"\r",
									"//var batchName_Mandatory_data = 'Batch Mandatory'+ getRandomLetterString(); //Defect\r",
									"var batchName_All_data = 'Batch-All'+ getRandomLetterString(); //worked\r",
									"var batchName_All_data = 'Batch-All'+ getRandomLetterString() + ' Number3'; //Defect\r",
									"var batchName_All_data = 'Batch-All'+ getRandomLetterString() + '-Number3'; //worked\r",
									"\r",
									"\r",
									"pm.variables.set(\"batchName_All_data\",batchName_All_data)\r",
									"\r",
									"/*\r",
									"{\r",
									"    \"message\": \"batchName Please provide a valid name and must begin with letter and can have letters,numbers and sometimes hyphens\",\r",
									"    \"success\": false\r",
									"}\r",
									" */"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "5c21889d-7982-4a1a-ab1b-c45d99295f66",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n \"batchDescription\":\"Ao Ao Description\",\r\n \"batchName\":\"{{batchName_All_data}}\", //Unique & Mandatory\r\n \"batchNoOfClasses\":8,  //Mandatory\r\n \"batchStatus\":\"Active\",  //Mandatory\r\n \"programId\":{{programIdData}}  //Mandatory\r\n }\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}/batches"
					},
					"response": []
				},
				{
					"name": "BatchbyBatchId",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fa10bada-951f-415c-b7a6-f665a53166bd",
								"exec": [
									"const response = pm.response.json();\r",
									"var batchList = pm.collectionVariables.get(\"batchList\");\r",
									"\r",
									"//Happy Path - Positive\r",
									"if(pm.response.to.have.status(200)){\r",
									"\r",
									"    //1. Status Code\r",
									"    pm.test(\"Status code is 200\", function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    });\r",
									"\r",
									"    //2. Status Line\r",
									"    pm.test(\"Status message is OK\", function () {\r",
									"        pm.response.to.have.status(\"OK\");\r",
									"    });\r",
									"\r",
									"    //3. Test for Content-Type header having a particular value\r",
									"    pm.test(\"Content-Type header is application/json\", () => {\r",
									"        pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"    });\r",
									"\r",
									"    //4. Schema Validation -- TO BE DONE -- DEFECT -- RESPONSE SHOULD BE IN ARRAY AND NOT AS PLAIN SINGLE OBJECT\r",
									"\r",
									"    //5. Data Validation\r",
									"    if(pm.variables.get(\"batchId\") === pm.collectionVariables.get(\"batchID_Mandatory\")){\r",
									"        \r",
									"        pm.test(\"Validate stored Batch data with response data\", function () {\r",
									"\r",
									"        pm.expect(pm.collectionVariables.get(\"batchID_Mandatory\")).to.eql(response.programId);\r",
									"        pm.expect(pm.collectionVariables.get(\"batchName_Mandatory\")).to.eql(response.batchName);\r",
									"        pm.expect(pm.collectionVariables.get(\"batchNoOfClasses_Mandatory\")).to.eql(response.batchNoOfClasses);\r",
									"        pm.expect(pm.collectionVariables.get(\"batchDesc_Mandatory\")).to.eql(response.batchDescription);\r",
									"        pm.expect(pm.collectionVariables.get(\"batchStatus_Mandatory\")).to.eql(response.batchStatus);\r",
									"         });\r",
									"\r",
									"    } else if (pm.variables.get(\"batchId\") === \"batchID_ModuleIntegration\") {\r",
									"\r",
									"\r",
									"         pm.test(\"Validate stored programs data with response data\", function () {\r",
									"            pm.expect(pm.collectionVariables.get(\"programID_ModuleIntegration\")).to.eql(response.programId);\r",
									"            pm.expect(pm.collectionVariables.get(\"batchName_ModuleIntegration\")).to.eql(response.batchName);\r",
									"            pm.expect(pm.collectionVariables.get(\"batchDesc_ModuleIntegration\")).to.eql(response.batchDescription);\r",
									"            pm.expect(pm.collectionVariables.get(\"batchStatus_ModuleIntegration\")).to.eql(response.batchStatus);\r",
									"         });\r",
									"    }\r",
									"\r",
									"\r",
									"}\r",
									"\r",
									"\r",
									"if(batchList.length>0){\r",
									"    console.log(\"Inside loop for next repetition\")\r",
									"    pm.execution.setNextRequest(\"BatchbyBatchId\")\r",
									"\r",
									"}\r",
									"else{\r",
									"    console.log(\"No more program id list\")\r",
									"    pm.collectionVariables.unset(\"batchList\");\r",
									"    pm.collectionVariables.unset(\"batchId\");\r",
									"    pm.execution.setNextRequest(null);\r",
									"}\r",
									"\r",
									"\r",
									"/*\r",
									"{\r",
									"    \"message\": \"Batch not found with Id : 91799 \",\r",
									"    \"success\": false\r",
									"}\r",
									" */"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "2677842c-8bbe-4931-b420-68f1399b92a8",
								"exec": [
									"//Get list of program created\r",
									"var batchList = pm.collectionVariables.get(\"batchList\")\r",
									"console.log(batchList);\r",
									"\r",
									"\r",
									"if(!batchList){\r",
									"  batchList = [pm.collectionVariables.get(\"batchID_Mandatory\"), pm.collectionVariables.get(\"batchID_ModuleIntegration\")];\r",
									"  console.log(\"batchList = \"+batchList);\r",
									"}\r",
									"\r",
									"var currentBatch = batchList.shift();\r",
									"console.log('Current Batch = '+currentBatch);\r",
									"\r",
									"pm.collectionVariables.set(\"currentBatch\", currentBatch)\r",
									"console.log(pm.collectionVariables.get(\"currentBatch\"))\r",
									"\r",
									"//set the remainder names at data level\r",
									"pm.collectionVariables.set(\"batchList\", batchList); "
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "c78b22c3-23eb-4b4a-8cc9-f8e6a6f0976b",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/batches/batchId/:batchId",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"batches",
								"batchId",
								":batchId"
							],
							"variable": [
								{
									"id": "47d06168-995d-4957-a1d1-64d85f467759",
									"key": "batchId",
									"value": "{{currentBatch}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "BatchbyBatchName",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fa10bada-951f-415c-b7a6-f665a53166bd",
								"exec": [
									"const response = pm.response.json();\r",
									"var batchNameList = pm.collectionVariables.get(\"batchNameList\");\r",
									"\r",
									"//Happy Path - Positive\r",
									"if(pm.response.to.have.status(200)){\r",
									"\r",
									"    //1. Status Code\r",
									"    pm.test(\"Status code is 200\", function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    });\r",
									"\r",
									"    //2. Status Line\r",
									"    pm.test(\"Status message is OK\", function () {\r",
									"        pm.response.to.have.status(\"OK\");\r",
									"    });\r",
									"\r",
									"    //3. Test for Content-Type header having a particular value\r",
									"    pm.test(\"Content-Type header is application/json\", () => {\r",
									"        pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"    });\r",
									"\r",
									"    //4. Schema Validation -- TO BE DONE\r",
									"\r",
									"    //5. Data Validation\r",
									"    if(pm.variables.get(\"currentBatchName\") === pm.collectionVariables.get(\"batchName_Mandatory\")){\r",
									"        \r",
									"        pm.test(\"Validate stored Batch data with response data\", function () {\r",
									"\r",
									"        pm.expect(pm.collectionVariables.get(\"batchID_Mandatory\")).to.eql(response[0].batchId);\r",
									"        pm.expect(pm.collectionVariables.get(\"batchName_Mandatory\")).to.eql(response[0].batchName);\r",
									"        pm.expect(pm.collectionVariables.get(\"batchNoOfClasses_Mandatory\")).to.eql(response[0].batchNoOfClasses);\r",
									"        pm.expect(pm.collectionVariables.get(\"batchDesc_Mandatory\")).to.eql(response[0].batchDescription);\r",
									"        pm.expect(pm.collectionVariables.get(\"batchStatus_Mandatory\")).to.eql(response[0].batchStatus);\r",
									"         });\r",
									"\r",
									"    } else if (pm.variables.get(\"currentBatchName\") === \"batchName_ModuleIntegration\") {\r",
									"\r",
									"        console.log(pm.collectionVariables.get(\"batchID_ModuleIntegration\"))\r",
									"\r",
									"         pm.test(\"Validate stored programs data with response data\", function () {\r",
									"            pm.expect(pm.collectionVariables.get(\"programID_ModuleIntegration\")).to.eql(response[0].batchId);\r",
									"            pm.expect(pm.collectionVariables.get(\"batchName_ModuleIntegration\")).to.eql(response[0].batchName);\r",
									"            pm.expect(pm.collectionVariables.get(\"batchNoOfClasses_ModuleIntegration\")).to.eql(response[0].batchNoOfClasses);            \r",
									"            pm.expect(pm.collectionVariables.get(\"batchDesc_ModuleIntegration\")).to.eql(response[0].batchDescription);\r",
									"            pm.expect(pm.collectionVariables.get(\"batchStatus_ModuleIntegration\")).to.eql(response[0].batchStatus);\r",
									"         });\r",
									"    }\r",
									"\r",
									"\r",
									"}\r",
									"\r",
									"\r",
									"if(batchNameList.length>0){\r",
									"    console.log(\"Inside loop for next repetition\")\r",
									"    pm.execution.setNextRequest(\"BatchbyBatchName\")\r",
									"\r",
									"}\r",
									"else{\r",
									"    console.log(\"No more batchName list\")\r",
									"    pm.collectionVariables.unset(\"batchNameList\");\r",
									"    pm.collectionVariables.unset(\"currentBatchName\");\r",
									"    pm.execution.setNextRequest(null);\r",
									"}\r",
									"\r",
									"\r",
									"/*\r",
									"{\r",
									"    \"message\": \"Batch not found with Id : 91799 \",\r",
									"    \"success\": false\r",
									"}\r",
									" */\r",
									"/*\r",
									"{\r",
									"    \"message\": \"programBatch with name activejava43456 not found\",\r",
									"    \"success\": false\r",
									"}\r",
									" */"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "6a55eac9-71ce-4515-a034-366cce51f033",
								"exec": [
									"//Get list of program created\r",
									"var batchNameList = pm.collectionVariables.get(\"batchNameList\")\r",
									"console.log(batchNameList);\r",
									"\r",
									"\r",
									"if(!batchNameList){\r",
									"  batchNameList = [pm.collectionVariables.get(\"batchName_Mandatory\"), pm.collectionVariables.get(\"batchName_ModuleIntegration\")];\r",
									"  console.log(\"batchNameList = \"+batchNameList);\r",
									"}\r",
									"\r",
									"var currentBatchName = batchNameList.shift();\r",
									"console.log('Current BatchName = '+currentBatchName);\r",
									"\r",
									"pm.collectionVariables.set(\"currentBatchName\", currentBatchName)\r",
									"console.log(pm.collectionVariables.get(\"currentBatchName\"))\r",
									"\r",
									"//set the remainder names at data level\r",
									"pm.collectionVariables.set(\"batchNameList\", batchNameList); "
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "98920319-6d05-4e4d-9c7a-8db2099728b6",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/batches/batchName/:batchName",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"batches",
								"batchName",
								":batchName"
							],
							"variable": [
								{
									"id": "c58b3bd0-cad4-48f0-ab17-ddf01a2c2c9c",
									"key": "batchName",
									"value": "{{currentBatchName}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "BatchbyProgramId",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fa10bada-951f-415c-b7a6-f665a53166bd",
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"//Happy Path - Positive\r",
									"if(pm.response.to.have.status(200)){\r",
									"\r",
									"    //1. Status Code\r",
									"    pm.test(\"Status code is 200\", function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    });\r",
									"\r",
									"    //2. Status Line\r",
									"    pm.test(\"Status message is OK\", function () {\r",
									"        pm.response.to.have.status(\"OK\");\r",
									"    });\r",
									"\r",
									"    //3. Test for Content-Type header having a particular value\r",
									"    pm.test(\"Content-Type header is application/json\", () => {\r",
									"        pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"    });\r",
									"\r",
									"    //4. Schema Validation -- TO BE DONE\r",
									"\r",
									"    //5a. Data Validation\r",
									"    pm.test(\"Validate all batches have same programID and programName\", function () {\r",
									"\r",
									"        response.map(item => {\r",
									"        pm.expect(item.programId).to.eql(pm.collectionVariables.get(\"programID_ModuleIntegration\"));\r",
									"        pm.expect(item.programName).to.eql(pm.collectionVariables.get(\"programName_ModuleIntegration\"));\r",
									"        })\r",
									"    });\r",
									"\r",
									"    //5b. Data Validation\r",
									"    pm.test(\"Validate batch list contain Created Batches\", function () {\r",
									"\r",
									"        const batchIds = response.map(item => item.batchId);\r",
									"        const batchNames = response.map(item => item.batchName);\r",
									"        \r",
									"        pm.expect(batchIds).contains(pm.collectionVariables.get(\"batchID_Mandatory\"), pm.collectionVariables.get(\"batchID_All\"))\r",
									"        pm.expect(batchNames).contains(pm.collectionVariables.get(\"batchName_Mandatory\"), pm.collectionVariables.get(\"batchName_All\"))\r",
									"    });\r",
									"    \r",
									"\r",
									"}\r",
									"\r",
									"/*\r",
									"{\r",
									"    \"message\": \"batch with this programId 16591123 not found\",\r",
									"    \"success\": false\r",
									"}\r",
									" */"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "dc90bdd4-4eef-47a9-9519-a3060122e02f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/batches/program/:programId",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"batches",
								"program",
								":programId"
							],
							"variable": [
								{
									"id": "eefa0d53-03a7-467f-a8eb-5d65e6d63c96",
									"key": "programId",
									"value": "{{programID_ModuleIntegration}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "UpdatebyBatchId",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "99ea712a-4fa9-4733-a4b5-8151161a2bdc",
								"exec": [
									"//POSITIVE TEST VALIDATION\r",
									"if(pm.response.to.have.status(200)){ // HAPPY PATH\r",
									"\r",
									"    //1. Status\r",
									"    pm.test(\"Status code is 200\", function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    });\r",
									"\r",
									"    //2. Status Line\r",
									"    pm.test(\"Status message is OK\", function () {\r",
									"        pm.response.to.have.status(\"OK\");\r",
									"    });\r",
									"\r",
									"    //3. Test for Content-Type header having a particular value\r",
									"    pm.test(\"Content-Type header is application/json\", () => {\r",
									"        pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"    });\r",
									"\r",
									"    //4. Schema Validation -- TO BE DONE\r",
									"\r",
									"    //5. Request VS Response Body Validation\r",
									"    pm.test(\"Batch details in Request and Response matches\", function () {\r",
									"\r",
									"        // Get the raw request body and Parse it to JSON\r",
									"        const response = pm.response.json();\r",
									"\r",
									"        const rawRequestBody = pm.request.body.raw;\r",
									"        console.log(\"Raw Request Body:\", rawRequestBody);\r",
									"        const requestBody = JSON.parse(rawRequestBody);\r",
									"\r",
									"        pm.expect(pm.collectionVariables.get(\"batchID_Mandatory\")).to.eql(response.batchId)\r",
									"        pm.expect(requestBody.batchName).to.eql(response.batchName);\r",
									"        pm.expect(requestBody.batchDescription).to.eql(response.batchDescription);\r",
									"        pm.expect(requestBody.batchStatus).to.eql(response.batchStatus);\r",
									"        pm.expect(requestBody.batchNoOfClasses).to.eql(response.batchNoOfClasses);\r",
									"        pm.expect(requestBody.programId).to.eql(response.programId);\r",
									"        pm.expect(requestBody.programName).to.eql(response.programName);\r",
									"\r",
									"    });\r",
									"\r",
									"}\r",
									"\r",
									"\r",
									"/*\r",
									"{\r",
									"    \"message\": \"Invalid Status: must be Active or Inactive\",\r",
									"    \"success\": false\r",
									"}\r",
									"\r",
									"{\r",
									"    \"message\": \" No of Classes is needed; It should be a positive number \",\r",
									"    \"success\": false\r",
									"}\r",
									"\r",
									"{\r",
									"    \"message\": \" ProgramId should be a positive number \",\r",
									"    \"success\": false\r",
									"}\r",
									"\r",
									"{\r",
									"    \"message\": \"Batch not found with Id : 9097123 \",\r",
									"    \"success\": false\r",
									"}\r",
									" */"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "edb6e91f-bddf-4532-96e0-d76972ee72a6",
								"exec": [
									"function getRandomLetterString() {\r",
									"    const letters = 'abcdefghijklmnopqrstuvwxyz';\r",
									"    let randomString = '';\r",
									"    \r",
									"    // Loop 3 times to generate a 3-letter string\r",
									"    for (let i = 0; i < 3; i++) {\r",
									"        const randomIndex = Math.floor(Math.random() * letters.length); \r",
									"        randomString += letters[randomIndex]; \r",
									"    }\r",
									"\r",
									"    return randomString;\r",
									"}\r",
									"\r",
									"//var batchName_Mandatory_data = 'Batch Mandatory'+ getRandomLetterString(); //Defect\r",
									"var batchName_Mandatory_dataupdate = 'Batch-Mandatory-Update'+ getRandomLetterString(); //worked\r",
									"\r",
									"pm.variables.set(\"batchName_Mandatory_dataupdate\",batchName_Mandatory_dataupdate)"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "caf50a77-e2ec-4d4e-855f-188c883c5a9a",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n//  \"batchDescription\":\"Batch Desc Updated\",\r\n//  \"batchId\":{{batchID_Mandatory}},\r\n \"batchDescription\":\"\",\r\n \"batchId\":1234, //doesnt matter. it is whatever is passed as path parameter\r\n \"batchName\":\"{{batchName_Mandatory_dataupdate}}\",  //Mandatory\r\n \"batchNoOfClasses\":15, //Mandatory\r\n \"batchStatus\":\"Active\",  //Mandatory\r\n \"programId\": 16208,  //Mandatory\r\n \"programName\": \"DVLPRer\" //Mandatory\r\n }\r\n\r\n ",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/batches/:batchId",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"batches",
								":batchId"
							],
							"variable": [
								{
									"id": "2c945a2b-a19a-416b-a6d1-743570112d45",
									"key": "batchId",
									"value": "{{batchID_Mandatory}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DeletebatchbyBatchId",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1c22dca5-5599-48da-93e9-54e395d43d6b",
								"exec": [
									"// var batchNameList = pm.collectionVariables.get(\"batchNameList\");\r",
									"var currentBatch = pm.collectionVariables.get(\"batchID_Mandatory\");\r",
									"\r",
									"//Happy Path - Positive\r",
									"if(pm.response.to.have.status(200)){\r",
									"\r",
									"    //1. Status Code\r",
									"    pm.test(\"Status code is 200\", function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    });\r",
									"\r",
									"    //2. Status Line\r",
									"    pm.test(\"Status message is OK\", function () {\r",
									"        pm.response.to.have.status(\"OK\");\r",
									"    });\r",
									"\r",
									"    //3. Test for Content-Type header having a particular value\r",
									"    pm.test(\"Content-Type header is application/json\", () => {\r",
									"        pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"    });\r",
									"\r",
									"    //4. Schema Validation -- TO BE DONE\r",
									"\r",
									"    //5. Data Validation        \r",
									"  /*  pm.test(\"Validate stored Batch data with response data\", function () {\r",
									"\r",
									"        pm.expect(response).to.include('Message: Batch with Id-'+currentBatch+' deleted Successfully!');\r",
									"        DEFECT!! ERROR ENCOUNTERED --> JSONError: Unexpected token 'M' at 1:1 Message: Batch with Id-9684 deleted Successfully! ^  -- CANNOT VALIDATE DELETE MSG SINCE  Unexpected token 'M' at 1:1: This means that Postman was expecting JSON data (starting with {, [, or other JSON-valid characters), but it found the character 'M' (the first character of \"Message: Batch with Id-9684 deleted Successfully!\").  Message: Batch with Id-9684 deleted Successfully!: This is the raw text from your response body, which is not in valid JSON format \r",
									"    }); */\r",
									"\r",
									"    //5. Validate Delete Program status has changed to Inactive\r",
									"        // Programmatically make a GET request using the ProgramID\r",
									"        pm.sendRequest({\r",
									"            url:  pm.environment.get(\"baseURL\") + `/batches/batchId/` + currentBatch , \r",
									"            method: 'GET',\r",
									"            header: {\r",
									"                'Authorization': 'Bearer ' + pm.collectionVariables.get(\"BearerToken\") \r",
									"            }\r",
									"        }, function (err, res) {\r",
									"            if (err) {\r",
									"                pm.test(\"GET BatchByID request failed after Batch Deletion\", function() {\r",
									"                  console.log(err);\r",
									"                return;\r",
									"                });\r",
									"            } else {\r",
									"                pm.test(\"GET BatchByID request Successful after Batch Deletion\", function() {\r",
									"\r",
									"                    pm.expect(res.json().batchStatus).to.eql(\"Inactive\")\r",
									"\r",
									"                        // remove the batch info at collection level\r",
									"                        pm.collectionVariables.unset(\"batchID_Mandatory\");\r",
									"                        pm.collectionVariables.unset(\"batchName_Mandatory\")\r",
									"                        pm.collectionVariables.unset(\"batchDesc_Mandatory\")\r",
									"                        pm.collectionVariables.unset(\"batchNoOfClasses_Mandatory\")\r",
									"                        pm.collectionVariables.unset(\"batchStatus_Mandatory\")    \r",
									"                });\r",
									"\r",
									"                \r",
									"            }\r",
									"    });\r",
									"\r",
									"\r",
									"\r",
									"}\r",
									"\r",
									"\r",
									"/*\r",
									"{\r",
									"    \"message\": \"Batch not found with Id : 91799 \",\r",
									"    \"success\": false\r",
									"}\r",
									" */\r",
									"/*\r",
									"{\r",
									"    \"message\": \"programBatch with name activejava43456 not found\",\r",
									"    \"success\": false\r",
									"}\r",
									" */\r",
									"\r",
									"\r",
									"/*\r",
									"{\r",
									"    \"message\": \"Batch id not found or not exists 925122\",\r",
									"    \"success\": false\r",
									"} \r",
									"*/"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "eaee0068-97f3-4ffe-bb5b-e62eeb433c10",
								"exec": [
									"//Get list of program created\r",
									"// var batchList = pm.collectionVariables.get(\"batchList\")\r",
									"// console.log(batchList);\r",
									"\r",
									"\r",
									"// if (!batchList) {\r",
									"//     batchList = [pm.collectionVariables.get(\"batchID_Mandatory\"), pm.collectionVariables.get(\"batchID_All\")];\r",
									"//     console.log(\"batchList = \" + batchList);\r",
									"// }\r",
									"\r",
									"// var currentBatch = batchList.shift();\r",
									"// console.log('Current Batch = ' + currentBatch);\r",
									"\r",
									"// pm.collectionVariables.set(\"currentBatch\", currentBatch)\r",
									"// console.log(pm.collectionVariables.get(\"currentBatch\"))\r",
									"\r",
									"// //set the remainder names at data level\r",
									"// pm.collectionVariables.set(\"batchList\", batchList); "
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "77f44398-d857-41b3-a310-e66525b55532",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/batches/:id",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"batches",
								":id"
							],
							"variable": [
								{
									"id": "8cc4bdc7-54a5-48b4-97b7-c490bf4379f1",
									"key": "id",
									"value": "{{batchID_Mandatory}}"
								}
							]
						}
					},
					"response": [
						{
							"id": "911c75ee-1a1a-4a1c-80a5-6e3c497dd727",
							"name": "DeletebatchbyBatchIdResponse",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/batches/:id",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"batches",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "9865"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Cowboy"
								},
								{
									"key": "Report-To",
									"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1741625597&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=PDLt%2B00Gslhxfgkc1x%2FIEozuZjdj88gMBe2QrUbcjjE%3D\"}]}"
								},
								{
									"key": "Reporting-Endpoints",
									"value": "heroku-nel=https://nel.heroku.com/reports?ts=1741625597&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=PDLt%2B00Gslhxfgkc1x%2FIEozuZjdj88gMBe2QrUbcjjE%3D"
								},
								{
									"key": "Nel",
									"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-Xss-Protection",
									"value": "0"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, max-age=0, must-revalidate"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "0"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000 ; includeSubDomains"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Content-Length",
									"value": "49"
								},
								{
									"key": "Date",
									"value": "Mon, 10 Mar 2025 16:53:17 GMT"
								},
								{
									"key": "Via",
									"value": "1.1 vegur"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "Message: Batch with Id-9865 deleted Successfully!"
						}
					]
				}
			],
			"id": "ae705100-802f-4758-a9c0-df74e4d857fc"
		},
		{
			"name": "Users",
			"item": [
				{
					"name": "CreateUserWithRole",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "de950ad5-3ba5-4f77-a1cf-9d8c173103ec",
								"exec": [
									"const response = pm.response.json();\r",
									" const rawRequestBody = pm.request.body.raw;\r",
									"const requestBody = JSON.parse(rawRequestBody);\r",
									"\r",
									"\r",
									"//POSITIVE TEST VALIDATION\r",
									"//1. Status\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"//1. Status Line\r",
									"pm.test(\"Status message is Created\", function () {\r",
									"    pm.response.to.have.status(\"Created\");\r",
									"});\r",
									"\r",
									"//3. Test for Content-Type header having a particular value\r",
									"pm.test(\"Content-Type header is application/json\", () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"});\r",
									"\r",
									"//4. Schema Validation -- \r",
									"\r",
									"const schemastruct = \r",
									"{\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"userComments\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"userEduPg\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"userEduUg\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"userFirstName\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"userId\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"userLastName\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"userLinkedinUrl\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"userLocation\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"userMiddleName\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"userPhoneNumber\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"userTimeZone\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"userVisaStatus\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"userLoginEmail\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"userComments\",\r",
									"    \"userEduPg\",\r",
									"    \"userEduUg\",\r",
									"    \"userFirstName\",\r",
									"    \"userId\",\r",
									"    \"userLastName\",\r",
									"    \"userLinkedinUrl\",\r",
									"    \"userLocation\",\r",
									"    \"userMiddleName\",\r",
									"    \"userPhoneNumber\",\r",
									"    \"userTimeZone\",\r",
									"    \"userVisaStatus\",\r",
									"    \"userLoginEmail\"\r",
									"  ]\r",
									"}\r",
									"pm.test(\"Validate Schema\"),function(){\r",
									"    pm.response.to.have.jsonSchema(schemastruct);\r",
									"}\r",
									"\r",
									"\r",
									"//5. Request VS Response Body Validation\r",
									"pm.test(\"user name matches\", function () {\r",
									"\r",
									"    // Get the raw request body and Parse it to JSON\r",
									"   \r",
									"    pm.expect(requestBody.userLinkedinUrl).to.eql(response.userLinkedinUrl);\r",
									"    pm.expect(requestBody.userComments).to.eql(response.userComments);\r",
									"    pm.expect(requestBody.userEduPg).to.eql(response.userEduPg);\r",
									"    pm.expect(requestBody.userEduUg).to.eql(response.userEduUg);\r",
									"    pm.expect(requestBody.userLastName).to.eql(response.userLastName);\r",
									"    pm.expect(requestBody.userFirstName).to.eql(response.userFirstName);\r",
									"    pm.expect(requestBody.userMiddleName).to.eql(response.userMiddleName);\r",
									"    pm.expect(requestBody.userPhoneNumber).to.eql(response.userPhoneNumber);\r",
									"    pm.expect(requestBody.userTimeZone).to.eql(response.userTimeZone);\r",
									"    pm.expect(requestBody.userVisaStatus).to.eql(response.userVisaStatus);\r",
									"    pm.expect(requestBody.userLoginEmail).to.eql(response.userLoginEmail);\r",
									"   \r",
									"\r",
									"});\r",
									"\r",
									"\r",
									"//SET VALUE AT RUN TIME (LATER CHECK IF THIS COULD BE TRANSFERRED AS PROGRAM OBJECT!!!!)\r",
									"console.log(response.roles[0].roleId)\r",
									"console.log(response.user.userId)\r",
									"\r",
									"    if(response.roles[0].roleId==\"R01\")\r",
									"        pm.collectionVariables.set(\"Admin_UserID\", response.user.userId)\r",
									"    else if (response.roles[0].roleId==\"R02\")\r",
									"\r",
									"        pm.collectionVariables.set(\"Staff_Id\", response.user.userId)\r",
									"    else if(response.roles[0].roleId==\"R03\")\r",
									"        pm.collectionVariables.set(\"Student_Id\", response.user.userId)\r",
									"\r",
									"\r",
									"pm.collectionVariables.set(\"user_id\", response.user.userId)\r",
									"pm.collectionVariables.set(\"role_id\",response.roles[0].roleId)\r",
									"console.log(pm.collectionVariables.get(\"user_id\"))\r",
									"console.log(pm.collectionVariables.get(\"role_id\"))\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "5630851c-7c39-4d13-8f68-0b095cd398f6",
								"exec": [
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "04922686-18ae-4c3d-b659-ca9c8204a089",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"userComments\": \"{{userComment}}\",\r\n\"userEduPg\": \"{{pgDegree}}\",\r\n\"userEduUg\": \"{{ugDegree}}\",\r\n\"userFirstName\": \"{{firstName}}\",\r\n\"userLastName\": \"{{lastName}}\",\r\n\"userLinkedinUrl\": \"{{linkedInUrl}}\",\r\n\"userLocation\": \"{{location}}\",\r\n\"userMiddleName\": \"{{middleName}}\",\r\n\"userPhoneNumber\": \"{{phoneNumber}}\",\r\n\"userRoleMaps\": [\r\n{\r\n\"roleId\": \"{{roleId}}\",\r\n\"userRoleStatus\": \"{{roleStatus}}\"\r\n}\r\n],\r\n\"userTimeZone\": \"{{timeZone}}\",\r\n\"userVisaStatus\": \"{{visaStatus}}\",\r\n\"userLogin\": {\r\n\"loginStatus\" : \"{{loginStatus}}\",\r\n\"userLoginEmail\": \"{{loginEmail}}\"\r\n}\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}/users/roleStatus"
					},
					"response": []
				},
				{
					"name": "Get all users",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "38b76818-cf33-4625-9f4d-8ab54a8d232e",
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"//POSITIVE TEST VALIDATION\r",
									"//1. Status\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//2. Status Line\r",
									"pm.test(\"Status message is OK\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"//3. Test for Content-Type header having a particular value\r",
									"pm.test(\"Content-Type header is application/json\", () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"});\r",
									"//4 Schema validation\r",
									"\r",
									"const schemaconstant = \r",
									"{\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"array\",\r",
									"  \"items\": [\r",
									"    {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"userComments\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"userEduPg\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"userEduUg\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"userFirstName\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"userId\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"userLastName\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"userLinkedinUrl\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"userLocation\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"userMiddleName\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"userPhoneNumber\": {\r",
									"          \"type\": \"integer\"\r",
									"        },\r",
									"        \"userTimeZone\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"userVisaStatus\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"userLoginEmail\": {\r",
									"          \"type\": \"string\"\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"userComments\",\r",
									"        \"userEduPg\",\r",
									"        \"userEduUg\",\r",
									"        \"userFirstName\",\r",
									"        \"userId\",\r",
									"        \"userLastName\",\r",
									"        \"userLinkedinUrl\",\r",
									"        \"userLocation\",\r",
									"        \"userMiddleName\",\r",
									"        \"userPhoneNumber\",\r",
									"        \"userTimeZone\",\r",
									"        \"userVisaStatus\",\r",
									"        \"userLoginEmail\"\r",
									"      ]\r",
									"    }\r",
									"  ]\r",
									"}\r",
									"pm.test(\"Validate Schema\"),function(){\r",
									"    pm.response.to.have.jsonSchema(schemaconstant);\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "c2d199d6-5f04-4581-babd-cf5ffe2a247a",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseURL}}/users"
					},
					"response": []
				},
				{
					"name": "Get all Active User",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "75bb4a08-82b7-4a9c-8394-943b2410363c",
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"//POSITIVE TEST VALIDATION\r",
									"//1. Status\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//2. Status Line\r",
									"pm.test(\"Status message is OK\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"//3. Test for Content-Type header having a particular value\r",
									"pm.test(\"Content-Type header is application/json\", () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"});\r",
									"\r",
									"//4. Schema validation\r",
									"const schemaconstant = \r",
									"{\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"array\",\r",
									"  \"items\": [\r",
									"    {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"userComments\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"userEduPg\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"userEduUg\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"userFirstName\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"userId\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"userLastName\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"userLinkedinUrl\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"userLocation\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"userMiddleName\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"userPhoneNumber\": {\r",
									"          \"type\": \"integer\"\r",
									"        },\r",
									"        \"userTimeZone\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"userVisaStatus\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"userLoginEmail\": {\r",
									"          \"type\": \"string\"\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"userComments\",\r",
									"        \"userEduPg\",\r",
									"        \"userEduUg\",\r",
									"        \"userFirstName\",\r",
									"        \"userId\",\r",
									"        \"userLastName\",\r",
									"        \"userLinkedinUrl\",\r",
									"        \"userLocation\",\r",
									"        \"userMiddleName\",\r",
									"        \"userPhoneNumber\",\r",
									"        \"userTimeZone\",\r",
									"        \"userVisaStatus\",\r",
									"        \"userLoginEmail\"\r",
									"      ]\r",
									"    }\r",
									"  ]\r",
									"}\r",
									"\r",
									"pm.test(\"Validate Schema\"),function(){\r",
									"    pm.response.to.have.jsonSchema(schemaconstant);\r",
									"}\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "cd6df083-f592-4774-bf65-60c7067de2c9",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseURL}}/users/activeUsers"
					},
					"response": []
				},
				{
					"name": "Get emails of all users with active status",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "25e09dd3-0b29-4082-8d36-a235d49a11d3",
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"//POSITIVE TEST VALIDATION\r",
									"//1. Status\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//2. Status Line\r",
									"pm.test(\"Status message is OK\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"//3. Test for Content-Type header having a particular value\r",
									"pm.test(\"Content-Type header is application/json\", () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"});\r",
									"\r",
									"//4 Schema validation\r",
									"const schemaconstant = \r",
									"{\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"array\",\r",
									"  \"items\": [\r",
									"    {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"creationTime\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"lastModTime\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"roleDesc\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"roleId\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"roleName\": {\r",
									"          \"type\": \"string\"\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"creationTime\",\r",
									"        \"lastModTime\",\r",
									"        \"roleDesc\",\r",
									"        \"roleId\",\r",
									"        \"roleName\"\r",
									"      ]\r",
									"    }\r",
									"  ]\r",
									"}\r",
									"pm.test(\"Validate Schema\"),function(){\r",
									"    pm.response.to.have.jsonSchema(schemaconstant);\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "3cb5dc52-f5e2-43e3-8fab-a7c940fde0a1",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseURL}}/fetch-emails"
					},
					"response": []
				},
				{
					"name": "Get All Roles",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "751b4de8-707a-468e-8654-484403fb0b62",
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"//POSITIVE TEST VALIDATION\r",
									"//1. Status\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//2. Status Line\r",
									"pm.test(\"Status message is OK\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"//3. Test for Content-Type header having a particular value\r",
									"pm.test(\"Content-Type header is application/json\", () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"});\r",
									"//4. Schema validation\r",
									"const schemaconstant = \r",
									"{\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"array\",\r",
									"  \"items\": [\r",
									"    {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"userComments\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"userEduPg\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"userEduUg\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"userFirstName\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"userId\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"userLastName\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"userLinkedinUrl\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"userLocation\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"userMiddleName\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"userPhoneNumber\": {\r",
									"          \"type\": \"integer\"\r",
									"        },\r",
									"        \"userTimeZone\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"userVisaStatus\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"userLoginEmail\": {\r",
									"          \"type\": \"string\"\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"userComments\",\r",
									"        \"userEduPg\",\r",
									"        \"userEduUg\",\r",
									"        \"userFirstName\",\r",
									"        \"userId\",\r",
									"        \"userLastName\",\r",
									"        \"userLinkedinUrl\",\r",
									"        \"userLocation\",\r",
									"        \"userMiddleName\",\r",
									"        \"userPhoneNumber\",\r",
									"        \"userTimeZone\",\r",
									"        \"userVisaStatus\",\r",
									"        \"userLoginEmail\"\r",
									"      ]\r",
									"    }\r",
									"  ]\r",
									"}\r",
									"pm.test(\"Validate Schema\"),function(){\r",
									"    pm.response.to.have.jsonSchema(schemaconstant);\r",
									"}\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "25df65b2-1c55-4524-9980-9bac0e48645b",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseURL}}/roles"
					},
					"response": []
				},
				{
					"name": "Get User Info by userId",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d1231ceb-a289-4b10-ac44-d4daefa5dfbb",
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"//POSITIVE TEST VALIDATION\r",
									"//1. Status\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//2. Status Line\r",
									"pm.test(\"Status message is OK\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"//3. Test for Content-Type header having a particular value\r",
									"pm.test(\"Content-Type header is application/json\", () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"});\r",
									"\r",
									"//4. Schema Validation -- \r",
									"//const schemaconstant = \r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "6e097ded-b187-4443-bf65-79a38573a7b0",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseURL}}/users/{{user_id}}"
					},
					"response": []
				},
				{
					"name": "Get all Users with roles",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d1231ceb-a289-4b10-ac44-d4daefa5dfbb",
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"//POSITIVE TEST VALIDATION\r",
									"//1. Status\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//2. Status Line\r",
									"pm.test(\"Status message is OK\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"//3. Test for Content-Type header having a particular value\r",
									"pm.test(\"Content-Type header is application/json\", () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"});\r",
									"\r",
									"//4. Schema Validation -- TO BE DONE\r",
									"{\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"array\",\r",
									"  \"items\": [\r",
									"    {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"userRoleId\": {\r",
									"          \"type\": \"integer\"\r",
									"        },\r",
									"        \"user\": {\r",
									"          \"type\": \"object\",\r",
									"          \"properties\": {\r",
									"            \"userId\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"userFirstName\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"userLastName\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"userMiddleName\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"userPhoneNumber\": {\r",
									"              \"type\": \"integer\"\r",
									"            },\r",
									"            \"userLocation\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"userTimeZone\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"userLinkedinUrl\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"userEduUg\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"used g\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"userComments\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"userVisaStatus\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"hibernateLazyInitializer\": {\r",
									"              \"type\": \"object\"\r",
									"            }\r",
									"          },\r",
									"          \"required\": [\r",
									"            \"userId\",\r",
									"            \"userFirstName\",\r",
									"            \"userLastName\",\r",
									"            \"userMiddleName\",\r",
									"            \"userPhoneNumber\",\r",
									"            \"userLocation\",\r",
									"            \"userTimeZone\",\r",
									"            \"userLinkedinUrl\",\r",
									"            \"userEduUg\",\r",
									"            \"used g\",\r",
									"            \"userComments\",\r",
									"            \"userVisaStatus\",\r",
									"            \"hibernateLazyInitializer\"\r",
									"          ]\r",
									"        },\r",
									"        \"role\": {\r",
									"          \"type\": \"object\",\r",
									"          \"properties\": {\r",
									"            \"roleId\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"roleName\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"roleDesc\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"creationTime\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"lastModTime\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"hibernateLazyInitializer\": {\r",
									"              \"type\": \"object\"\r",
									"            }\r",
									"          },\r",
									"          \"required\": [\r",
									"            \"roleId\",\r",
									"            \"roleName\",\r",
									"            \"roleDesc\",\r",
									"            \"creationTime\",\r",
									"            \"lastModTime\",\r",
									"            \"hibernateLazyInitializer\"\r",
									"          ]\r",
									"        },\r",
									"        \"batches\": {\r",
									"          \"type\": \"array\",\r",
									"          \"items\": {}\r",
									"        },\r",
									"        \"userRoleStatus\": {\r",
									"          \"type\": \"string\"\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"userRoleId\",\r",
									"        \"user\",\r",
									"        \"role\",\r",
									"        \"batches\",\r",
									"        \"userRoleStatus\"\r",
									"      ]\r",
									"    }\r",
									"  ]\r",
									"}\r",
									"pm.test(\"Validate Schema\"),function(){\r",
									"    pm.response.to.have.jsonSchema(schemaconstant);\r",
									"}\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "106ca4ce-3b73-4e0c-b5d0-cc9068fb0e09",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseURL}}/users/roles"
					},
					"response": []
				},
				{
					"name": "GetCountUsers",
					"id": "cf453c83-9a89-44d3-b6e4-80ad8aa6263d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/byStatus?id={{role_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"byStatus"
							],
							"query": [
								{
									"key": "id",
									"value": "{{role_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GetUsersByProgramBatch",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fb74f9f6-4457-461b-acc7-c29e338c6b52",
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"//POSITIVE TEST VALIDATION\r",
									"//1. Status\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//2. Status Line\r",
									"pm.test(\"Status message is OK\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"//3. Test for Content-Type header having a particular value\r",
									"pm.test(\"Content-Type header is application/json\", () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "00439800-1fa5-4dd0-99f9-cccb156b2b06",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}/users/programBatch/{{batchID_ModuleIntegration}}"
					},
					"response": []
				},
				{
					"name": "GetUsersByProgram",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ba1deb71-37a2-4209-8424-a75cdd6a419a",
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"//POSITIVE TEST VALIDATION\r",
									"//1. Status\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//2. Status Line\r",
									"pm.test(\"Status message is OK\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"//3. Test for Content-Type header having a particular value\r",
									"pm.test(\"Content-Type header is application/json\", () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "6ef92f20-1c44-49ed-b450-1d7f73d5016b",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}/users/programBatch/{{batchID_ModuleIntegration}}"
					},
					"response": []
				},
				{
					"name": "GetUsersByRoleId",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "190f624b-75b6-4067-84ed-203c6f91ecc7",
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"//POSITIVE TEST VALIDATION\r",
									"//1. Status\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//2. Status Line\r",
									"pm.test(\"Status message is OK\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"//3. Test for Content-Type header having a particular value\r",
									"pm.test(\"Content-Type header is application/json\", () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "83c4857f-9133-4612-bd4f-61bff88d98ee",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}/users/roles/{{role_id}}"
					},
					"response": []
				},
				{
					"name": "GetV2Users",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "84e58f96-bd5a-4613-abc6-069b865b9633",
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"//POSITIVE TEST VALIDATION\r",
									"//1. Status\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//2. Status Line\r",
									"pm.test(\"Status message is OK\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"//3. Test for Content-Type header having a particular value\r",
									"pm.test(\"Content-Type header is application/json\", () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "b5be5a08-37e4-4c7a-a5a9-dc4102400077",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseURL}}/v2/users"
					},
					"response": []
				},
				{
					"name": "Update User Login Status",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5525b58d-5a1a-49b7-a2f4-b489cf258cac",
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"//POSITIVE TEST VALIDATION\r",
									"//1. Status\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//2. Status Line\r",
									"pm.test(\"Status message is OK\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"//3. Test for Content-Type header having a particular value\r",
									"pm.test(\"Content-Type header is application/json\", () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "666a2660-2751-4071-a009-3d8ec870b03b",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"loginStatus\": \"string\",\r\n\"password\": \"string\",\r\n\"roleIds\": [\r\n\"string\"\r\n],\r\n\"status\": \"string\",\r\n\"userLoginEmail\": \"string\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}///users/userLogin/{{user_Id}}"
					},
					"response": []
				},
				{
					"name": "Update User",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "dba1bbfb-194f-40f0-9820-8a8a34020a9e",
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"//POSITIVE TEST VALIDATION\r",
									"//1. Status\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//2. Status Line\r",
									"pm.test(\"Status message is OK\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"//3. Test for Content-Type header having a particular value\r",
									"pm.test(\"Content-Type header is application/json\", () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"});\r",
									"\r",
									"//4. schema validation\r",
									"const schemaconstant = \r",
									"{\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"userComments\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"userEduPg\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"userEduUg\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"userFirstName\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"userId\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"userLastName\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"userLinkedinUrl\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"userLocation\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"userMiddleName\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"userPhoneNumber\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"userTimeZone\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"userVisaStatus\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"userComments\",\r",
									"    \"userEduPg\",\r",
									"    \"userEduUg\",\r",
									"    \"userFirstName\",\r",
									"    \"userId\",\r",
									"    \"userLastName\",\r",
									"    \"userLinkedinUrl\",\r",
									"    \"userLocation\",\r",
									"    \"userMiddleName\",\r",
									"    \"userPhoneNumber\",\r",
									"    \"userTimeZone\",\r",
									"    \"userVisaStatus\"\r",
									"  ]\r",
									"}\r",
									"pm.test(\"Validate Schema\"),function(){\r",
									"    pm.response.to.have.jsonSchema(schemaconstant);\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "4810b4ee-755e-4d3d-a35c-264b02fb340d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"userComments\": \"String\",\r\n\"userEduPg\": \"String\",\r\n\"userEduUg\": \"String\",\r\n\"userFirstName\": \"Ram\",\r\n\"userId\": \"String\",\r\n\"userLastName\": \"Sandy\",\r\n\"userMiddleName\": \"string\",\r\n\"userLinkedinUrl\": \"www.linkedin.com\",\r\n\"userLocation\": \"String\",\r\n\"userLoginEmail\": \"Test1@gmail.com\",\r\n\"userPhoneNumber\": \"+91 2624567894\",\r\n\"userTimeZone\": \"EST\",\r\n\"userVisaStatus\": \"H4\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}/users/{{user_id}}"
					},
					"response": []
				},
				{
					"name": "Update User RoleId",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "cc62d710-6117-4d3c-a429-02ae24e4d8f4",
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"//POSITIVE TEST VALIDATION\r",
									"//1. Status\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//2. Status Line\r",
									"pm.test(\"Status message is OK\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"//3. Test for Content-Type header having a particular value\r",
									"pm.test(\"Content-Type header is application/json\", () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"});\r",
									"//4. Schema validation\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "98f71043-a0ef-4923-801f-0c5344ce9754",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"userRoleList\": [\r\n{\r\n\"roleId\": \"R03\",\r\n\"userRoleStatus\": \"Active\"\r\n}\r\n]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}/users/roleId/{{user_id}}"
					},
					"response": []
				},
				{
					"name": "Assign Update User Role Program Batch Status",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "00366d36-835f-4688-9b7c-226c1d6cd6cd",
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"//POSITIVE TEST VALIDATION\r",
									"//1. Status\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//2. Status Line\r",
									"pm.test(\"Status message is OK\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"//3. Test for Content-Type header having a particular value\r",
									"pm.test(\"Content-Type header is application/json\", () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "fabd78f1-3f1f-40ec-b667-92b33b90c85c",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"programId\": {{programID_ModuleIntegration}},\r\n\"roleId\": {{role_id}},\r\n\"userId\": {{user_id}},\r\n\"userRoleProgramBatches\": [\r\n{\r\n\"batchId\": {{batchID_ModuleIntegration}},\r\n\"userRoleProgramBatchStatus\":\"Active\"\r\n}\r\n]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}//users/roleProgramBatchStatus/{{userId}}"
					},
					"response": []
				},
				{
					"name": "Delete User-staff",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "351cbed9-051a-412b-b65d-fbfabb6d63e1",
								"exec": [
									"var userid_staff = pm.collectionVariables.get(\"Staff_Id\")\r",
									"pm.variables.set(\"userid_staff\",userid_staff)"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "49b68ab6-a962-438f-a5c0-2d967e71c8ea",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [],
						"url": "{{baseURL}}/users/{{user_id}}"
					},
					"response": []
				},
				{
					"name": "Delete User-student",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "351cbed9-051a-412b-b65d-fbfabb6d63e1",
								"exec": [
									"var userid_student = pm.collectionVariables.get(\"Student_Id\")\r",
									"pm.variables.set(\"userid_student\",userid_student)"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "170672ae-77d8-440e-b4d8-499474793a4b",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [],
						"url": "{{baseURL}}/users/{{user_id}}"
					},
					"response": []
				}
			],
			"id": "ac94d086-3b0f-459e-82a5-a8b4dfa537e2"
		},
		{
			"name": "Class",
			"item": [
				{
					"name": "Create New Class",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fc70e53d-7e6a-4583-a90d-b4941e1c79f1",
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"//POSITIVE TEST VALIDATION\r",
									"if(pm.response.to.have.status(201)){ // HAPPY PATH\r",
									"\r",
									"    //1. Status\r",
									"    pm.test(\"Status code is 201\", function () {\r",
									"        pm.response.to.have.status(201);\r",
									"    });\r",
									"\r",
									"    //2. Status Line\r",
									"    pm.test(\"Status message is Created\", function () {\r",
									"        pm.response.to.have.status();\r",
									"    });\r",
									"\r",
									"    //3. Test for Content-Type header having a particular value\r",
									"    pm.test(\"Content-Type header is application/json\", () => {\r",
									"        pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"    });\r",
									"\r",
									"    //4. Schema Validation -- TO BE DONE\r",
									" var schema =\r",
									" {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": \r",
									"  {\r",
									"    \"batchId\": \r",
									"    {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"classComments\": \r",
									"    {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"classDate\": \r",
									"    {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"classDescription\":\r",
									"    {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"classNo\": \r",
									"    {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"classNotes\": \r",
									"    {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"classRecordingPath\": \r",
									"    {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"classStaffId\": \r",
									"    {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"classTopic\": \r",
									"    {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"csId\": \r",
									"    {\r",
									"      \"type\": \"integer\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"batchId\",\r",
									"    \"classComments\",\r",
									"    \"classDate\",\r",
									"    \"classDescription\",\r",
									"    \"classNo\",\r",
									"    \"classNotes\",\r",
									"    \"classRecordingPath\",\r",
									"    \"classStaffId\",\r",
									"    \"classTopic\",\r",
									"    \"csId\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"pm.test(\"Validate Schema\"),function(){\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"}\r",
									"    //5. Request VS Response Body Validation\r",
									"    pm.test(\"Class details in Request and Response matches\", function () {\r",
									"\r",
									"        // Get the raw request body and Parse it to JSON\r",
									"        const rawRequestBody = pm.request.body.raw;\r",
									"        const requestBody = JSON.parse(rawRequestBody);\r",
									"\r",
									"       // pm.expect(response).to.include(\"classId\");\r",
									"        pm.expect(response).to.have.property(\"csId\");\r",
									"        pm.expect(requestBody.batchId).to.eql(response.batchId);\r",
									"        pm.expect(requestBody.classNo).to.eql(response.classNo);\r",
									"        pm.expect(requestBody.classDate).to.eql(response.classDate);\r",
									"        pm.expect(requestBody.classTopic).to.eql(response.classTopic);\r",
									"        pm.expect(requestBody.classStaffId).to.eql(response.classStaffId);\r",
									"        pm.expect(requestBody.classDescription).to.eql(response.classDescription);\r",
									"        pm.expect(requestBody.classComments).to.eql(response.classComments);\r",
									"        pm.expect(requestBody.classNotes).to.eql(response.classNotes);\r",
									"        pm.expect(requestBody.classRecordingPath).to.eql(response.classRecordingPath);\r",
									"    \r",
									"\r",
									"    });\r",
									"\r",
									"    //GET ALL CLASS COUNT AFTER CLASS CREATION\r",
									"    pm.test(\"Check Total Class Count increased by 1\", function () {\r",
									"        \r",
									"        // Perform GET request classically\r",
									"        pm.sendRequest({\r",
									"            url: pm.environment.get(\"baseURL\")+'/allClasses',  \r",
									"            method: 'GET',\r",
									"            header: {\r",
									"               'Authorization': 'Bearer ' + pm.collectionVariables.get(\"BearerToken\") \r",
									"            }\r",
									"        }, function (err, res) {\r",
									"            if (err) {\r",
									"                console.log(err);\r",
									"                   // pm.expect(err).to.be.null; // Ensure there is no error\r",
									"                return;\r",
									"            } else {\r",
									"               \r",
									"                const classes = res.json(); \r",
									"                const count = classes.length; \r",
									"\r",
									"                   pm.expect(count).to.equal((pm.collectionVariables.get(\"ClassCount_BeforeAdd\"))+1); \r",
									"                \r",
									"            }\r",
									"        });\r",
									"    });\r",
									"\r",
									"}\r",
									"\r",
									"\r",
									"//SET VALUE AT RUN TIME (LATER CHECK IF THIS COULD BE TRANSFERRED AS CLASS OBJECT!!!!)\r",
									"pm.collectionVariables.set(\"classId\", response.classId)\r",
									"pm.collectionVariables.set(\"batchId\", response.batchId)\r",
									"pm.collectionVariables.set(\"classNo\", response.classNo)\r",
									"pm.collectionVariables.set(\"classDate\", response.classDate)\r",
									"pm.collectionVariables.set(\"classTopic\", response.classTopic)\r",
									"pm.collectionVariables.set(\"classStaffId\", response.classStaffId)\r",
									"pm.collectionVariables.set(\"classDescription\", response.classDescription)\r",
									"pm.collectionVariables.set(\"classComments\", response.classComments)\r",
									"pm.collectionVariables.set(\"classNotes\", response.classNotes)\r",
									"pm.collectionVariables.set(\"classRecordingPath\", response.classRecordingPath)\r",
									"\r",
									"\r",
									"//NEGATIVE TEST VALIDATION\r",
									"\r",
									"\r",
									"/**\r",
									" * status code = 400\r",
									"{   \r",
									"    \"message\": \"programName Must contain only letters and sometimes hyphens\",\r",
									"    \"success\": false\r",
									"}\r",
									" */"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "0d29c538-7b1c-4894-8a41-04fedafdc273",
								"exec": [
									"function getRandomLetterString() {\r",
									"    const letters = 'abcdefghijklmnopqrstuvwxyz'; // Available letters\r",
									"    let randomString = '';\r",
									"    \r",
									"    // Loop 3 times to generate a 3-letter string\r",
									"    for (let i = 0; i < 3; i++) {\r",
									"        const randomIndex = Math.floor(Math.random() * letters.length); // Get a random index\r",
									"        randomString += letters[randomIndex]; // Add the random letter to the string\r",
									"    }\r",
									"\r",
									"    return randomString;\r",
									"}\r",
									"\r",
									"var className = 'SeleniumPython-Ten'+ getRandomLetterString();\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "af7def45-3346-479f-9f18-028d200bb181",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{ \r\n\"batchId\": {{batchId}},\r\n\"classNo\": {{classNo}},\r\n\"classDate\": \"{{classDate}}\",\r\n\"classTopic\": \"{{classTopic}}\",\r\n\"classStatus\": \"{{classStatus}}\",\r\n\"classStaffId\": \"{{classStaffId}}\",\r\n\"classDescription\": \"{{classDescription}}\",\r\n\"classComments\": \"{{classComments}}\" ,\r\n\"classNotes\": \"{{classNotes}}\",\r\n\"classRecordingPath\": \"{{classRecordingPath}}\",\r\n\"classScheduledDates\": [\"{{classScheduledDates}}\"]\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}/CreateClassSchedule"
					},
					"response": []
				},
				{
					"name": "Negative - Create New Class",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fc70e53d-7e6a-4583-a90d-b4941e1c79f1",
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"//POSITIVE TEST VALIDATION\r",
									"if(pm.response.to.have.status(201)){ // HAPPY PATH\r",
									"\r",
									"    //1. Status\r",
									"    pm.test(\"Status code is 201\", function () {\r",
									"        pm.response.to.have.status(201);\r",
									"    });\r",
									"\r",
									"    //2. Status Line\r",
									"    pm.test(\"Status message is Created\", function () {\r",
									"        pm.response.to.have.status();\r",
									"    });\r",
									"\r",
									"    //3. Test for Content-Type header having a particular value\r",
									"    pm.test(\"Content-Type header is application/json\", () => {\r",
									"        pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"    });\r",
									"\r",
									"    //4. Schema Validation -- TO BE DONE\r",
									"    const jsonData = pm.response.json();\r",
									"    const schema =\r",
									" {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": \r",
									"  {\r",
									"    \"batchId\": \r",
									"    {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"classComments\": \r",
									"    {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"classDate\": \r",
									"    {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"classDescription\":\r",
									"    {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"classNo\": \r",
									"    {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"classNotes\": \r",
									"    {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"classRecordingPath\": \r",
									"    {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"classStaffId\": \r",
									"    {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"classTopic\": \r",
									"    {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"csId\": \r",
									"    {\r",
									"      \"type\": \"integer\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"batchId\",\r",
									"    \"classComments\",\r",
									"    \"classDate\",\r",
									"    \"classDescription\",\r",
									"    \"classNo\",\r",
									"    \"classNotes\",\r",
									"    \"classRecordingPath\",\r",
									"    \"classStaffId\",\r",
									"    \"classTopic\",\r",
									"    \"csId\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"    //5. Request VS Response Body Validation\r",
									"    pm.test(\"Class details in Request and Response matches\", function () {\r",
									"\r",
									"        // Get the raw request body and Parse it to JSON\r",
									"        const rawRequestBody = pm.request.body.raw;\r",
									"        const requestBody = JSON.parse(rawRequestBody);\r",
									"\r",
									"       // pm.expect(response).to.include(\"classId\");\r",
									"        pm.expect(response).to.have.property(\"csId\");\r",
									"        pm.expect(requestBody.batchId).to.eql(response.batchId);\r",
									"        pm.expect(requestBody.classNo).to.eql(response.classNo);\r",
									"        pm.expect(requestBody.classDate).to.eql(response.classDate);\r",
									"        pm.expect(requestBody.classTopic).to.eql(response.classTopic);\r",
									"        pm.expect(requestBody.classStaffId).to.eql(response.classStaffId);\r",
									"        pm.expect(requestBody.classDescription).to.eql(response.classDescription);\r",
									"        pm.expect(requestBody.classComments).to.eql(response.classComments);\r",
									"        pm.expect(requestBody.classNotes).to.eql(response.classNotes);\r",
									"        pm.expect(requestBody.classRecordingPath).to.eql(response.classRecordingPath);\r",
									"    \r",
									"\r",
									"    });\r",
									"\r",
									"    //GET ALL CLASS COUNT AFTER CLASS CREATION\r",
									"    pm.test(\"Check Total Class Count increased by 1\", function () {\r",
									"        \r",
									"        // Perform GET request classically\r",
									"        pm.sendRequest({\r",
									"            url: pm.environment.get(\"baseURL\")+'/allClasses',  \r",
									"            method: 'GET',\r",
									"            header: {\r",
									"               'Authorization': 'Bearer ' + pm.collectionVariables.get(\"BearerToken\") \r",
									"            }\r",
									"        }, function (err, res) {\r",
									"            if (err) {\r",
									"                console.log(err);\r",
									"                   // pm.expect(err).to.be.null; // Ensure there is no error\r",
									"                return;\r",
									"            } else {\r",
									"               \r",
									"                const classes = res.json(); \r",
									"                const count = classes.length; \r",
									"\r",
									"                   pm.expect(count).to.equal((pm.collectionVariables.get(\"ClassCount_BeforeAdd\"))+1); \r",
									"                \r",
									"            }\r",
									"        });\r",
									"    });\r",
									"\r",
									"}\r",
									"\r",
									"\r",
									"//SET VALUE AT RUN TIME (LATER CHECK IF THIS COULD BE TRANSFERRED AS CLASS OBJECT!!!!)\r",
									"pm.collectionVariables.set(\"classId\", response.classId)\r",
									"pm.collectionVariables.set(\"batchId\", response.batchId)\r",
									"pm.collectionVariables.set(\"classNo\", response.classNo)\r",
									"pm.collectionVariables.set(\"classDate\", response.classDate)\r",
									"pm.collectionVariables.set(\"classTopic\", response.classTopic)\r",
									"pm.collectionVariables.set(\"classStaffId\", response.classStaffId)\r",
									"pm.collectionVariables.set(\"classDescription\", response.classDescription)\r",
									"pm.collectionVariables.set(\"classComments\", response.classComments)\r",
									"pm.collectionVariables.set(\"classNotes\", response.classNotes)\r",
									"pm.collectionVariables.set(\"classRecordingPath\", response.classRecordingPath)\r",
									"\r",
									"\r",
									"//NEGATIVE TEST VALIDATION\r",
									"\r",
									"\r",
									"/**\r",
									" * status code = 400\r",
									"{   \r",
									"    \"message\": \"programName Must contain only letters and sometimes hyphens\",\r",
									"    \"success\": false\r",
									"}\r",
									" */"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "0d29c538-7b1c-4894-8a41-04fedafdc273",
								"exec": [
									"function getRandomLetterString() {\r",
									"    const letters = 'abcdefghijklmnopqrstuvwxyz'; // Available letters\r",
									"    let randomString = '';\r",
									"    \r",
									"    // Loop 3 times to generate a 3-letter string\r",
									"    for (let i = 0; i < 3; i++) {\r",
									"        const randomIndex = Math.floor(Math.random() * letters.length); // Get a random index\r",
									"        randomString += letters[randomIndex]; // Add the random letter to the string\r",
									"    }\r",
									"\r",
									"    return randomString;\r",
									"}\r",
									"\r",
									"var className = 'SeleniumPython-Ten'+ getRandomLetterString();\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "0080aea5-1567-421e-a8d2-835b5285c496",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{ \r\n\"batchId\": {{batchId}},\r\n\"classNo\": {{classNo}},\r\n\"classDate\": \"{{classDate}}\",\r\n\"classTopic\": \"{{classTopic}}\",\r\n\"classStatus\": \"{{classStatus}}\",\r\n\"classStaffId\": \"{{classStaffId}}\",\r\n\"classDescription\": \"{{classDescription}}\",\r\n\"classComments\": \"{{classComments}}\" ,\r\n\"classNotes\": \"{{classNotes}}\",\r\n\"classRecordingPath\": \"{{classRecordingPath}}\",\r\n\"classScheduledDates\": [\"{{classScheduledDates}}\"]\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}/{{endPoint}}"
					},
					"response": []
				},
				{
					"name": "Get All Class List",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c8131416-8a75-4753-be8b-d67b5ce3eceb",
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"//POSITIVE TEST VALIDATION\r",
									"//1. Status\r",
									"pm.test(\"Status code is 200\", function () \r",
									"{\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//2. Status Line\r",
									"pm.test(\"Status message is OK\", function ()\r",
									"{\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"//3. Test for Content-Type header having a particular value\r",
									"pm.test(\"Content-Type header is application/json\", () => \r",
									"{\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"});\r",
									"\r",
									"//4. Schema Validation -- TO BE DONE\r",
									"\r",
									"var schema =\r",
									"{\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": \r",
									"  {\r",
									"    \"batchId\": \r",
									"    {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"classComments\": \r",
									"    {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"classDate\": \r",
									"    {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"classDescription\":\r",
									"    {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"classNo\": \r",
									"    {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"classNotes\": \r",
									"    {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"classRecordingPath\": \r",
									"    {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"classStaffId\": \r",
									"    {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"classTopic\": \r",
									"    {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"csId\": \r",
									"    {\r",
									"      \"type\": \"integer\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"batchId\",\r",
									"    \"classComments\",\r",
									"    \"classDate\",\r",
									"    \"classDescription\",\r",
									"    \"classNo\",\r",
									"    \"classNotes\",\r",
									"    \"classRecordingPath\",\r",
									"    \"classStaffId\",\r",
									"    \"classTopic\",\r",
									"    \"csId\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"pm.test(\"Validate Schema\"),function(){\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"}\r",
									"\r",
									"//SET TOTAL COUNT\r",
									"console.log(response.length)\r",
									"pm.collectionVariables.set(\"ClassCount_BeforeAdd\",response.length)\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "9f82c6c2-42b1-4555-92b9-14a5a837353b",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseURL}}/allClasses"
					},
					"response": []
				},
				{
					"name": "Negative - Get All Class List",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c8131416-8a75-4753-be8b-d67b5ce3eceb",
								"exec": [
									"const expStatusCode = pm.collectionVariables.get(\"statusCode\");\r",
									"const expStatusLine = pm.collectionVariables.get(\"statusLine\");\r",
									"const expHttpMethod = pm.collectionVariables.get(\"httpMethod\");\r",
									"const scenarioName = pm.collectionVariables.get(\"scenarioName\");\r",
									"\r",
									"//NEGATIVE TEST VALIDATION\r",
									"//1. Status\r",
									"pm.test(`Status code is ${expStatusCode}`, function () {\r",
									"    pm.response.to.have.status(expStatusCode);\r",
									"});\r",
									"\r",
									"//2. Status Line\r",
									"pm.test(`Status message is ${expStatusLine}`, function () {\r",
									"    pm.response.to.have.status(expStatusLine);\r",
									"});\r",
									"\r",
									"//3. Scenario specific Tests\r",
									"if(scenarioName === \"Incorrect Http Method\") {\r",
									"    pm.test(\"Validate Incorrect HTTP Method JSON Response msg\", () => {\r",
									"        pm.expect(pm.response.json().message).to.eql(`Request method '${expHttpMethod}' is not supported`);\r",
									"        pm.expect(pm.response.json().success).to.eql(false);\r",
									"        \r",
									"    });\r",
									"}\r",
									"\r",
									"if(scenarioName === \"Incorrect Endpoint\") {\r",
									"    pm.test(\"Validate Incorrect Endpoint Response msg\", () => {\r",
									"        pm.expect(pm.response.headers.get('Content-Type')).to.include('text/plain');\r",
									"        pm.expect(pm.response.text()).to.eql(`Invalid endpoint`);\r",
									"        \r",
									"    });\r",
									"}\r",
									"\r",
									"if(scenarioName === \"Incorrect BaseURL\") {\r",
									"    pm.test(\"Validate Incorrect BaseURL Response msg\", () => {\r",
									"        pm.expect(pm.response.headers.get('Content-Type')).to.include('text/html');\r",
									"        pm.expect(pm.response.text()).to.include('<title>Heroku | Application Error</title>');\r",
									"        \r",
									"    });\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "551b8da9-2d7c-4faf-8c3a-3e76b756fd20",
								"exec": [
									"var scenarioName = pm.collectionVariables.get(\"scenarioName\");\r",
									"console.log(\"Scenario Name \"+scenarioName)\r",
									"\r",
									"if(scenarioName === \"Incorrect Http Method\"){\r",
									"    pm.request.method = pm.collectionVariables.get(\"httpMethod\");;\r",
									"}\r",
									"\r",
									"if(scenarioName === \"Incorrect BaseURL\"){\r",
									"    pm.variables.set(\"baseURL\", pm.collectionVariables.get('baseURL'))\r",
									"}\r",
									"\r",
									"if(scenarioName === \"No Auth\"){\r",
									"    pm.variables.set(\"BearerToken\",\"\")\r",
									"    pm.variables.set(\"baseURL\", pm.collectionVariables.get('baseURL'))\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "7619b8ea-d456-43e3-80d7-81ed6c2f8eba",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseURL}}/{{endPoint}}"
					},
					"response": []
				},
				{
					"name": "Upcoming Classes for particular Student",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "162e9c59-bf49-4cfb-b4e5-d569eed50eda",
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"//POSITIVE TEST VALIDATION\r",
									"//1. Status\r",
									"pm.test(\"Status code is 200\", function () \r",
									"{\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//2. Status Line\r",
									"pm.test(\"Status message is OK\", function ()\r",
									"{\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"//3. Test for Content-Type header having a particular value\r",
									"pm.test(\"Content-Type header is application/json\", () => \r",
									"{\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"});\r",
									"\r",
									"//4. Schema Validation -- TO BE DONE\r",
									"\r",
									"var schema =\r",
									"{\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": \r",
									"  {\r",
									"    \"batchId\": \r",
									"    {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"classComments\": \r",
									"    {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"classDate\": \r",
									"    {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"classDescription\":\r",
									"    {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"classNo\": \r",
									"    {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"classNotes\": \r",
									"    {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"classRecordingPath\": \r",
									"    {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"classStaffId\": \r",
									"    {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"classTopic\": \r",
									"    {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"csId\": \r",
									"    {\r",
									"      \"type\": \"integer\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"batchId\",\r",
									"    \"classComments\",\r",
									"    \"classDate\",\r",
									"    \"classDescription\",\r",
									"    \"classNo\",\r",
									"    \"classNotes\",\r",
									"    \"classRecordingPath\",\r",
									"    \"classStaffId\",\r",
									"    \"classTopic\",\r",
									"    \"csId\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"pm.test(\"Validate Schema\"),function(){\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"}\r",
									"\r",
									"//SET TOTAL COUNT\r",
									"console.log(response.length)\r",
									"pm.collectionVariables.set(\"ClassCount_BeforeAdd\",response.length)"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "e843756a-8fd2-4ec1-816c-41a106115e94",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseURL}}/upcomingClasses/{{Student_id}}"
					},
					"response": []
				},
				{
					"name": "Negative- Upcoming Classes for particular Student Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "162e9c59-bf49-4cfb-b4e5-d569eed50eda",
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"//POSITIVE TEST VALIDATION\r",
									"//1. Status\r",
									"pm.test(\"Status code is 200\", function () \r",
									"{\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//2. Status Line\r",
									"pm.test(\"Status message is OK\", function ()\r",
									"{\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"//3. Test for Content-Type header having a particular value\r",
									"pm.test(\"Content-Type header is application/json\", () => \r",
									"{\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"});\r",
									"\r",
									"//4. Schema Validation -- TO BE DONE\r",
									" var jsonData=pm.response.json();\r",
									"    var schema =\r",
									"{\r",
									" \"$schema\": \"http://json-schema.org/draft-07/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": \r",
									"  {\r",
									"    \"batchId\": \r",
									"    {\r",
									"      \"type\": \"integer\",\r",
									"      \"minimum\": 0\r",
									"    },\r",
									"    \"classNo\": \r",
									"    {\r",
									"      \"type\": \"integer\",\r",
									"       \"minimum\": 1\r",
									"    },\r",
									"    \"classDate\":\r",
									"    {\r",
									"      \"type\": \"string\",\r",
									"      \"format\": \"date-time\"\r",
									"    },\r",
									"    \"classTopic\":\r",
									"    {\r",
									"      \"type\": \"string\",\r",
									"    },\r",
									"    \"classStatus\": \r",
									"    {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"classStaffId\": \r",
									"    {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"classDescription\": \r",
									"    {\r",
									"      \"type\": \"string\",\r",
									"    },\r",
									"    \"classComments\": \r",
									"    {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"classNotes\": \r",
									"    {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"classRecordingPath\": \r",
									"    {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"classScheduledDates\": \r",
									"    {\r",
									"      \"type\": \"array\",\r",
									"       \"items\": \r",
									"       {\r",
									"        \"type\": \"string\",\r",
									"        \"format\": \"date-time\"\r",
									"       },\r",
									"      \"minItems\": 1\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"batchId\",\r",
									"    \"classNo\",\r",
									"    \"classDate\",\r",
									"    \"classTopic\",\r",
									"    \"classStatus\",\r",
									"    \"classStaffId\",\r",
									"    \"classDescription\",\r",
									"    \"classComments\",\r",
									"    \"classNotes\",\r",
									"    \"classRecordingPath\",\r",
									"    \"classScheduledDates\"\r",
									"  ]\r",
									"}\r",
									"//SET TOTAL COUNT\r",
									"console.log(response.length)\r",
									"pm.collectionVariables.set(\"ClassCount_BeforeAdd\",response.length)"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "5027496e-c6bf-47ea-b821-5c26e4d8d671",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseURL}}/{{endPoint}}/{{Student_id}}"
					},
					"response": []
				},
				{
					"name": "Get All Recordings",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4b8734d8-b6bd-4f63-b803-b59dbb1adf9c",
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"//POSITIVE TEST VALIDATION\r",
									"//1. Status\r",
									"pm.test(\"Status code is 200\", function () \r",
									"{\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//2. Status Line\r",
									"pm.test(\"Status message is OK\", function ()\r",
									"{\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"//3. Test for Content-Type header having a particular value\r",
									"pm.test(\"Content-Type header is application/json\", () => \r",
									"{\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"});\r",
									"\r",
									"//4. Schema Validation -- TO BE DONE\r",
									"\r",
									"var schema =\r",
									"{\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": \r",
									"  {\r",
									"    \"batchId\": \r",
									"    {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"classComments\": \r",
									"    {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"classDate\": \r",
									"    {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"classDescription\":\r",
									"    {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"classNo\": \r",
									"    {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"classNotes\": \r",
									"    {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"classRecordingPath\": \r",
									"    {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"classStaffId\": \r",
									"    {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"classTopic\": \r",
									"    {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"csId\": \r",
									"    {\r",
									"      \"type\": \"integer\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"batchId\",\r",
									"    \"classComments\",\r",
									"    \"classDate\",\r",
									"    \"classDescription\",\r",
									"    \"classNo\",\r",
									"    \"classNotes\",\r",
									"    \"classRecordingPath\",\r",
									"    \"classStaffId\",\r",
									"    \"classTopic\",\r",
									"    \"csId\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"pm.test(\"Validate Schema\"),function(){\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"}\r",
									"\r",
									"//SET TOTAL COUNT\r",
									"console.log(response.length)\r",
									"pm.collectionVariables.set(\"ClassCount_BeforeAdd\",response.length)"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "4bae87aa-dc5f-445f-a9c8-9944f3374c37",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseURL}}/classrecordings"
					},
					"response": []
				},
				{
					"name": "Negative- Get All Recordings",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4b8734d8-b6bd-4f63-b803-b59dbb1adf9c",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "3d066e55-4d00-429b-99cd-91de6fceb547",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseURL}}/{{endPoint}}"
					},
					"response": []
				},
				{
					"name": "Get all Classes By Staff Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ab47f3c0-47e8-4418-9003-3ad576455204",
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"//POSITIVE TEST VALIDATION\r",
									"//1. Status\r",
									"pm.test(\"Status code is 200\", function () \r",
									"{\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//2. Status Line\r",
									"pm.test(\"Status message is OK\", function ()\r",
									"{\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"//3. Test for Content-Type header having a particular value\r",
									"pm.test(\"Content-Type header is application/json\", () => \r",
									"{\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"});\r",
									"\r",
									"//4. Schema Validation -- TO BE DONE\r",
									"\r",
									"var schema =\r",
									"{\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": \r",
									"  {\r",
									"    \"batchId\": \r",
									"    {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"classComments\": \r",
									"    {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"classDate\": \r",
									"    {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"classDescription\":\r",
									"    {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"classNo\": \r",
									"    {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"classNotes\": \r",
									"    {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"classRecordingPath\": \r",
									"    {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"classStaffId\": \r",
									"    {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"classTopic\": \r",
									"    {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"csId\": \r",
									"    {\r",
									"      \"type\": \"integer\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"batchId\",\r",
									"    \"classComments\",\r",
									"    \"classDate\",\r",
									"    \"classDescription\",\r",
									"    \"classNo\",\r",
									"    \"classNotes\",\r",
									"    \"classRecordingPath\",\r",
									"    \"classStaffId\",\r",
									"    \"classTopic\",\r",
									"    \"csId\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"pm.test(\"Validate Schema\"),function(){\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"}\r",
									"\r",
									"//SET TOTAL COUNT\r",
									"console.log(response.length)\r",
									"pm.collectionVariables.set(\"ClassCount_BeforeAdd\",response.length)"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "d529ddc8-1838-4145-9575-3e2339df1887",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseURL}}/classesByStaff/{{Staff_id}}"
					},
					"response": []
				},
				{
					"name": "Negative- Get all Classes By Staff Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ab47f3c0-47e8-4418-9003-3ad576455204",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "ddf85210-0931-4859-98e6-09b9cddfa789",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseURL}}/classesByStaff/{{Staff_id}}"
					},
					"response": []
				},
				{
					"name": "Get all Classes by Batch Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f535f038-e7b3-4c30-b164-067147d5ab35",
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"//POSITIVE TEST VALIDATION\r",
									"//1. Status\r",
									"pm.test(\"Status code is 200\", function () \r",
									"{\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//2. Status Line\r",
									"pm.test(\"Status message is OK\", function ()\r",
									"{\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"//3. Test for Content-Type header having a particular value\r",
									"pm.test(\"Content-Type header is application/json\", () => \r",
									"{\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"});\r",
									"\r",
									"//4. Schema Validation -- TO BE DONE\r",
									"\r",
									"var schema =\r",
									"{\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": \r",
									"  {\r",
									"    \"batchId\": \r",
									"    {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"classComments\": \r",
									"    {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"classDate\": \r",
									"    {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"classDescription\":\r",
									"    {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"classNo\": \r",
									"    {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"classNotes\": \r",
									"    {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"classRecordingPath\": \r",
									"    {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"classStaffId\": \r",
									"    {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"classTopic\": \r",
									"    {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"csId\": \r",
									"    {\r",
									"      \"type\": \"integer\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"batchId\",\r",
									"    \"classComments\",\r",
									"    \"classDate\",\r",
									"    \"classDescription\",\r",
									"    \"classNo\",\r",
									"    \"classNotes\",\r",
									"    \"classRecordingPath\",\r",
									"    \"classStaffId\",\r",
									"    \"classTopic\",\r",
									"    \"csId\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"pm.test(\"Validate Schema\"),function(){\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"}\r",
									"\r",
									"//SET TOTAL COUNT\r",
									"console.log(response.length)\r",
									"pm.collectionVariables.set(\"ClassCount_BeforeAdd\",response.length)"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "f6b3f093-ac12-430e-8758-912b65b6900d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseURL}}/classesbyBatch/{{batchID_ModuleIntegration}}"
					},
					"response": []
				},
				{
					"name": "Negative- Get all Classes by Batch Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f535f038-e7b3-4c30-b164-067147d5ab35",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "bb4f7c99-b81d-4808-8d9b-5fc6cc7e76ff",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseURL}}/classesbyBatch/{{batchID_ModuleIntegration}}"
					},
					"response": []
				},
				{
					"name": "Update New Class",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d350511c-fc91-4538-99ee-cb45faff617e",
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"//POSITIVE TEST VALIDATION\r",
									"//1. Status\r",
									"pm.test(\"Status code is 200\", function () \r",
									"{\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//2. Status Line\r",
									"pm.test(\"Status message is OK\", function ()\r",
									"{\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"//3. Test for Content-Type header having a particular value\r",
									"pm.test(\"Content-Type header is application/json\", () => \r",
									"{\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"});\r",
									"\r",
									"//4. Schema Validation -- TO BE DONE\r",
									"\r",
									"var schema =\r",
									"{\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": \r",
									"  {\r",
									"    \"batchId\": \r",
									"    {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"classComments\": \r",
									"    {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"classDate\": \r",
									"    {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"classDescription\":\r",
									"    {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"classNo\": \r",
									"    {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"classNotes\": \r",
									"    {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"classRecordingPath\": \r",
									"    {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"classStaffId\": \r",
									"    {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"classTopic\": \r",
									"    {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"csId\": \r",
									"    {\r",
									"      \"type\": \"integer\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"batchId\",\r",
									"    \"classComments\",\r",
									"    \"classDate\",\r",
									"    \"classDescription\",\r",
									"    \"classNo\",\r",
									"    \"classNotes\",\r",
									"    \"classRecordingPath\",\r",
									"    \"classStaffId\",\r",
									"    \"classTopic\",\r",
									"    \"csId\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"pm.test(\"Validate Schema\"),function(){\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"}\r",
									"\r",
									"//SET TOTAL COUNT\r",
									"console.log(response.length)\r",
									"pm.collectionVariables.set(\"ClassCount_BeforeAdd\",response.length)"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "9a632819-3f4b-4b51-acee-6ce82f35223f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{ \r\n\"csId\": {{csId}},\r\n\"batchId\": {{batchId}},\r\n\"classNo\": {{updateclassNo}},\r\n\"classDate\": \"{{updateclassDate}}\",\r\n\"classTopic\": \"{{updateclassTopic}}\",\r\n\"classStatus\": \"{{updateclassStatus}}\",\r\n\"classStaffId\": \"{{classStaffId}}\",\r\n\"classDescription\": \"{{updateclassDescription}}\",\r\n\"classComments\": \"{{updateclassComments}}\" ,\r\n\"classNotes\": \"{{updateclassNotes}}\",\r\n\"classRecordingPath\": \"{{updateclassRecordingPath}}\",\r\n\"classScheduledDates\": [\"{{updateclassScheduledDates}}\"]\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}/updateClass/{{classId}}"
					},
					"response": []
				},
				{
					"name": "Negative- Update New Class",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d350511c-fc91-4538-99ee-cb45faff617e",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "9f88673f-100c-41fe-95e0-a9b6c7c5979c",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{ \r\n\"csId\": {{csId}},\r\n\"batchId\": {{batchId}},\r\n\"classNo\": {{updateclassNo}},\r\n\"classDate\": \"{{updateclassDate}}\",\r\n\"classTopic\": \"{{updateclassTopic}}\",\r\n\"classStatus\": \"{{updateclassStatus}}\",\r\n\"classStaffId\": \"{{classStaffId}}\",\r\n\"classDescription\": \"{{updateclassDescription}}\",\r\n\"classComments\": \"{{updateclassComments}}\" ,\r\n\"classNotes\": \"{{updateclassNotes}}\",\r\n\"classRecordingPath\": \"{{updateclassRecordingPath}}\",\r\n\"classScheduledDates\": [\"{{updateclassScheduledDates}}\"]\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}/updateClass/{{classId}}"
					},
					"response": []
				}
			],
			"id": "94a0a82c-0257-4b0a-9327-0bed210d9df1"
		},
		{
			"name": "Tear Down and Logout",
			"item": [
				{
					"name": "Logout",
					"id": "6c64072c-651e-4ab2-b31b-8741802b1701",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseURL}}//logoutlms"
					},
					"response": []
				},
				{
					"name": "DeletebatchbyBatchId Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1c22dca5-5599-48da-93e9-54e395d43d6b",
								"exec": [
									"//const response = pm.response.json();\r",
									"console.log(pm.response) //doesnt contain the message displayed\r",
									"//Happy Path - Positive\r",
									"if(pm.response.to.have.status(200)){\r",
									"\r",
									"    //1. Status Code\r",
									"    pm.test(\"Status code is 200\", function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    });\r",
									"\r",
									"    //2. Status Line\r",
									"    pm.test(\"Status message is OK\", function () {\r",
									"        pm.response.to.have.status(\"OK\");\r",
									"    });\r",
									"\r",
									"    //3. Test for Content-Type header having a particular value\r",
									"    pm.test(\"Content-Type header is application/json\", () => {\r",
									"        pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"    });\r",
									"\r",
									"    //4. Schema Validation -- TO BE DONE\r",
									"\r",
									"    //5. Data Validation   DEFECT!! ERROR ENCOUNTERED --> JSONError: Unexpected token 'M' at 1:1 Message: Batch with Id-9684 deleted Successfully! ^  -- CANNOT VALIDATE DELETE MSG SINCE  Unexpected token 'M' at 1:1: This means that Postman was expecting JSON data (starting with {, [, or other JSON-valid characters), but it found the character 'M' (the first character of \"Message: Batch with Id-9684 deleted Successfully!\").  Message: Batch with Id-9684 deleted Successfully!: This is the raw text from your response body, which is not in valid JSON format\r",
									"    /*\r",
									"    pm.test(\"Validate stored Batch data with response data\", function () {\r",
									"        console.log('response in using JSON.stringify() = '+JSON.stringify(pm.response.json()));\r",
									"        pm.expect(JSON.stringify(pm.response.json())).to.include('Message: Batch with Id-'+9684+' deleted Successfully!');\r",
									"    });\r",
									"    */\r",
									"    //5. Validate Delete Program status has changed to Inactive\r",
									"        // Programmatically make a GET request using the ProgramID\r",
									"    /*    pm.sendRequest({\r",
									"            url:  pm.environment.get(\"baseURL\") + `/batches/batchId/` + currentBatch , \r",
									"            method: 'GET',\r",
									"            header: {\r",
									"                'Authorization': 'Bearer ' + pm.collectionVariables.get(\"BearerToken\") \r",
									"            }\r",
									"        }, function (err, res) {\r",
									"            if (err) {\r",
									"                pm.test(\"GET BatchByID request failed after Batch Deletion\", function() {\r",
									"                  console.log(err);\r",
									"                return;\r",
									"                });\r",
									"            } else {\r",
									"                pm.test(\"GET BatchByID request Successful after Batch Deletion\", function() {\r",
									"\r",
									"                    pm.expect(res.json().batchStatus).to.eql(\"Inactive\")\r",
									"\r",
									"                    if(res.json().batchId === pm.collectionVariables.get(\"batchID_Mandatory\")){\r",
									"                        // remove the batch info at collection level\r",
									"                        pm.collectionVariables.unset(\"batchID_Mandatory\");\r",
									"                        pm.collectionVariables.unset(\"batchName_Mandatory\")\r",
									"                        pm.collectionVariables.unset(\"batchDesc_Mandatory\")\r",
									"                        pm.collectionVariables.unset(\"batchNoOfClasses_Mandatory\")\r",
									"                        pm.collectionVariables.unset(\"batchStatus_Mandatory\")  \r",
									"                    }\r",
									"                    else{\r",
									"\r",
									"                        // remove the batch info at collection level\r",
									"                        pm.collectionVariables.unset(\"batchID_All\");\r",
									"                        pm.collectionVariables.unset(\"batchName_All\")\r",
									"                        pm.collectionVariables.unset(\"batchDesc_All\")\r",
									"                        pm.collectionVariables.unset(\"batchNoOfClasses_All\")\r",
									"                        pm.collectionVariables.unset(\"batchStatus_All\") \r",
									"                    }   \r",
									"                });\r",
									"\r",
									"                \r",
									"            }\r",
									"    });*/\r",
									"\r",
									"\r",
									"\r",
									"}\r",
									"\r",
									"\r",
									"/*\r",
									"{\r",
									"    \"message\": \"Batch not found with Id : 91799 \",\r",
									"    \"success\": false\r",
									"}\r",
									" */\r",
									"/*\r",
									"{\r",
									"    \"message\": \"programBatch with name activejava43456 not found\",\r",
									"    \"success\": false\r",
									"}\r",
									" */\r",
									"\r",
									"\r",
									"/*\r",
									"{\r",
									"    \"message\": \"Batch id not found or not exists 925122\",\r",
									"    \"success\": false\r",
									"} \r",
									"*/"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "eaee0068-97f3-4ffe-bb5b-e62eeb433c10",
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "f5f7f6fd-e91c-453d-80b2-234994b7288c",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/batches/:id",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"batches",
								":id"
							],
							"variable": [
								{
									"id": "8ad4056f-3968-445b-9abd-6f59395d0e04",
									"key": "id",
									"value": "9877"
								}
							]
						}
					},
					"response": [
						{
							"id": "a8cb1d51-a3e7-48cf-ac5d-3192c611c3a9",
							"name": "DeletebatchbyBatchIdResponse",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/batches/:id",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"batches",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "9865"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Cowboy"
								},
								{
									"key": "Report-To",
									"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1741625597&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=PDLt%2B00Gslhxfgkc1x%2FIEozuZjdj88gMBe2QrUbcjjE%3D\"}]}"
								},
								{
									"key": "Reporting-Endpoints",
									"value": "heroku-nel=https://nel.heroku.com/reports?ts=1741625597&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=PDLt%2B00Gslhxfgkc1x%2FIEozuZjdj88gMBe2QrUbcjjE%3D"
								},
								{
									"key": "Nel",
									"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-Xss-Protection",
									"value": "0"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, max-age=0, must-revalidate"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "0"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000 ; includeSubDomains"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Content-Length",
									"value": "49"
								},
								{
									"key": "Date",
									"value": "Mon, 10 Mar 2025 16:53:17 GMT"
								},
								{
									"key": "Via",
									"value": "1.1 vegur"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "Message: Batch with Id-9865 deleted Successfully!"
						}
					]
				}
			],
			"id": "1408e38f-5719-4e08-b9a8-d3ccbd19a17b"
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": {
			"token": "{{BearerToken}}"
		}
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "4723bcf3-a79c-41bb-8e22-a16b335e1afd",
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"// Load data from json file to collection variable 'requestData'\r",
					"if (typeof pm.variables.get('requestData') !== 'object') {\r",
					"    pm.variables.set('requestData', pm.iterationData.toObject()); \r",
					"}\r",
					"\r",
					"// Read input data from collection variable 'requestData'\r",
					"const requestData = pm.variables.get('requestData');\r",
					"//console.log('requestData', requestData); //in object form\r",
					"\r",
					"// If 'requestData'/input data is empty  Following block is for error handling, just in case we are not passing any data file\r",
					"if (typeof requestData !== 'object' || Object.keys(requestData).length === 0) {\r",
					"    console.log('No external data provided/data set is empty');\r",
					"    return;\r",
					"}\r",
					"\r",
					"// Find current request's data  contains request’s name along with list of data array\r",
					"const currentRequest = requestData.requests.find(({ name }) => name === pm.info.requestName); \r",
					"\r",
					"// If no data found for current request\r",
					"if (!currentRequest) {\r",
					"    console.log(`Request ${pm.info.requestName} has no data.`);\r",
					"    return;\r",
					"}\r",
					"\r",
					"// If data found for current request\r",
					"if (currentRequest && currentRequest.data && currentRequest.data.length > 0) {\r",
					"    console.log(\"Size of current request data set = \" + currentRequest.data.length)\r",
					"    const currentDataSet = currentRequest.data.shift(); //object\r",
					"        \r",
					"    if (currentDataSet) {\r",
					"        Object.entries(currentDataSet).forEach(([key, value]) => {\r",
					"            pm.collectionVariables.set(key,value)\r",
					"        });\r",
					"\r",
					"        pm.collectionVariables.set(\"requestData\", JSON.stringify(requestData));\r",
					"\r",
					"        if (currentRequest.data.length > 0) {\r",
					"            pm.execution.setNextRequest(pm.info.requestName);\r",
					"        }\r",
					"    } else {\r",
					"        console.error('No variables found for this request.');\r",
					"    }\r",
					"}\r",
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "283d6153-3b75-42f6-842e-a30edc3df6fb",
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"//Add a retry function and see if it works"
				]
			}
		}
	],
	"variable": [
		{
			"key": "BearerToken",
			"value": ""
		},
		{
			"key": "Admin_UserID",
			"value": ""
		},
		{
			"key": "programID_ModuleIntegration",
			"value": ""
		},
		{
			"key": "programName_ModuleIntegration",
			"value": ""
		},
		{
			"key": "programDesc_ModuleIntegration",
			"value": ""
		},
		{
			"key": "programStatus_ModuleIntegration",
			"value": ""
		},
		{
			"key": "BatchCount_BeforeAdd",
			"value": ""
		},
		{
			"key": "batchID_ModuleIntegration",
			"value": ""
		},
		{
			"key": "batchName_ModuleIntegration",
			"value": ""
		},
		{
			"key": "batchNoOfClasses_ModuleIntegration",
			"value": ""
		},
		{
			"key": "batchDesc_ModuleIntegration",
			"value": ""
		},
		{
			"key": "batchStatus_ModuleIntegration",
			"value": ""
		},
		{
			"key": "scenarioName",
			"value": ""
		},
		{
			"key": "httpMethod",
			"value": ""
		},
		{
			"key": "endPoint",
			"value": ""
		},
		{
			"key": "baseURL",
			"value": ""
		},
		{
			"key": "statusCode",
			"value": ""
		},
		{
			"key": "statusLine",
			"value": ""
		},
		{
			"key": "requestData",
			"value": ""
		},
		{
			"key": "pathParameter",
			"value": ""
		},
		{
			"key": "message",
			"value": ""
		},
		{
			"key": "userLoginEmailId",
			"value": ""
		},
		{
			"key": "password",
			"value": ""
		},
		{
			"key": "user_id",
			"value": "",
			"type": "string"
		},
		{
			"key": "role_id",
			"value": "",
			"type": "string"
		},
		{
			"key": "Student_id",
			"value": "",
			"type": "string"
		},
		{
			"key": "Staff_id",
			"value": "",
			"type": "string"
		},
		{
			"key": "ClassCount_BeforeAdd",
			"value": ""
		}
	]
}