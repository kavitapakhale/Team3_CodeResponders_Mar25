{
	"info": {
		"_postman_id": "6b92f49d-5788-4a9d-a692-c53cab4ad45f",
		"name": "Team3_CodeResponders",
		"schema": "https://schema.postman.com/json/collection/v2.0.0/collection.json"
	},
	"item": [
		{
			"name": "Login",
			"item": [
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b51eb5c2-d1aa-471e-9042-a8d29be81441",
								"exec": [
									"const response = pm.response.json()\r",
									"\r",
									"//Validate status 200, roles value and  + response schema\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//Validate status being Active\r",
									"pm.test(\"User Status is Active\", function () {\r",
									"    pm.expect(response.status).to.equal(\"Active\");\r",
									"});\r",
									"\r",
									"//Validate Admin Roles\r",
									"pm.test(\"User have both Admin and Staff roles assigned\", function () {\r",
									"    const roles = response.roles\r",
									"    pm.expect(roles).to.include(\"ROLE_ADMIN\");\r",
									"    pm.expect(roles).to.include(\"ROLE_STAFF\");\r",
									"});\r",
									"\r",
									"\r",
									"//Set some values at collection level\r",
									"//1. Set Bearer Token\r",
									"pm.collectionVariables.set(\"BearerToken\", response.token);\r",
									"\r",
									"//2. set Admin UserID\r",
									"pm.collectionVariables.set(\"Admin_UserID\", response.userId);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "7b7a0350-53f3-46a6-abe0-628e3ea33d12",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n \"password\": \"{{password}}\",\r\n \"userLoginEmailId\": \"{{userLoginEmailId}}\"\r\n } ",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}/login"
					},
					"response": []
				},
				{
					"name": "Negative - Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b51eb5c2-d1aa-471e-9042-a8d29be81441",
								"exec": [
									"//INCORRECT ENDPOINT SHOULD GIVE 404 BOT FOUND. DEFECT --> GETTING 401 UNAUTHORIZED\r",
									"\r",
									"const expStatusCode = pm.collectionVariables.get(\"statusCode\");\r",
									"const expStatusLine = pm.collectionVariables.get(\"statusLine\");\r",
									"const expHttpMethod = pm.collectionVariables.get(\"httpMethod\");\r",
									"const scenarioName = pm.collectionVariables.get(\"scenarioName\");\r",
									"const expMessage = pm.collectionVariables.get(\"message\");\r",
									"\r",
									"\r",
									"//NEGATIVE TEST VALIDATION\r",
									"//1. Status\r",
									"pm.test(`Status code is ${expStatusCode}`, function () {\r",
									"    pm.response.to.have.status(expStatusCode);\r",
									"});\r",
									"\r",
									"//2. Status Line\r",
									"pm.test(`Status message is ${expStatusLine}`, function () {\r",
									"    pm.response.to.have.status(expStatusLine);\r",
									"});\r",
									"\r",
									"//3. Scenario specific Tests\r",
									"if(scenarioName === \"Incorrect Http Method\") {\r",
									"    pm.test(`Validate ${scenarioName} JSON Response msg`, () => {\r",
									"        pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"        pm.expect(pm.response.json().message).to.include(`Request method '${expHttpMethod}' is not supported`);\r",
									"        pm.expect(pm.response.json().success).to.eql(false);\r",
									"        \r",
									"    });\r",
									"}\r",
									"\r",
									"if(scenarioName.includes(\"Incorrect Endpoint\")) {\r",
									"    pm.test(`Validate ${scenarioName}  Response msg`, () => {\r",
									"        pm.expect(pm.response.headers.get('Content-Type')).to.includes('text/plain');\r",
									"        pm.expect(pm.response.text()).to.eql(`Invalid endpoint`);\r",
									"        \r",
									"    });\r",
									"}\r",
									"\r",
									"if(scenarioName === \"Incorrect BaseURL\") {\r",
									"    pm.test(`Validate ${scenarioName} Response msg`, () => {\r",
									"        pm.expect(pm.response.headers.get('Content-Type')).to.include('text/html');\r",
									"        pm.expect(pm.response.text()).to.include('<title>Heroku | Application Error</title>');\r",
									"        \r",
									"    });\r",
									"}\r",
									"\r",
									"pm.test(`Validate ${scenarioName} Response msg`, () => {\r",
									"        pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"        pm.expect(pm.response.json().message).to.include(expMessage);\r",
									"        pm.expect(pm.response.json().success).to.eql(false);\r",
									"        \r",
									"    });\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "3d6426d2-99aa-40a9-9493-c07787f807e3",
								"exec": [
									"setTimeout(() => {}, 1000);\r",
									"console.log(\"Inside pre-requisite\")\r",
									"var scenarioName = pm.collectionVariables.get(\"scenarioName\");\r",
									"console.log(\"Scenario Name \"+scenarioName)\r",
									"\r",
									"//For every iteration, set the credentials and baseURL to base true values\r",
									"pm.variables.set(\"baseURL\", pm.environment.get('baseURL'))\r",
									"pm.variables.set(\"userLoginEmailId\", pm.environment.get('userLoginEmailId'))\r",
									"pm.variables.set(\"password\", pm.environment.get('password'))\r",
									"\r",
									"\r",
									"//Tweak data based on scenario needs\r",
									"if(scenarioName === \"Incorrect Http Method\"){\r",
									"    pm.request.method = pm.collectionVariables.get(\"httpMethod\");\r",
									"}\r",
									"else if(scenarioName === \"Incorrect BaseURL\"){\r",
									"    pm.variables.set(\"baseURL\", pm.collectionVariables.get('baseURL'))\r",
									"}\r",
									"else if(scenarioName === \"Incorrect Content-Type\"){\r",
									"    var contentType = \"application/xml\"; \r",
									"\r",
									"    // Set the header for Content-Type\r",
									"    pm.request.headers.add({\r",
									"        key: \"Content-Type\",\r",
									"        value: contentType\r",
									"    });\r",
									"}\r",
									"else if(scenarioName === \"Incorrect UserLogin\"){\r",
									"    pm.variables.set(\"userLoginEmailId\", pm.collectionVariables.get('userLoginEmailId'))\r",
									"}\r",
									"else if(scenarioName === \"Empty Credentials\"){\r",
									"    pm.variables.set(\"userLoginEmailId\", \"\")\r",
									"    pm.variables.set(\"password\", \"\")\r",
									"}\r",
									"else if(scenarioName === \"Empty UserLogin\"){\r",
									"    pm.variables.set(\"userLoginEmailId\", \"\")\r",
									"}\r",
									"else if(scenarioName === \"Empty password\"){\r",
									"    pm.variables.set(\"password\", \"\")\r",
									"}\r",
									"else if(scenarioName === \"Incorrect UserLogin\"){\r",
									"    pm.variables.set(\"password\", pm.collectionVariables.get(\"userLoginEmailId\"))\r",
									"}\r",
									"else if(scenarioName.includes(\"space\")){\r",
									"    pm.variables.set(\"password\", pm.environment.get(\"password\"+\" \")) //add space to correct password value at environment level\r",
									"}\r",
									"else {\r",
									"    pm.variables.set(\"password\", pm.collectionVariables.get(\"password\"))\r",
									"}\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "d1c067bb-29a8-4e14-bfd5-99de6728fcc1",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n \"password\": \"{{password}}\",\r\n \"userLoginEmailId\": \"{{userLoginEmailId}}\"\r\n } \r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}/{{endPoint}}"
					},
					"response": []
				}
			],
			"id": "62ebfba9-b3c2-4cb7-a492-dc55d0cd8502"
		},
		{
			"name": "Program",
			"item": [
				{
					"name": "AllPrograms",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "194cf698-6aee-4d1a-8aba-6e5589f54743",
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"//POSITIVE TEST VALIDATION\r",
									"//1. Status\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//2. Status Line\r",
									"pm.test(\"Status message is OK\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"//3. Test for Content-Type header having a particular value\r",
									"pm.test(\"Content-Type header is application/json\", () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"});\r",
									"\r",
									"//4. Schema Validation -- TO BE DONE\r",
									"const schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"array\",\r",
									"  \"items\": [\r",
									"    {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"programId\": {\r",
									"          \"type\": \"integer\"\r",
									"        },\r",
									"        \"programName\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"programDescription\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"programStatus\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"creationTime\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"lastModTime\": {\r",
									"          \"type\": \"string\"\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"programId\",\r",
									"        \"programName\",\r",
									"        \"programDescription\",\r",
									"        \"programStatus\",\r",
									"        \"creationTime\",\r",
									"        \"lastModTime\"\r",
									"      ]\r",
									"    }\r",
									"  ]\r",
									"}\r",
									"\r",
									"//SET TOTAL COUNT\r",
									"console.log(response.length)\r",
									"pm.collectionVariables.set(\"ProgramCount_BeforeAdd\",response.length)\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "862fb363-ff92-457a-95f8-1b373ed7112d",
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "dd26bcfe-bfd0-4488-b4a9-39e51467c9c8",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseURL}}/allPrograms"
					},
					"response": []
				},
				{
					"name": "Negative - AllPrograms",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "e152b533-6218-4ec0-bc43-a5d3ae19ea42",
								"exec": [
									"var scenarioName = pm.collectionVariables.get(\"scenarioName\");\r",
									"console.log(\"Scenario Name \"+scenarioName)\r",
									"\r",
									"if(scenarioName === \"Incorrect Http Method\"){\r",
									"    pm.request.method = pm.collectionVariables.get(\"httpMethod\");;\r",
									"}\r",
									"\r",
									"if(scenarioName === \"Incorrect BaseURL\"){\r",
									"    pm.variables.set(\"baseURL\", pm.collectionVariables.get('baseURL'))\r",
									"}\r",
									"\r",
									"if(scenarioName === \"No Auth\"){\r",
									"    pm.variables.set(\"BearerToken\",\"\")\r",
									"    pm.variables.set(\"baseURL\", pm.collectionVariables.get('baseURL'))\r",
									"}\r",
									"\r",
									"/*\r",
									"In Postman, the priority for variable resolution is as follows:\r",
									"\r",
									"Data Variables (from the CSV or JSON file used in collection runs) — Highest priority\r",
									"Environment Variables — Second priority\r",
									"Global Variables — Third priority\r",
									"Collection Variables — Lowest priority\r",
									" */\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "2932fa53-5b2d-4f5d-9d5a-edf6e7de20d6",
								"exec": [
									"const expStatusCode = pm.collectionVariables.get(\"statusCode\");\r",
									"const expStatusLine = pm.collectionVariables.get(\"statusLine\");\r",
									"const expHttpMethod = pm.collectionVariables.get(\"httpMethod\");\r",
									"const scenarioName = pm.collectionVariables.get(\"scenarioName\");\r",
									"\r",
									"//NEGATIVE TEST VALIDATION\r",
									"//1. Status\r",
									"pm.test(`Status code is ${expStatusCode}`, function () {\r",
									"    pm.response.to.have.status(expStatusCode);\r",
									"});\r",
									"\r",
									"//2. Status Line\r",
									"pm.test(`Status message is ${expStatusLine}`, function () {\r",
									"    pm.response.to.have.status(expStatusLine);\r",
									"});\r",
									"\r",
									"//3. Scenario specific Tests\r",
									"if(scenarioName === \"Incorrect Http Method\") {\r",
									"    pm.test(\"Validate Incorrect HTTP Method JSON Response msg\", () => {\r",
									"        pm.expect(pm.response.json().message).to.eql(`Request method '${expHttpMethod}' is not supported`);\r",
									"        pm.expect(pm.response.json().success).to.eql(false);\r",
									"        \r",
									"    });\r",
									"}\r",
									"\r",
									"if(scenarioName === \"Incorrect Endpoint\") {\r",
									"    pm.test(\"Validate Incorrect Endpoint Response msg\", () => {\r",
									"        pm.expect(pm.response.headers.get('Content-Type')).to.include('text/plain');\r",
									"        pm.expect(pm.response.text()).to.eql(`Invalid endpoint`);\r",
									"        \r",
									"    });\r",
									"}\r",
									"\r",
									"if(scenarioName === \"Incorrect BaseURL\") {\r",
									"    pm.test(\"Validate Incorrect BaseURL Response msg\", () => {\r",
									"        pm.expect(pm.response.headers.get('Content-Type')).to.include('text/html');\r",
									"        pm.expect(pm.response.text()).to.include('<title>Heroku | Application Error</title>');\r",
									"        \r",
									"    });\r",
									"}\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "092211b9-ef01-44aa-8912-dbfe073f6ac5",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseURL}}/{{endPoint}}"
					},
					"response": []
				},
				{
					"name": "AddNewProgram_Mandatory",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "adb5e00d-dbb4-4492-9fb4-ee85b63be627",
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"//POSITIVE TEST VALIDATION\r",
									"if(pm.response.to.have.status(201)){ // HAPPY PATH\r",
									"\r",
									"    //1. Status\r",
									"    pm.test(\"Status code is 201\", function () {\r",
									"        pm.response.to.have.status(201);\r",
									"    });\r",
									"\r",
									"    //2. Status Line\r",
									"    pm.test(\"Status message is Created\", function () {\r",
									"        pm.response.to.have.status(\"Created\");\r",
									"    });\r",
									"\r",
									"    //3. Test for Content-Type header having a particular value\r",
									"    pm.test(\"Content-Type header is application/json\", () => {\r",
									"        pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"    });\r",
									"\r",
									"    //4. Schema Validation -- TO BE DONE\r",
									"\r",
									"    //5. Request VS Response Body Validation\r",
									"    pm.test(\"Program details in Request and Response matches\", function () {\r",
									"\r",
									"        // Get the raw request body and Parse it to JSON\r",
									"        const rawRequestBody = pm.request.body.raw;\r",
									"        const requestBody = JSON.parse(rawRequestBody);\r",
									"\r",
									"        pm.expect(response).to.have.property(\"programId\")\r",
									"        pm.expect(requestBody.programName).to.eql(response.programName);\r",
									"        pm.expect(requestBody.programDescription).to.eql(response.programDescription);\r",
									"        pm.expect(requestBody.programStatus).to.eql(response.programStatus);\r",
									"\r",
									"    });\r",
									"\r",
									"    //GET ALL PROGRAMS COUNT AFTER PROGRAM CREATION\r",
									"    pm.test(\"Check Total Program Count increased by 1\", function () {\r",
									"        \r",
									"        // Perform GET request programmatically\r",
									"        pm.sendRequest({\r",
									"            url: pm.environment.get(\"baseURL\")+'/allPrograms',  \r",
									"            method: 'GET',\r",
									"            header: {\r",
									"               'Authorization': 'Bearer ' + pm.collectionVariables.get(\"BearerToken\") \r",
									"            }\r",
									"        }, function (err, res) {\r",
									"            if (err) {\r",
									"                console.log(err);\r",
									"                return;\r",
									"            } else {\r",
									"               \r",
									"                const programs = res.json(); \r",
									"                const count = programs.length; \r",
									"\r",
									"                    pm.expect(programs).to.include(response.programName);\r",
									"                    pm.expect(count).to.equal((pm.collectionVariables.get(\"ProgramCount_BeforeAdd\"))+1); \r",
									"                \r",
									"            }\r",
									"        });\r",
									"    });\r",
									"\r",
									"}\r",
									"\r",
									"\r",
									"//SET VALUE AT RUN TIME (LATER CHECK IF THIS COULD BE TRANSFERRED AS PROGRAM OBJECT!!!!)\r",
									"pm.collectionVariables.set(\"programID_Mandatory\", response.programId)\r",
									"pm.collectionVariables.set(\"programName_Mandatory\", response.programName)\r",
									"pm.collectionVariables.set(\"programDesc_Mandatory\", response.programDescription)\r",
									"pm.collectionVariables.set(\"programStatus_Mandatory\", response.programStatus)\r",
									"\r",
									"\r",
									"//NEGATIVE TEST VALIDATION\r",
									"\r",
									"\r",
									"/**\r",
									" * status code = 400\r",
									"{   \r",
									"    \"message\": \"programName Must contain only letters and sometimes hyphens\",\r",
									"    \"success\": false\r",
									"}\r",
									" */\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "98767db8-9111-45b7-b2ca-b176472c0380",
								"exec": [
									"function getRandomLetterString() {\r",
									"    const letters = 'abcdefghijklmnopqrstuvwxyz'; // Available letters\r",
									"    let randomString = '';\r",
									"    \r",
									"    // Loop 3 times to generate a 3-letter string\r",
									"    for (let i = 0; i < 3; i++) {\r",
									"        const randomIndex = Math.floor(Math.random() * letters.length); // Get a random index\r",
									"        randomString += letters[randomIndex]; // Add the random letter to the string\r",
									"    }\r",
									"\r",
									"    return randomString;\r",
									"}\r",
									"\r",
									"var programName_Mandatory_data = 'SeleniumPython-Ten'+ getRandomLetterString();\r",
									"pm.variables.set(\"programName_Mandatory_data\",programName_Mandatory_data)\r",
									"console.log('randome data ' + programName_Mandatory_data)\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "1e18e14e-83eb-4bee-b60f-505c1ccbb5c4",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n \"programDescription\":\"\",\r\n \"programName\":\"{{programName_Mandatory_data}}\", //mandatory\r\n \"programStatus\":\"Active\" //mandatory\r\n }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}/saveprogram"
					},
					"response": []
				},
				{
					"name": "Negative - AddNewProgram_Mandatory",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "adb5e00d-dbb4-4492-9fb4-ee85b63be627",
								"exec": [
									"pm.test(\"Incorrect BaseURL Test\", function () {\r",
									"    // Get the raw response text (HTML)\r",
									"    const responseText = pm.response.text();\r",
									"\r",
									"    // Log the raw HTML response to the console\r",
									"    console.log(responseText);\r",
									"\r",
									"    // Check if the response contains some specific text or HTML element\r",
									"    pm.expect(responseText).to.include('<title>Heroku | Application Error</title>');\r",
									"});\r",
									"\r",
									"//const response = pm.response.json();\r",
									"\r",
									"//delete later program id = 17692, 17693\r",
									"\r",
									"//NEGATIVE TEST VALIDATION\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "98767db8-9111-45b7-b2ca-b176472c0380",
								"exec": [
									"function getRandomLetterString() {\r",
									"    const letters = 'abcdefghijklmnopqrstuvwxyz'; // Available letters\r",
									"    let randomString = '';\r",
									"    \r",
									"    // Loop 3 times to generate a 3-letter string\r",
									"    for (let i = 0; i < 3; i++) {\r",
									"        const randomIndex = Math.floor(Math.random() * letters.length); // Get a random index\r",
									"        randomString += letters[randomIndex]; // Add the random letter to the string\r",
									"    }\r",
									"\r",
									"    return randomString;\r",
									"}\r",
									"\r",
									"var programName_Mandatory_data = 'SeleniumPython-Ten'+ getRandomLetterString();\r",
									"//var programName_Mandatory_data = '3-Ten';\r",
									"\r",
									"pm.variables.set(\"programName_Mandatory_data\",programName_Mandatory_data)\r",
									"console.log('randome data ' + programName_Mandatory_data)\r",
									"\r",
									"/**\r",
									" * status code = 400\r",
									"{   \r",
									"    \"message\": \"programName Must contain only letters and sometimes hyphens\",\r",
									"    \"success\": false\r",
									"}\r",
									" */\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "0a4a4a7c-827c-49b1-864b-04968f88d9bf",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "/*{\r\n \"programDescription\":\"description-desc\",\r\n \"programName\": \"{{programName_Mandatory_data}}\", //mandatory\r\n //\"programName\":true, //mandatory\r\n \"programStatus\": \"Active\" //mandatory\r\n}*/\r\n\r\n{\r\n \"programDescription\":\"\",\r\n //\"programName\": \"{{programName_Mandatory_data}}\", //mandatory\r\n \"programName\":\"\", //mandatory\r\n \"programStatus\": \"\" //mandatory\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "https://lms-hackthon-feb25-803334c87fbe.herokuapp.com/lms/saveprogram"
					},
					"response": []
				},
				{
					"name": "AddNewProgram_AllData",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "97f11445-4b2d-4a2f-a5c3-fa351beef767",
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"//POSITIVE TEST VALIDATION\r",
									"if(pm.response.to.have.status(201)){ // HAPPY PATH\r",
									"\r",
									"    //1. Status\r",
									"    pm.test(\"Status code is 201\", function () {\r",
									"        pm.response.to.have.status(201);\r",
									"    });\r",
									"\r",
									"    //2. Status Line\r",
									"    pm.test(\"Status message is Created\", function () {\r",
									"        pm.response.to.have.status(\"Created\");\r",
									"    });\r",
									"\r",
									"    //3. Test for Content-Type header having a particular value\r",
									"    pm.test(\"Content-Type header is application/json\", () => {\r",
									"        pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"    });\r",
									"\r",
									"    //4. Schema Validation -- TO BE DONE\r",
									"\r",
									"    //5. Request VS Response Body Validation\r",
									"    pm.test(\"Program name matches\", function () {\r",
									"\r",
									"        // Get the raw request body and Parse it to JSON\r",
									"        const rawRequestBody = pm.request.body.raw;\r",
									"        const requestBody = JSON.parse(rawRequestBody);\r",
									"\r",
									"        pm.expect(response).to.have.property(\"programId\")\r",
									"        pm.expect(requestBody.programName).to.eql(response.programName);\r",
									"        pm.expect(requestBody.programDescription).to.eql(response.programDescription);\r",
									"        pm.expect(requestBody.programStatus).to.eql(response.programStatus);\r",
									"\r",
									"    });\r",
									"\r",
									"    //GET ALL PROGRAMS COUNT AFTER PROGRAM CREATION\r",
									"    pm.test(\"Check Total Program Count increased by 1\", function () {\r",
									"        \r",
									"        // Perform GET request programmatically\r",
									"        pm.sendRequest({\r",
									"            url: pm.environment.get(\"baseURL\")+'/allPrograms',  \r",
									"            method: 'GET',\r",
									"            header: {\r",
									"               'Authorization': 'Bearer ' + pm.collectionVariables.get(\"BearerToken\") \r",
									"            }\r",
									"        }, function (err, res) {\r",
									"            if (err) {\r",
									"                console.log(err);\r",
									"                   // pm.expect(err).to.be.null; // Ensure there is no error\r",
									"                return;\r",
									"            } else {\r",
									"               \r",
									"                const programs = res.json(); \r",
									"                const count = programs.length; \r",
									"\r",
									"                    pm.expect(programs).to.include(response.programName);\r",
									"                    pm.expect(count).to.equal((pm.collectionVariables.get(\"ProgramCount_BeforeAdd\"))+2); \r",
									"                \r",
									"            }\r",
									"        });\r",
									"    });\r",
									"\r",
									"}\r",
									"\r",
									"\r",
									"//SET VALUE AT RUN TIME (LATER CHECK IF THIS COULD BE TRANSFERRED AS PROGRAM OBJECT!!!!!!!)\r",
									"pm.collectionVariables.set(\"programID_All\", response.programId)\r",
									"pm.collectionVariables.set(\"programName_All\", response.programName)\r",
									"pm.collectionVariables.set(\"programDesc_All\", response.programDescription)\r",
									"pm.collectionVariables.set(\"programStatus_All\", response.programStatus)\r",
									"\r",
									"\r",
									"//NEGATIVE TEST VALIDATION\r",
									"\r",
									"\r",
									"/**\r",
									" * status code = 400\r",
									"{   \r",
									"    \"message\": \"programName Must contain only letters and sometimes hyphens\",\r",
									"    \"success\": false\r",
									"}\r",
									" */"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "39732b31-aa79-47c8-90b0-e315ef0523cd",
								"exec": [
									"function getRandomLetterString() {\r",
									"    const letters = 'abcdefghijklmnopqrstuvwxyz'; // Available letters\r",
									"    let randomString = '';\r",
									"    \r",
									"    // Loop 3 times to generate a 3-letter string\r",
									"    for (let i = 0; i < 3; i++) {\r",
									"        const randomIndex = Math.floor(Math.random() * letters.length); // Get a random index\r",
									"        randomString += letters[randomIndex]; // Add the random letter to the string\r",
									"    }\r",
									"\r",
									"    return randomString;\r",
									"}\r",
									"\r",
									"var programName_Mandatory_data = 'SeleniumPython-Ten'+ getRandomLetterString();\r",
									"pm.variables.set(\"programName_Mandatory_data\",programName_Mandatory_data)\r",
									"console.log('randome data ' + programName_Mandatory_data)"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "d24a44bd-9c10-43cd-80f1-77fcca0e2490",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n \"programDescription\":\"Payload has data for all fields\",\r\n \"programName\":\"{{programName_Mandatory_data}}\", //mandatory and unique\r\n \"programStatus\":\"Active\" //mandatory\r\n }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}/saveprogram"
					},
					"response": []
				},
				{
					"name": "AddNewProgram_ModuleInt",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "97f11445-4b2d-4a2f-a5c3-fa351beef767",
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"//POSITIVE TEST VALIDATION\r",
									"if(pm.response.to.have.status(201)){ // HAPPY PATH\r",
									"\r",
									"    //1. Status\r",
									"    pm.test(\"Status code is 201\", function () {\r",
									"        pm.response.to.have.status(201);\r",
									"    });\r",
									"\r",
									"    //2. Status Line\r",
									"    pm.test(\"Status message is Created\", function () {\r",
									"        pm.response.to.have.status(\"Created\");\r",
									"    });\r",
									"\r",
									"    //3. Test for Content-Type header having a particular value\r",
									"    pm.test(\"Content-Type header is application/json\", () => {\r",
									"        pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"    });\r",
									"\r",
									"    //4. Schema Validation -- TO BE DONE\r",
									"\r",
									"    //5. Request VS Response Body Validation\r",
									"    pm.test(\"Program name matches\", function () {\r",
									"\r",
									"        // Get the raw request body and Parse it to JSON\r",
									"        const rawRequestBody = pm.request.body.raw;\r",
									"        const requestBody = JSON.parse(rawRequestBody);\r",
									"\r",
									"        pm.expect(response).to.have.property(\"programId\")\r",
									"        pm.expect(requestBody.programName).to.eql(response.programName);\r",
									"        pm.expect(requestBody.programDescription).to.eql(response.programDescription);\r",
									"        pm.expect(requestBody.programStatus).to.eql(response.programStatus);\r",
									"\r",
									"    });\r",
									"\r",
									"    //GET ALL PROGRAMS COUNT AFTER PROGRAM CREATION\r",
									"    pm.test(\"Check Total Program Count increased by 1\", function () {\r",
									"        \r",
									"        // Perform GET request programmatically\r",
									"        pm.sendRequest({\r",
									"            url: pm.environment.get(\"baseURL\")+'/allPrograms',  \r",
									"            method: 'GET',\r",
									"            header: {\r",
									"               'Authorization': 'Bearer ' + pm.collectionVariables.get(\"BearerToken\") \r",
									"            }\r",
									"        }, function (err, res) {\r",
									"            if (err) {\r",
									"                console.log(err);\r",
									"                   // pm.expect(err).to.be.null; // Ensure there is no error\r",
									"                return;\r",
									"            } else {\r",
									"               \r",
									"                const programs = res.json(); \r",
									"                const count = programs.length; \r",
									"\r",
									"                    pm.expect(programs).to.include(response.programName);\r",
									"                    pm.expect(count).to.equal((pm.collectionVariables.get(\"ProgramCount_BeforeAdd\"))+2); \r",
									"                \r",
									"            }\r",
									"        });\r",
									"    });\r",
									"\r",
									"}\r",
									"\r",
									"\r",
									"//SET VALUE AT RUN TIME (LATER CHECK IF THIS COULD BE TRANSFERRED AS PROGRAM OBJECT!!!!!!!)\r",
									"pm.collectionVariables.set(\"programID_ModuleIntegration\", response.programId)\r",
									"pm.collectionVariables.set(\"programName_ModuleIntegration\", response.programName)\r",
									"pm.collectionVariables.set(\"programDesc_ModuleIntegration\", response.programDescription)\r",
									"pm.collectionVariables.set(\"programStatus_ModuleIntegration\", response.programStatus)\r",
									"\r",
									"\r",
									"//NEGATIVE TEST VALIDATION\r",
									"\r",
									"\r",
									"/**\r",
									" * status code = 400\r",
									"{   \r",
									"    \"message\": \"programName Must contain only letters and sometimes hyphens\",\r",
									"    \"success\": false\r",
									"}\r",
									" */"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "39732b31-aa79-47c8-90b0-e315ef0523cd",
								"exec": [
									"function getRandomLetterString() {\r",
									"    const letters = 'abcdefghijklmnopqrstuvwxyz'; // Available letters\r",
									"    let randomString = '';\r",
									"    \r",
									"    // Loop 3 times to generate a 3-letter string\r",
									"    for (let i = 0; i < 3; i++) {\r",
									"        const randomIndex = Math.floor(Math.random() * letters.length); // Get a random index\r",
									"        randomString += letters[randomIndex]; // Add the random letter to the string\r",
									"    }\r",
									"\r",
									"    return randomString;\r",
									"}\r",
									"\r",
									"var programName_Mandatory_data = 'SeleniumPython-Ten'+ getRandomLetterString();\r",
									"pm.variables.set(\"programName_Mandatory_data\",programName_Mandatory_data)\r",
									"console.log('randome data ' + programName_Mandatory_data)"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "a4e52baa-9421-4aac-97ab-6d36ee624ded",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n \"programDescription\":\"Payload has data for all fields\",\r\n \"programName\":\"{{programName_Mandatory_data}}\", //mandatory and unique\r\n \"programStatus\":\"Active\" //mandatory\r\n }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}/saveprogram"
					},
					"response": []
				},
				{
					"name": "AllProgramswithUsers",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1fbc2e20-e724-4b6d-a436-fdadaa40a5b5",
								"exec": [
									"const response = pm.response.json()\r",
									"\r",
									"console.log(response.length) //7 distinct programs with multiple users\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "55a7fa98-c345-4da6-a94f-6c3aecf88c34",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseURL}}/allProgramsWithUsers - execute this after User or class creation"
					},
					"response": []
				},
				{
					"name": "ProgrambyProgramId",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1fbc2e20-e724-4b6d-a436-fdadaa40a5b5",
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"var programList = pm.collectionVariables.get(\"programList\");\r",
									"\r",
									"//Happy Path - Positive\r",
									"if(pm.response.to.have.status(200)){\r",
									"\r",
									"    //1. Status Code\r",
									"    pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    });\r",
									"\r",
									"    //2. Status Line\r",
									"    pm.test(\"Status message is OK\", function () {\r",
									"        pm.response.to.have.status(\"OK\");\r",
									"    });\r",
									"\r",
									"    //3. Test for Content-Type header having a particular value\r",
									"    pm.test(\"Content-Type header is application/json\", () => {\r",
									"        pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"    });\r",
									"\r",
									"    //4. Schema Validation -- TO BE DONE\r",
									"\r",
									"    //5. Data Validation\r",
									"    if(pm.variables.get(\"programId\") === pm.collectionVariables.get(\"programID_Mandatory\")){\r",
									"        \r",
									"        console.log(pm.collectionVariables.get(\"programID_Mandatory\"))\r",
									"        pm.test(\"Validate stored programs data with response data\", function () {\r",
									"\r",
									"        pm.expect(pm.collectionVariables.get(\"programID_Mandatory\")).to.eql(response.programId);\r",
									"        pm.expect(pm.collectionVariables.get(\"programName_Mandatory\")).to.eql(response.programName);\r",
									"        pm.expect(pm.collectionVariables.get(\"programDesc_Mandatory\")).to.eql(response.programDescription);\r",
									"        pm.expect(pm.collectionVariables.get(\"programStatus_Mandatory\")).to.eql(response.programStatus);\r",
									"         });\r",
									"\r",
									"    } else if (pm.variables.get(\"programId\") === \"programID_All\") {\r",
									"\r",
									"        console.log(pm.collectionVariables.get(\"programID_All\"))\r",
									"         pm.test(\"Validate stored programs data with response data\", function () {\r",
									"\r",
									"            pm.expect(pm.collectionVariables.get(\"programID_All\")).to.eql(response.programId);\r",
									"            pm.expect(pm.collectionVariables.get(\"programName_All\")).to.eql(response.programName);\r",
									"            pm.expect(pm.collectionVariables.get(\"programDesc_All\")).to.eql(response.programDescription);\r",
									"            pm.expect(pm.collectionVariables.get(\"programStatus_All\")).to.eql(response.programStatus);\r",
									"         });\r",
									"    }\r",
									"\r",
									"\r",
									"}\r",
									"\r",
									"\r",
									"if(programList.length>0){\r",
									"    console.log(\"Inside loop for next repetition\")\r",
									"    pm.execution.setNextRequest(\"ProgrambyProgramId\")\r",
									"    //pm.execution.setNextRequest(pm.info.requestName)\r",
									"\r",
									"}\r",
									"else{\r",
									"    console.log(\"No more program id list\")\r",
									"    pm.collectionVariables.unset(\"programList\");\r",
									"    pm.collectionVariables.unset(\"programId\");\r",
									"    pm.execution.setNextRequest(null);\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "530b8c98-a627-48d0-8649-6f3163d936fb",
								"exec": [
									"//Get list of program created\r",
									"var programList = pm.collectionVariables.get(\"programList\")\r",
									"console.log(programList);\r",
									"\r",
									"if(!programList){\r",
									"  programList = [pm.collectionVariables.get(\"programID_Mandatory\"), pm.collectionVariables.get(\"programID_All\")];\r",
									"  console.log(\"programList = \"+programList);\r",
									"}\r",
									"\r",
									"var currentProgram = programList.shift();\r",
									"console.log('Current Program = '+currentProgram);\r",
									"\r",
									"pm.collectionVariables.set(\"programId\", currentProgram)\r",
									"\r",
									"//set the remainder names at data level\r",
									"pm.collectionVariables.set(\"programList\", programList); \r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "b0d52db6-a9b1-4aba-9dda-ea450407c6c9",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/programs/{{programId}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"programs",
								"{{programId}}"
							],
							"variable": [
								{
									"value": "16225",
									"key": "programId"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Negative - ProgrambyProgramId",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1fbc2e20-e724-4b6d-a436-fdadaa40a5b5",
								"exec": [
									"const expStatusCode = pm.collectionVariables.get(\"statusCode\");\r",
									"const expStatusLine = pm.collectionVariables.get(\"statusLine\");\r",
									"const expHttpMethod = pm.collectionVariables.get(\"httpMethod\");\r",
									"const scenarioName = pm.collectionVariables.get(\"scenarioName\");\r",
									"const pathParameter = pm.collectionVariables.get(\"pathParameter\");\r",
									"\r",
									"\r",
									"//NEGATIVE TEST VALIDATION\r",
									"//1. Status\r",
									"pm.test(`Status code is ${expStatusCode}`, function () {\r",
									"    pm.response.to.have.status(expStatusCode);\r",
									"});\r",
									"\r",
									"//2. Status Line\r",
									"pm.test(`Status message is ${expStatusLine}`, function () {\r",
									"    pm.response.to.have.status(expStatusLine);\r",
									"});\r",
									"\r",
									"//3. Scenario specific Tests\r",
									"if(scenarioName === \"Incorrect Http Method\") {\r",
									"    pm.test(`Validate ${scenarioName} JSON Response msg`, () => {\r",
									"        pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"        pm.expect(pm.response.json().message).to.eql(`Request method '${expHttpMethod}' is not supported`);\r",
									"        pm.expect(pm.response.json().success).to.eql(false);\r",
									"        \r",
									"    });\r",
									"}\r",
									"\r",
									"if(scenarioName.includes(\"Non-existing ID\")) {\r",
									"    pm.test(`Validate ${scenarioName} JSON Response msg`, () => {\r",
									"        pm.expect(pm.response.json().message).to.eql(`program with this: ${pathParameter}not found`);\r",
									"        pm.expect(pm.response.json().success).to.eql(false);\r",
									"        \r",
									"    });\r",
									"}\r",
									"\r",
									"if(scenarioName.includes(\"Incorrect Endpoint\")||scenarioName.includes(\"String\")||scenarioName.includes(\"Special Character\")||scenarioName.includes(\"Null Value\")) {\r",
									"    pm.test(`Validate ${scenarioName}  Response msg`, () => {\r",
									"        pm.expect(pm.response.headers.get('Content-Type')).to.includes('text/plain');\r",
									"        pm.expect(pm.response.text()).to.eql(`Invalid endpoint`);\r",
									"        \r",
									"    });\r",
									"}\r",
									"\r",
									"if(scenarioName === \"Incorrect BaseURL\") {\r",
									"    pm.test(`Validate ${scenarioName} Response msg`, () => {\r",
									"        pm.expect(pm.response.headers.get('Content-Type')).to.includes('text/html');\r",
									"        pm.expect(pm.response.text()).to.includes('<title>Heroku | Application Error</title>');\r",
									"        \r",
									"    });\r",
									"}\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "530b8c98-a627-48d0-8649-6f3163d936fb",
								"exec": [
									"console.log(\"Inside pre-requisite\")\r",
									"var scenarioName = pm.collectionVariables.get(\"scenarioName\");\r",
									"console.log(\"Scenario Name \"+scenarioName)\r",
									"pm.variables.set(\"BearerToken\",pm.collectionVariables.get(\"BearerToken\"));\r",
									"pm.variables.set(\"programId\", pm.collectionVariables.get(\"programID_ModuleIntegration\"))\r",
									"\r",
									"if(scenarioName === \"Incorrect Http Method\"){\r",
									"    pm.request.method = pm.collectionVariables.get(\"httpMethod\");;\r",
									"}\r",
									"\r",
									"if(scenarioName.includes(\"PathParameter\")){\r",
									"    pm.variables.set(\"programId\", pm.collectionVariables.get(\"pathParameter\"))\r",
									"}\r",
									"\r",
									"\r",
									"if(scenarioName === \"Incorrect BaseURL\"){\r",
									"    pm.variables.set(\"baseURL\", pm.collectionVariables.get('baseURL'))\r",
									"}\r",
									"\r",
									"if(scenarioName === \"No Auth\"){\r",
									"    pm.variables.set(\"BearerToken\",\"\")\r",
									"    pm.variables.set(\"baseURL\", pm.collectionVariables.get('baseURL'))\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "1745d6f2-0654-4c75-b037-fc8b8dcf3a07",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseURL}}/{{endPoint}}/{{programId}}"
					},
					"response": []
				},
				{
					"name": "UpdateProgrambyProgramId",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a6c80eb2-0c14-419b-8191-0cd10764e897",
								"exec": [
									"\r",
									"//POSITIVE TEST VALIDATION\r",
									"if(pm.response.to.have.status(200)){ // HAPPY PATH\r",
									"\r",
									"    //1. Status\r",
									"    pm.test(\"Status code is 200\", function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    });\r",
									"\r",
									"    //2. Status Line\r",
									"    pm.test(\"Status message is OK\", function () {\r",
									"        pm.response.to.have.status(\"OK\");\r",
									"    });\r",
									"\r",
									"    //3. Test for Content-Type header having a particular value\r",
									"    pm.test(\"Content-Type header is application/json\", () => {\r",
									"        pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"    });\r",
									"\r",
									"    //4. Schema Validation -- TO BE DONE\r",
									"\r",
									"    //5. Request VS Response Body Validation\r",
									"    pm.test(\"Program details in Request and Response matches\", function () {\r",
									"\r",
									"        // Get the raw request body and Parse it to JSON\r",
									"        const response = pm.response.json();\r",
									"\r",
									"        const rawRequestBody = pm.request.body.raw;\r",
									"        console.log(\"Raw Request Body:\", rawRequestBody);\r",
									"\r",
									"        \r",
									"        const requestBody = JSON.parse(rawRequestBody);\r",
									"\r",
									"        pm.expect(pm.collectionVariables.get(\"programID_Mandatory\")).to.eql(response.programId)\r",
									"        pm.expect(requestBody.programName).to.eql(response.programName);\r",
									"        pm.expect(requestBody.programDescription).to.eql(response.programDescription);\r",
									"        pm.expect(requestBody.programStatus).to.eql(response.programStatus);\r",
									"\r",
									"        \r",
									"\r",
									"    });\r",
									"\r",
									"}\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "b4044272-d1b8-4e79-a1c9-34f76d956f0b",
								"exec": [
									"function getRandomLetterString() {\r",
									"    const letters = 'abcdefghijklmnopqrstuvwxyz'; // Available letters\r",
									"    let randomString = '';\r",
									"    \r",
									"    // Loop 3 times to generate a 3-letter string\r",
									"    for (let i = 0; i < 3; i++) {\r",
									"        const randomIndex = Math.floor(Math.random() * letters.length); // Get a random index\r",
									"        randomString += letters[randomIndex]; // Add the random letter to the string\r",
									"    }\r",
									"\r",
									"    return randomString;\r",
									"}\r",
									"\r",
									"var programName_Mandatory_dataupdate = 'Mandatory-Update-'+ getRandomLetterString();\r",
									"pm.variables.set(\"programName_Mandatory_dataupdate\",programName_Mandatory_dataupdate)\r",
									"console.log('randome data ' + programName_Mandatory_dataupdate)"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "1b3ad132-8168-44f3-a44f-d3dd5fe1d494",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": " {\r\n \"programDescription\":\"Mandatory Update\",\r\n \"programName\":\"{{programName_Mandatory_dataupdate}}\", //also has to be unique\r\n \"programStatus\":\"Active\" //mandatory\r\n }\r\n\r\n//POSSIBLE DEFECT: ONLY ACCEPTING HYPHENATED PROGRAM NAME\r\n/*\r\nGetting error for program name without hyphen\r\n    PAYLOAD\r\n     {\r\n    \"programDescription\": \"Mandatory Update\",\r\n    \"programName\": \"Mandatory Update\", \r\n    \"programStatus\": \"Active\" \r\n    }\r\n\r\n    ERROR CODE = 401 UNAUTHORIZED --> SHOULD HAVE BEEN 400 BAD REQUEST INSTEAD OF 401\r\n    ERROR MSG\r\n    {\r\n        \"message\": \"programName Must contain only letters and sometimes hyphens\",\r\n        \"success\": false\r\n    }\r\n*/\r\n\r\n/*==================================================================*/\r\n/*\r\nDifferent msgs from contract doc\r\nStatusCode:\r\n 404:Error withmessageandbooleansuccessdetail–ForInvalidProgramId\r\n 400:BadRequestMissingfield\r\n\r\n response:[\r\n{\r\n    \"message\": \"Program Name TestChatBot already exists\",\r\n    \"success\": false\r\n}]*/",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/putprogram/:programId",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"putprogram",
								":programId"
							],
							"variable": [
								{
									"key": "programId",
									"value": "{{programID_Mandatory}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Negative - UpdateProgrambyProgramId",
					"id": "e4a15d08-3eb4-4d70-b47e-025b32cdc6b3",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": " {\r\n \"programDescription\":\"update\",\r\n \"programName\":\"yaoza\", //also has to be unique\r\n \"programStatus\": \"Active\" //mandatory\r\n }\r\n\r\n//All fields empty - \r\n\r\n//POSSIBLE DEFECT: ONLY ACCEPTING HYPHENATED PROGRAM NAME\r\n/*\r\nGetting error for program name without hyphen\r\n    PAYLOAD\r\n     {\r\n    \"programDescription\": \"Mandatory Update\",\r\n    \"programName\": \"Mandatory Update\", \r\n    \"programStatus\": \"Active\" \r\n    }\r\n\r\n    ERROR CODE = 401 UNAUTHORIZED --> SHOULD HAVE BEEN 400 BAD REQUEST INSTEAD OF 401\r\n    ERROR MSG\r\n    {\r\n        \"message\": \"programName Must contain only letters and sometimes hyphens\",\r\n        \"success\": false\r\n    }\r\n*/\r\n\r\n/*==================================================================*/\r\n/*\r\nDifferent msgs from contract doc\r\nStatusCode:\r\n 404:Error withmessageandbooleansuccessdetail–ForInvalidProgramId\r\n 400:BadRequestMissingfield\r\n\r\n response:[\r\n{\r\n    \"message\": \"Program Name TestChatBot already exists\",\r\n    \"success\": false\r\n}]*/",
							"options": {
								"raw": {
									"language": "text"
								}
							}
						},
						"url": {
							"raw": "https://lms-hackthon-feb25-803334c87fbe.herokuapp.com/lms/putprogram/:programId",
							"protocol": "https",
							"host": [
								"lms-hackthon-feb25-803334c87fbe",
								"herokuapp",
								"com"
							],
							"path": [
								"lms",
								"putprogram",
								":programId"
							],
							"variable": [
								{
									"id": "adf71176-e856-4562-9fa2-92c9ed880d5f",
									"key": "programId",
									"value": "17692"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "UpdateProgrambyProgramName",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "32d21eff-919c-4433-93ea-80ce325f8667",
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"//POSITIVE TEST VALIDATION\r",
									"if(pm.response.to.have.status(200)){ // HAPPY PATH\r",
									"\r",
									"    //1. Status\r",
									"    pm.test(\"Status code is 200\", function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    });\r",
									"\r",
									"    //2. Status Line\r",
									"    pm.test(\"Status message is OK\", function () {\r",
									"        pm.response.to.have.status(\"OK\");\r",
									"    });\r",
									"\r",
									"    //3. Test for Content-Type header having a particular value\r",
									"    pm.test(\"Content-Type header is application/json\", () => {\r",
									"        pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"    });\r",
									"\r",
									"    //4. Schema Validation -- TO BE DONE\r",
									"\r",
									"    //5. Request VS Response Body Validation\r",
									"    pm.test(\"Program details in Request and Response matches\", function () {\r",
									"\r",
									"        // Get the raw request body and Parse it to JSON\r",
									"        const rawRequestBody = pm.request.body.raw;\r",
									"        const requestBody = JSON.parse(rawRequestBody);\r",
									"\r",
									"        pm.expect(pm.collectionVariables.get(\"programID_All\")).to.eql(response.programId)\r",
									"        pm.expect(requestBody.programName).to.eql(response.programName);\r",
									"        pm.expect(requestBody.programDescription).to.eql(response.programDescription);\r",
									"        pm.expect(requestBody.programStatus).to.eql(response.programStatus);\r",
									"\r",
									"    });\r",
									"\r",
									"}\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "627b66a0-2fc2-44f9-9106-9676d8b12d1d",
								"exec": [
									"function getRandomLetterString() {\r",
									"    const letters = 'abcdefghijklmnopqrstuvwxyz'; // Available letters\r",
									"    let randomString = '';\r",
									"    \r",
									"    // Loop 3 times to generate a 3-letter string\r",
									"    for (let i = 0; i < 3; i++) {\r",
									"        const randomIndex = Math.floor(Math.random() * letters.length); // Get a random index\r",
									"        randomString += letters[randomIndex]; // Add the random letter to the string\r",
									"    }\r",
									"\r",
									"    return randomString;\r",
									"}\r",
									"\r",
									"var programName_Mandatory_dataupdate = 'All-Update-'+ getRandomLetterString();\r",
									"pm.variables.set(\"programName_Mandatory_dataupdate\",programName_Mandatory_dataupdate)\r",
									"console.log('randome data ' + programName_Mandatory_dataupdate)"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "943fa7fa-6472-4e29-8593-c58304c8c1ab",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n \"programDescription\":\"Mandatory Update\",\r\n \"programName\":\"{{programName_Mandatory_dataupdate}}\", //also has to be unique\r\n \"programStatus\":\"Active\" //mandatory\r\n }\r\n\r\n//POSSIBLE DEFECT\r\n/*\r\nGetting error for program name without hyphen\r\n    PAYLOAD\r\n     {\r\n    \"programDescription\": \"All Update\",\r\n    \"programName\": \"All Update\", //Mandatory\r\n    \"programStatus\": \"Active\" //Mandatory\r\n    }\r\n\r\n    ERROR CODE = 400\r\n    ERROR MSG\r\n    {\r\n        \"message\": \"programName Must contain only letters and sometimes hyphens\",\r\n        \"success\": false\r\n    }\r\n*/\r\n\r\n /*\r\n StatusCode:\r\n 200ok\r\n 404:Error withmessageandbooleansuccessdetail–ForInvalidProgramId\r\n 400:BadRequestMissingfield\r\n */",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/program/:programName",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"program",
								":programName"
							],
							"variable": [
								{
									"key": "programName",
									"value": "{{programName_All}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Negative - UpdateProgrambyProgramName",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "32d21eff-919c-4433-93ea-80ce325f8667",
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "627b66a0-2fc2-44f9-9106-9676d8b12d1d",
								"exec": [
									"function getRandomLetterString() {\r",
									"    const letters = 'abcdefghijklmnopqrstuvwxyz'; // Available letters\r",
									"    let randomString = '';\r",
									"    \r",
									"    // Loop 3 times to generate a 3-letter string\r",
									"    for (let i = 0; i < 3; i++) {\r",
									"        const randomIndex = Math.floor(Math.random() * letters.length); // Get a random index\r",
									"        randomString += letters[randomIndex]; // Add the random letter to the string\r",
									"    }\r",
									"\r",
									"    return randomString;\r",
									"}\r",
									"\r",
									"var programName_Mandatory_dataupdate = 'All-Update-'+ getRandomLetterString();\r",
									"pm.variables.set(\"programName_Mandatory_dataupdate\",programName_Mandatory_dataupdate)\r",
									"console.log('randome data ' + programName_Mandatory_dataupdate)"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "0f01ea7f-1704-419a-b837-f53b6ad796c7",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n \"programDescription\":\"jljklj\",\r\n \"programName\":\"Prog-Name-Updated\", //also has to be unique\r\n \"programStatus\":\"Active\" //mandatory\r\n }\r\n\r\n//POSSIBLE DEFECT\r\n/*\r\nGetting error for program name without hyphen\r\n    PAYLOAD\r\n     {\r\n    \"programDescription\": \"All Update\",\r\n    \"programName\": \"All Update\", //Mandatory\r\n    \"programStatus\": \"Active\" //Mandatory\r\n    }\r\n\r\n    ERROR CODE = 400\r\n    ERROR MSG\r\n    {\r\n        \"message\": \"programName Must contain only letters and sometimes hyphens\",\r\n        \"success\": false\r\n    }\r\n*/\r\n\r\n /*\r\n StatusCode:\r\n 200ok\r\n 404:Error withmessageandbooleansuccessdetail–ForInvalidProgramId\r\n 400:BadRequestMissingfield\r\n */",
							"options": {
								"raw": {
									"language": "text"
								}
							}
						},
						"url": {
							"raw": "https://lms-hackthon-feb25-803334c87fbe.herokuapp.com/lms/program/:programName",
							"protocol": "https",
							"host": [
								"lms-hackthon-feb25-803334c87fbe",
								"herokuapp",
								"com"
							],
							"path": [
								"lms",
								"program",
								":programName"
							],
							"variable": [
								{
									"id": "d644e83a-99e2-4908-adab-5e4ceb637b8c",
									"key": "programName",
									"value": "null"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "ProgramByProgramID",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d2776f72-6515-460c-9854-74e5f1edc778",
								"exec": [
									"// const responseText = pm.response.text();\r",
									"// console.log(responseText)\r",
									"\r",
									"//POSITIVE TEST VALIDATION\r",
									"//if(pm.response.to.have.status(200)){ // HAPPY PATH\r",
									"\r",
									"    //1. Status\r",
									"    pm.test(\"Status code is 200\", function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    });\r",
									"\r",
									"    //2. Status Line\r",
									"    pm.test(\"Status message is OK\", function () {\r",
									"        pm.response.to.have.status(\"OK\");\r",
									"    });\r",
									"\r",
									"    //3. Test for Content-Type header having a particular value\r",
									"    pm.test(\"Content-Type header is application/json\", () => {\r",
									"        pm.expect(pm.response.headers.get('Content-Type')).to.include('text/plain');\r",
									"    });\r",
									"\r",
									"    //4.Request VS Response Body Validation\r",
									"    pm.test(\"Validate Deletion Message\", function () {\r",
									"\r",
									"        //Message: Program Id-17037 is deleted Successfully!\r",
									"        \r",
									"        pm.expect(pm.response.text()).to.eql('Message: Program Id-'+pm.collectionVariables.get(\"programID_Mandatory\")+' is deleted Successfully!')\r",
									"        /*\r",
									"        pm.expect(responseText).to.eql(`Message: Program Id-${programID_Mandatory} is deleted Successfully!`)*/\r",
									"\r",
									"    });\r",
									"\r",
									"    //5. Validate Delete Program status has changed to Inactive\r",
									"        // Programmatically make a GET request using the ProgramID\r",
									"        pm.sendRequest({\r",
									"            url:  pm.environment.get(\"baseURL\") + `/programs/` + pm.collectionVariables.get(\"programID_Mandatory\") , \r",
									"            method: 'GET',\r",
									"            header: {\r",
									"                'Authorization': 'Bearer ' + pm.collectionVariables.get(\"BearerToken\") \r",
									"            }\r",
									"        }, function (err, res) {\r",
									"            if (err) {\r",
									"                pm.test(\"GET ProgramByID request failed after Program Deletion\", function() {\r",
									"                  console.log(err);\r",
									"                return;\r",
									"                });\r",
									"            } else {\r",
									"                pm.test(\"GET ProgramByID request Successful after Program Deletion\", function() {\r",
									"\r",
									"                    if(res.json().programId === pm.collectionVariables.get(\"programID_Mandatory\")){\r",
									"                        pm.expect(res.json().programStatus).to.eql(\"Inactive\")\r",
									"\r",
									"                    }    \r",
									"                });\r",
									"\r",
									"                // remove the program info at collection level\r",
									"                pm.collectionVariables.unset(\"programID_Mandatory\");\r",
									"                pm.collectionVariables.unset(\"programName_Mandatory\")\r",
									"                pm.collectionVariables.unset(\"programDesc_Mandatory\")\r",
									"                pm.collectionVariables.unset(\"programStatus_Mandatory\")\r",
									"            }\r",
									"    });\r",
									"//}    \r",
									"\r",
									"\r",
									"\r",
									"/*\r",
									"StatusCode:\r",
									" 404:ErrorwithMessage(Eg:\"message\":\"no recordfoundwithprogramId{programId}\",\r",
									" \"success\": false)\r",
									"  */"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "277ec926-5c15-453a-b5e9-29b51d32f850",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/deletebyprogid/:programId",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"deletebyprogid",
								":programId"
							],
							"variable": [
								{
									"key": "programId",
									"value": "{{programID_Mandatory}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Negative - DelProgramByProgramID",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d2776f72-6515-460c-9854-74e5f1edc778",
								"exec": [
									"const expStatusCode = pm.collectionVariables.get(\"statusCode\");\r",
									"const expStatusLine = pm.collectionVariables.get(\"statusLine\");\r",
									"const expHttpMethod = pm.collectionVariables.get(\"httpMethod\");\r",
									"const scenarioName = pm.collectionVariables.get(\"scenarioName\");\r",
									"const pathParameter = pm.collectionVariables.get(\"pathParameter\");\r",
									"\r",
									"\r",
									"//NEGATIVE TEST VALIDATION\r",
									"//1. Status\r",
									"pm.test(`Status code is ${expStatusCode}`, function () {\r",
									"    pm.response.to.have.status(expStatusCode);\r",
									"});\r",
									"\r",
									"//2. Status Line\r",
									"pm.test(`Status message is ${expStatusLine}`, function () {\r",
									"    pm.response.to.have.status(expStatusLine);\r",
									"});\r",
									"\r",
									"//3. Scenario specific Tests\r",
									"if(scenarioName === \"Incorrect Http Method\") {\r",
									"    pm.test(`Validate ${scenarioName} JSON Response msg`, () => {\r",
									"        pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"        pm.expect(pm.response.json().message).to.eql(`Request method '${expHttpMethod}' is not supported`);\r",
									"        pm.expect(pm.response.json().success).to.eql(false);\r",
									"        \r",
									"    });\r",
									"}\r",
									"\r",
									"if(scenarioName.includes(\"Non-existing ID\")) {\r",
									"    pm.test(`Validate ${scenarioName} Response msg`, () => {\r",
									"        pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"        pm.expect(pm.response.json().message).to.eql(`No active program with the program Id${pathParameter}`);\r",
									"        pm.expect(pm.response.json().success).to.eql(false);\r",
									"        \r",
									"    });\r",
									"}\r",
									"\r",
									"if(scenarioName.includes(\"Incorrect Endpoint\")||scenarioName.includes(\"String\")||scenarioName.includes(\"Special Character\")||scenarioName.includes(\"Null Value\")) {\r",
									"    pm.test(`Validate ${scenarioName}  Response msg`, () => {\r",
									"        pm.expect(pm.response.headers.get('Content-Type')).to.includes('text/plain');\r",
									"        pm.expect(pm.response.text()).to.eql(`Invalid endpoint`);\r",
									"        \r",
									"    });\r",
									"}\r",
									"\r",
									"if(scenarioName === \"Incorrect BaseURL\") {\r",
									"    pm.test(`Validate ${scenarioName} Response msg`, () => {\r",
									"        pm.expect(pm.response.headers.get('Content-Type')).to.includes('text/html');\r",
									"        pm.expect(pm.response.text()).to.includes('<title>Heroku | Application Error</title>');\r",
									"        \r",
									"    });\r",
									"}\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "6ace579e-4702-4892-a56a-8fc19157904a",
								"exec": [
									"console.log(\"Inside pre-requisite\")\r",
									"var scenarioName = pm.collectionVariables.get(\"scenarioName\");\r",
									"console.log(\"Scenario Name \"+scenarioName)\r",
									"pm.variables.set(\"BearerToken\",pm.collectionVariables.get(\"BearerToken\"));\r",
									"pm.variables.set(\"programId\", pm.collectionVariables.get(\"programID_ModuleIntegration\"))\r",
									"\r",
									"if(scenarioName === \"Incorrect Http Method\"){\r",
									"    pm.request.method = pm.collectionVariables.get(\"httpMethod\");;\r",
									"}\r",
									"\r",
									"if(scenarioName.includes(\"PathParameter\")){\r",
									"    pm.variables.set(\"programId\", pm.collectionVariables.get(\"pathParameter\"))\r",
									"}\r",
									"\r",
									"\r",
									"if(scenarioName === \"Incorrect BaseURL\"){\r",
									"    pm.variables.set(\"baseURL\", pm.collectionVariables.get('baseURL'))\r",
									"}\r",
									"\r",
									"if(scenarioName === \"No Auth\"){\r",
									"    pm.variables.set(\"BearerToken\",\"\")\r",
									"    pm.variables.set(\"baseURL\", pm.collectionVariables.get('baseURL'))\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "98fbc7dd-0e33-4bc8-8268-e08545d56edc",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [],
						"url": "{{baseURL}}/{{endPoint}}/{{programId}}"
					},
					"response": []
				},
				{
					"name": "ProgramByProgramName",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d2776f72-6515-460c-9854-74e5f1edc778",
								"exec": [
									"//POSITIVE TEST VALIDATION\r",
									"//if (pm.response.to.have.status(200)) { // HAPPY PATH\r",
									"\r",
									"    //1. Status\r",
									"    pm.test(\"Status code is 200\", function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    });\r",
									"\r",
									"    //2. Status Line\r",
									"    pm.test(\"Status message is OK\", function () {\r",
									"        pm.response.to.have.status(\"OK\");\r",
									"    });\r",
									"\r",
									"    //3. Test for Content-Type header having a particular value\r",
									"    pm.test(\"Content-Type header is application/json\", () => {\r",
									"        pm.expect(pm.response.headers.get('Content-Type')).to.include('text/plain');\r",
									"    });\r",
									"\r",
									"    //4.Request VS Response Body Validation -- DEFECT: ACTUAL DEL MSG HAS A SPACE BETWEEN \"Name\" AND \"-\"\r",
									"    pm.test(\"Validate Deletion Message\", function () {\r",
									"        pm.expect(pm.response.text()).to.eql('Message: Program Name-'+pm.collectionVariables.get(\"programName_All\")+' is deleted Successfully!')\r",
									"    });\r",
									"\r",
									"    //5. Validate Deleted Program status has changed to Inactive\r",
									"    // Programmatically make a GET request using the ProgramID\r",
									"    pm.sendRequest({\r",
									"        url: pm.environment.get(\"baseURL\") + `/programs/` + pm.collectionVariables.get(\"programID_All\"),\r",
									"        method: 'GET',\r",
									"        header: {\r",
									"            'Authorization': 'Bearer ' + pm.collectionVariables.get(\"BearerToken\")\r",
									"        }\r",
									"    }, function (err, res) {\r",
									"        if (err) {\r",
									"            pm.test(\"GET ProgramByID request failed after Program Deletion\", function () {\r",
									"                console.log(err);\r",
									"                return;\r",
									"            });\r",
									"        } else {\r",
									"            pm.test(\"GET ProgramByID request Successful after Program Deletion\", function () {\r",
									"\r",
									"                if (res.json().programId === pm.collectionVariables.get(\"programID_All\")) {\r",
									"                    pm.expect(res.json().programStatus).to.eql(\"Inactive\")\r",
									"\r",
									"                }\r",
									"            });\r",
									"\r",
									"            // remove the program info at collection level\r",
									"            pm.collectionVariables.unset(\"programID_All\");\r",
									"            pm.collectionVariables.unset(\"programName_All\")\r",
									"            pm.collectionVariables.unset(\"programDesc_All\")\r",
									"            pm.collectionVariables.unset(\"programStatus_All\") \r",
									"            pm.collectionVariables.unset(\"ProgramCount_BeforeAdd\")\r",
									"            \r",
									"        }\r",
									"    });\r",
									"//}\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"//DEFECT 1 - 404 MSG IS INCORRECT\r",
									"/*\r",
									" 404:ErrorwithMessage(Eg:\"message\":\"no record found withprogramName\", \"success\":\r",
									" false)\r",
									"  */\r",
									"\r",
									"/*\r",
									"{ 404 Not Found\r",
									"  \"message\": \"Active Program with the program name SeleniumPython-Teneqn Not found\",\r",
									"  \"success\": false\r",
									"}\r",
									" */\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "63381237-d78a-4051-9f75-717e1e23c049",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/deletebyprogname/:programName",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"deletebyprogname",
								":programName"
							],
							"variable": [
								{
									"key": "programName",
									"value": "{{programName_All}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Negative - DelProgramByProgramName",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d2776f72-6515-460c-9854-74e5f1edc778",
								"exec": [
									"const expStatusCode = pm.collectionVariables.get(\"statusCode\");\r",
									"const expStatusLine = pm.collectionVariables.get(\"statusLine\");\r",
									"const expHttpMethod = pm.collectionVariables.get(\"httpMethod\");\r",
									"const scenarioName = pm.collectionVariables.get(\"scenarioName\");\r",
									"const pathParameter = pm.collectionVariables.get(\"pathParameter\");\r",
									"\r",
									"\r",
									"//NEGATIVE TEST VALIDATION\r",
									"//1. Status\r",
									"pm.test(`Status code is ${expStatusCode}`, function () {\r",
									"    pm.response.to.have.status(expStatusCode);\r",
									"});\r",
									"\r",
									"//2. Status Line\r",
									"pm.test(`Status message is ${expStatusLine}`, function () {\r",
									"    pm.response.to.have.status(expStatusLine);\r",
									"});\r",
									"\r",
									"//3. Scenario specific Tests\r",
									"if(scenarioName === \"Incorrect Http Method\") {\r",
									"    pm.test(`Validate ${scenarioName} Response msg`, () => {\r",
									"        pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"        pm.expect(pm.response.json().message).to.eql(`Request method '${expHttpMethod}' is not supported`);\r",
									"        pm.expect(pm.response.json().success).to.eql(false);\r",
									"        \r",
									"    });\r",
									"}\r",
									"\r",
									"if(scenarioName.includes(\"Non-existing Program Name\")||scenarioName.includes(\"Number\")||scenarioName.includes(\"Special Character\")||scenarioName.includes(\"Null Value\")) {\r",
									"    pm.test(`Validate ${scenarioName} Response msg`, () => {\r",
									"        pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"        pm.expect(pm.response.json().message).to.eql(`Active Program with the program name ${pathParameter} Not found`); //work on this\r",
									"        pm.expect(pm.response.json().success).to.eql(false);\r",
									"        \r",
									"    });\r",
									"}\r",
									"\r",
									"if(scenarioName.includes(\"Incorrect Endpoint\")) {\r",
									"    pm.test(`Validate ${scenarioName}  Response msg`, () => {\r",
									"        pm.expect(pm.response.headers.get('Content-Type')).to.includes('text/plain');\r",
									"        pm.expect(pm.response.text()).to.eql(`Invalid endpoint`);\r",
									"        \r",
									"    });\r",
									"}\r",
									"\r",
									"if(scenarioName === \"Incorrect BaseURL\") {\r",
									"    pm.test(`Validate ${scenarioName} Response msg`, () => {\r",
									"        pm.expect(pm.response.headers.get('Content-Type')).to.includes('text/html');\r",
									"        pm.expect(pm.response.text()).to.includes('<title>Heroku | Application Error</title>');\r",
									"        \r",
									"    });\r",
									"}\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "a57d31a9-20fe-4ece-b8a0-2d987f097c6a",
								"exec": [
									"console.log(\"Inside pre-requisite\")\r",
									"var scenarioName = pm.collectionVariables.get(\"scenarioName\");\r",
									"console.log(\"Scenario Name \"+scenarioName)\r",
									"pm.variables.set(\"BearerToken\",pm.collectionVariables.get(\"BearerToken\"));\r",
									"pm.variables.set(\"programName\", pm.collectionVariables.get(\"programName_ModuleIntegration\"))\r",
									"\r",
									"if(scenarioName === \"Incorrect Http Method\"){\r",
									"    pm.request.method = pm.collectionVariables.get(\"httpMethod\");;\r",
									"}\r",
									"\r",
									"if(scenarioName.includes(\"PathParameter\")){\r",
									"    pm.variables.set(\"programName\", pm.collectionVariables.get(\"pathParameter\"))\r",
									"}\r",
									"\r",
									"\r",
									"if(scenarioName === \"Incorrect BaseURL\"){\r",
									"    pm.variables.set(\"baseURL\", pm.collectionVariables.get('baseURL'))\r",
									"}\r",
									"\r",
									"if(scenarioName === \"No Auth\"){\r",
									"    pm.variables.set(\"BearerToken\",\"\")\r",
									"    pm.variables.set(\"baseURL\", pm.collectionVariables.get('baseURL'))\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "d7123df4-d125-4c8b-8605-b7973a0b090c",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [],
						"url": "{{baseURL}}/{{endPoint}}/{{programName}}"
					},
					"response": []
				}
			],
			"id": "cebf6f34-f2c4-4439-9067-fd483d168029"
		},
		{
			"name": "Batch",
			"item": [
				{
					"name": "AllBatches",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3148edf8-6d68-4c59-abcc-1fa7f149238a",
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"//POSITIVE TEST VALIDATION\r",
									"//1. Status\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//2. Status Line\r",
									"pm.test(\"Status message is OK\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"//3. Test for Content-Type header having a particular value\r",
									"pm.test(\"Content-Type header is application/json\", () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"});\r",
									"\r",
									"//4. Schema Validation -- TO BE DONE\r",
									"const schema = {}\r",
									"\r",
									"//SET TOTAL COUNT\r",
									"console.log(response.length)\r",
									"pm.collectionVariables.set(\"BatchCount_BeforeAdd\",response.length)\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "f9251d9f-7678-4ed8-ac5f-63bee5a75e67",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseURL}}/batches"
					},
					"response": []
				},
				{
					"name": "CreateNewBatch-Mandatory",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "54a6a48b-7699-4b70-9898-6ec3b615367e",
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"//POSITIVE TEST VALIDATION\r",
									"if(pm.response.to.have.status(201)){ // HAPPY PATH\r",
									"\r",
									"    //1. Status\r",
									"    pm.test(\"Status code is 201\", function () {\r",
									"        pm.response.to.have.status(201);\r",
									"    });\r",
									"\r",
									"    //2. Status Line\r",
									"    pm.test(\"Status message is Created\", function () {\r",
									"        pm.response.to.have.status(\"Created\");\r",
									"    });\r",
									"\r",
									"    //3. Test for Content-Type header having a particular value\r",
									"    pm.test(\"Content-Type header is application/json\", () => {\r",
									"        pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"    });\r",
									"\r",
									"    //4. Schema Validation -- TO BE DONE\r",
									"\r",
									"    //5. Request VS Response Body Validation\r",
									"    pm.test(\"Program details in Request and Response matches\", function () {\r",
									"\r",
									"        // Get the raw request body and Parse it to JSON\r",
									"        const rawRequestBody = pm.request.body.raw;\r",
									"        const requestBody = JSON.parse(rawRequestBody);\r",
									"\r",
									"        pm.expect(response).to.have.property(\"batchId\")\r",
									"        pm.expect(requestBody.batchDescription).to.eql(response.batchDescription);\r",
									"        pm.expect(requestBody.batchName).to.eql(response.batchName);        \r",
									"        pm.expect(requestBody.batchNoOfClasses).to.eql(response.batchNoOfClasses);\r",
									"        pm.expect(requestBody.batchStatus).to.eql(response.batchStatus);\r",
									"        pm.expect(requestBody.programId).to.eql(response.programId);\r",
									"        pm.expect(pm.collectionVariables.get(\"programName_ModuleIntegration\")).to.eql(response.programName);\r",
									"        \r",
									"\r",
									"    });\r",
									"\r",
									"    //GET ALL PROGRAMS COUNT AFTER PROGRAM CREATION\r",
									"    pm.test(\"Check Total Batch Count increased by 1\", function () {\r",
									"        \r",
									"        // Perform GET request programmatically\r",
									"        pm.sendRequest({\r",
									"            url: pm.environment.get(\"baseURL\")+'/batches',  \r",
									"            method: 'GET',\r",
									"            header: {\r",
									"               'Authorization': 'Bearer ' + pm.collectionVariables.get(\"BearerToken\") \r",
									"            }\r",
									"        }, function (err, res) {\r",
									"            if (err) {\r",
									"                console.log(err);\r",
									"                return;\r",
									"            } else {\r",
									"               \r",
									"                const batches = res.json(); \r",
									"                const count = batches.length; \r",
									"\r",
									"                    pm.expect(batches).to.include(response.batchName);\r",
									"                    pm.expect(count).to.equal((pm.collectionVariables.get(\"BatchCount_BeforeAdd\"))+1); \r",
									"                \r",
									"            }\r",
									"        });\r",
									"    });\r",
									"\r",
									"}\r",
									"\r",
									"\r",
									"//SET VALUE AT RUN TIME (LATER CHECK IF THIS COULD BE TRANSFERRED AS PROGRAM OBJECT!!!!)\r",
									"pm.collectionVariables.set(\"batchID_Mandatory\", response.batchId)\r",
									"pm.collectionVariables.set(\"batchName_Mandatory\", response.batchName)\r",
									"pm.collectionVariables.set(\"batchNoOfClasses_Mandatory\", response.batchNoOfClasses)\r",
									"pm.collectionVariables.set(\"batchDesc_Mandatory\", response.batchDescription)\r",
									"pm.collectionVariables.set(\"batchStatus_Mandatory\", response.batchStatus)\r",
									"\r",
									"\r",
									"//NEGATIVE TEST VALIDATION\r",
									"/**\r",
									" * status code = 400\r",
									"{   \r",
									"    \"message\": \"programName Must contain only letters and sometimes hyphens\",\r",
									"    \"success\": false\r",
									"}\r",
									" */\r",
									"\r",
									"\r",
									"\r",
									"/*\r",
									"Mandatory: BatchName,programID,Batchstatus,NoofClasses\r",
									"\r",
									"//Response\r",
									"{\r",
									" \"batchDescription\":\"string\",\r",
									" \"batchId\":0,\r",
									" \"batchName\":\"string\",\r",
									" \"batchNoOfClasses\":0,\r",
									" \"batchStatus\":\"string\",\r",
									" \"programId\":0,\r",
									" \"programName\":\"string\"\r",
									" }\r",
									" */"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "26e9f29d-e9ec-4cda-8a10-aadfc01f9210",
								"exec": [
									"const programIdData = pm.collectionVariables.get(\"programID_ModuleIntegration\")\r",
									"pm.variables.set(\"programIdData\", programIdData)\r",
									"\r",
									"function getRandomLetterString() {\r",
									"    const letters = 'abcdefghijklmnopqrstuvwxyz';\r",
									"    let randomString = '';\r",
									"    \r",
									"    // Loop 3 times to generate a 3-letter string\r",
									"    for (let i = 0; i < 3; i++) {\r",
									"        const randomIndex = Math.floor(Math.random() * letters.length); \r",
									"        randomString += letters[randomIndex]; \r",
									"    }\r",
									"\r",
									"    return randomString;\r",
									"}\r",
									"\r",
									"//var batchName_Mandatory_data = 'Batch Mandatory'+ getRandomLetterString(); //Defect\r",
									"var batchName_Mandatory_data = 'Batch-Mandatory'+ getRandomLetterString(); //worked\r",
									"\r",
									"pm.variables.set(\"batchName_Mandatory_data\",batchName_Mandatory_data)\r",
									"\r",
									"/*\r",
									"{\r",
									"    \"message\": \"batchName Please provide a valid name and must begin with letter and can have letters,numbers and sometimes hyphens\",\r",
									"    \"success\": false\r",
									"}\r",
									" */"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "80762521-dca7-4834-a140-ee9acf10e63c",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n \"batchDescription\":\"\",\r\n \"batchName\":\"{{batchName_Mandatory_data}}\", //Unique & Mandatory\r\n \"batchNoOfClasses\":8,  //Mandatory\r\n \"batchStatus\":\"Active\",  //Mandatory\r\n \"programId\":{{programIdData}}  //Mandatory\r\n }\r\n\r\n\r\n\r\n /*\r\n {\r\n    \"message\": \"batchName Please provide a valid name and must begin with letter and can have letters,numbers and sometimes hyphens\",\r\n    \"success\": false\r\n}\r\n */",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}/batches"
					},
					"response": []
				},
				{
					"name": "CreateNewBatch-All",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "54a6a48b-7699-4b70-9898-6ec3b615367e",
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"//POSITIVE TEST VALIDATION\r",
									"if (pm.response.to.have.status(201)) { // HAPPY PATH\r",
									"\r",
									"    //1. Status\r",
									"    pm.test(\"Status code is 201\", function () {\r",
									"        pm.response.to.have.status(201);\r",
									"    });\r",
									"\r",
									"    //2. Status Line\r",
									"    pm.test(\"Status message is Created\", function () {\r",
									"        pm.response.to.have.status(\"Created\");\r",
									"    });\r",
									"\r",
									"    //3. Test for Content-Type header having a particular value\r",
									"    pm.test(\"Content-Type header is application/json\", () => {\r",
									"        pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"    });\r",
									"\r",
									"    //4. Schema Validation -- TO BE DONE\r",
									"\r",
									"    //5. Request VS Response Body Validation\r",
									"    pm.test(\"Program details in Request and Response matches\", function () {\r",
									"\r",
									"        // Get the raw request body and Parse it to JSON\r",
									"        const rawRequestBody = pm.request.body.raw;\r",
									"        const requestBody = JSON.parse(rawRequestBody);\r",
									"\r",
									"        pm.expect(response).to.have.property(\"batchId\")\r",
									"        pm.expect(requestBody.batchDescription).to.eql(response.batchDescription);\r",
									"        pm.expect(requestBody.batchName).to.eql(response.batchName);\r",
									"        pm.expect(requestBody.batchNoOfClasses).to.eql(response.batchNoOfClasses);\r",
									"        pm.expect(requestBody.batchStatus).to.eql(response.batchStatus);\r",
									"        pm.expect(requestBody.programId).to.eql(response.programId);\r",
									"        pm.expect(pm.collectionVariables.get(\"programName_ModuleIntegration\")).to.eql(response.programName);\r",
									"\r",
									"\r",
									"    });\r",
									"\r",
									"    //GET ALL PROGRAMS COUNT AFTER PROGRAM CREATION\r",
									"    pm.test(\"Check Total Batch Count increased by 1\", function () {\r",
									"\r",
									"        // Perform GET request programmatically\r",
									"        pm.sendRequest({\r",
									"            url: pm.environment.get(\"baseURL\") + '/batches',\r",
									"            method: 'GET',\r",
									"            header: {\r",
									"                'Authorization': 'Bearer ' + pm.collectionVariables.get(\"BearerToken\")\r",
									"            }\r",
									"        }, function (err, res) {\r",
									"            if (err) {\r",
									"                console.log(err);\r",
									"                return;\r",
									"            } else {\r",
									"\r",
									"                const batches = res.json();\r",
									"                const count = batches.length;\r",
									"\r",
									"                pm.expect(batches).to.include(response.batchName);\r",
									"                pm.expect(count).to.equal((pm.collectionVariables.get(\"BatchCount_BeforeAdd\")) + 2);\r",
									"                pm.collectionVariables.unset(\"BatchCount_BeforeAdd\")\r",
									"            }\r",
									"        });\r",
									"    });\r",
									"\r",
									"}\r",
									"\r",
									"\r",
									"//SET VALUE AT RUN TIME (LATER CHECK IF THIS COULD BE TRANSFERRED AS PROGRAM OBJECT!!!!)\r",
									"pm.collectionVariables.set(\"batchID_ModuleIntegration\", response.batchId)\r",
									"pm.collectionVariables.set(\"batchName_ModuleIntegration\", response.batchName)\r",
									"pm.collectionVariables.set(\"batchNoOfClasses_ModuleIntegration\", response.batchNoOfClasses)\r",
									"pm.collectionVariables.set(\"batchDesc_ModuleIntegration\", response.batchDescription)\r",
									"pm.collectionVariables.set(\"batchStatus_ModuleIntegration\", response.batchStatus)\r",
									"\r",
									"\r",
									"//NEGATIVE TEST VALIDATION\r",
									"/**\r",
									" * status code = 400\r",
									"{   \r",
									"    \"message\": \"programName Must contain only letters and sometimes hyphens\",\r",
									"    \"success\": false\r",
									"}\r",
									" */\r",
									"\r",
									"\r",
									"\r",
									"/*\r",
									"Mandatory: BatchName,programID,Batchstatus,NoofClasses\r",
									"\r",
									"//Response\r",
									"{\r",
									" \"batchDescription\":\"string\",\r",
									" \"batchId\":0,\r",
									" \"batchName\":\"string\",\r",
									" \"batchNoOfClasses\":0,\r",
									" \"batchStatus\":\"string\",\r",
									" \"programId\":0,\r",
									" \"programName\":\"string\"\r",
									" }\r",
									" */"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "26e9f29d-e9ec-4cda-8a10-aadfc01f9210",
								"exec": [
									"const programIdData = pm.collectionVariables.get(\"programID_ModuleIntegration\")\r",
									"pm.variables.set(\"programIdData\", programIdData)\r",
									"\r",
									"function getRandomLetterString() {\r",
									"    const letters = 'abcdefghijklmnopqrstuvwxyz';\r",
									"    let randomString = '';\r",
									"    \r",
									"    // Loop 3 times to generate a 3-letter string\r",
									"    for (let i = 0; i < 3; i++) {\r",
									"        const randomIndex = Math.floor(Math.random() * letters.length); \r",
									"        randomString += letters[randomIndex]; \r",
									"    }\r",
									"\r",
									"    return randomString;\r",
									"}\r",
									"\r",
									"//var batchName_Mandatory_data = 'Batch Mandatory'+ getRandomLetterString(); //Defect\r",
									"var batchName_All_data = 'Batch-All'+ getRandomLetterString(); //worked\r",
									"var batchName_All_data = 'Batch-All'+ getRandomLetterString() + ' Number3'; //Defect\r",
									"var batchName_All_data = 'Batch-All'+ getRandomLetterString() + '-Number3'; //worked\r",
									"\r",
									"\r",
									"pm.variables.set(\"batchName_All_data\",batchName_All_data)\r",
									"\r",
									"/*\r",
									"{\r",
									"    \"message\": \"batchName Please provide a valid name and must begin with letter and can have letters,numbers and sometimes hyphens\",\r",
									"    \"success\": false\r",
									"}\r",
									" */"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "5c21889d-7982-4a1a-ab1b-c45d99295f66",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n \"batchDescription\":\"Ao Ao Description\",\r\n \"batchName\":\"{{batchName_All_data}}\", //Unique & Mandatory\r\n \"batchNoOfClasses\":8,  //Mandatory\r\n \"batchStatus\":\"Active\",  //Mandatory\r\n \"programId\":{{programIdData}}  //Mandatory\r\n }\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}/batches"
					},
					"response": []
				},
				{
					"name": "BatchbyBatchId",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fa10bada-951f-415c-b7a6-f665a53166bd",
								"exec": [
									"const response = pm.response.json();\r",
									"var batchList = pm.collectionVariables.get(\"batchList\");\r",
									"\r",
									"//Happy Path - Positive\r",
									"if(pm.response.to.have.status(200)){\r",
									"\r",
									"    //1. Status Code\r",
									"    pm.test(\"Status code is 200\", function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    });\r",
									"\r",
									"    //2. Status Line\r",
									"    pm.test(\"Status message is OK\", function () {\r",
									"        pm.response.to.have.status(\"OK\");\r",
									"    });\r",
									"\r",
									"    //3. Test for Content-Type header having a particular value\r",
									"    pm.test(\"Content-Type header is application/json\", () => {\r",
									"        pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"    });\r",
									"\r",
									"    //4. Schema Validation -- TO BE DONE -- DEFECT -- RESPONSE SHOULD BE IN ARRAY AND NOT AS PLAIN SINGLE OBJECT\r",
									"\r",
									"    //5. Data Validation\r",
									"    if(pm.variables.get(\"batchId\") === pm.collectionVariables.get(\"batchID_Mandatory\")){\r",
									"        \r",
									"        pm.test(\"Validate stored Batch data with response data\", function () {\r",
									"\r",
									"        pm.expect(pm.collectionVariables.get(\"batchID_Mandatory\")).to.eql(response.programId);\r",
									"        pm.expect(pm.collectionVariables.get(\"batchName_Mandatory\")).to.eql(response.batchName);\r",
									"        pm.expect(pm.collectionVariables.get(\"batchNoOfClasses_Mandatory\")).to.eql(response.batchNoOfClasses);\r",
									"        pm.expect(pm.collectionVariables.get(\"batchDesc_Mandatory\")).to.eql(response.batchDescription);\r",
									"        pm.expect(pm.collectionVariables.get(\"batchStatus_Mandatory\")).to.eql(response.batchStatus);\r",
									"         });\r",
									"\r",
									"    } else if (pm.variables.get(\"batchId\") === \"batchID_ModuleIntegration\") {\r",
									"\r",
									"\r",
									"         pm.test(\"Validate stored programs data with response data\", function () {\r",
									"            pm.expect(pm.collectionVariables.get(\"programID_ModuleIntegration\")).to.eql(response.programId);\r",
									"            pm.expect(pm.collectionVariables.get(\"batchName_ModuleIntegration\")).to.eql(response.batchName);\r",
									"            pm.expect(pm.collectionVariables.get(\"batchDesc_ModuleIntegration\")).to.eql(response.batchDescription);\r",
									"            pm.expect(pm.collectionVariables.get(\"batchStatus_ModuleIntegration\")).to.eql(response.batchStatus);\r",
									"         });\r",
									"    }\r",
									"\r",
									"\r",
									"}\r",
									"\r",
									"\r",
									"if(batchList.length>0){\r",
									"    console.log(\"Inside loop for next repetition\")\r",
									"    pm.execution.setNextRequest(\"BatchbyBatchId\")\r",
									"\r",
									"}\r",
									"else{\r",
									"    console.log(\"No more program id list\")\r",
									"    pm.collectionVariables.unset(\"batchList\");\r",
									"    pm.collectionVariables.unset(\"batchId\");\r",
									"    pm.execution.setNextRequest(null);\r",
									"}\r",
									"\r",
									"\r",
									"/*\r",
									"{\r",
									"    \"message\": \"Batch not found with Id : 91799 \",\r",
									"    \"success\": false\r",
									"}\r",
									" */"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "2677842c-8bbe-4931-b420-68f1399b92a8",
								"exec": [
									"//Get list of program created\r",
									"var batchList = pm.collectionVariables.get(\"batchList\")\r",
									"console.log(batchList);\r",
									"\r",
									"\r",
									"if(!batchList){\r",
									"  batchList = [pm.collectionVariables.get(\"batchID_Mandatory\"), pm.collectionVariables.get(\"batchID_ModuleIntegration\")];\r",
									"  console.log(\"batchList = \"+batchList);\r",
									"}\r",
									"\r",
									"var currentBatch = batchList.shift();\r",
									"console.log('Current Batch = '+currentBatch);\r",
									"\r",
									"pm.collectionVariables.set(\"currentBatch\", currentBatch)\r",
									"console.log(pm.collectionVariables.get(\"currentBatch\"))\r",
									"\r",
									"//set the remainder names at data level\r",
									"pm.collectionVariables.set(\"batchList\", batchList); "
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "c78b22c3-23eb-4b4a-8cc9-f8e6a6f0976b",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/batches/batchId/:batchId",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"batches",
								"batchId",
								":batchId"
							],
							"variable": [
								{
									"id": "47d06168-995d-4957-a1d1-64d85f467759",
									"key": "batchId",
									"value": "{{currentBatch}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "BatchbyBatchName",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fa10bada-951f-415c-b7a6-f665a53166bd",
								"exec": [
									"const response = pm.response.json();\r",
									"var batchNameList = pm.collectionVariables.get(\"batchNameList\");\r",
									"\r",
									"//Happy Path - Positive\r",
									"if(pm.response.to.have.status(200)){\r",
									"\r",
									"    //1. Status Code\r",
									"    pm.test(\"Status code is 200\", function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    });\r",
									"\r",
									"    //2. Status Line\r",
									"    pm.test(\"Status message is OK\", function () {\r",
									"        pm.response.to.have.status(\"OK\");\r",
									"    });\r",
									"\r",
									"    //3. Test for Content-Type header having a particular value\r",
									"    pm.test(\"Content-Type header is application/json\", () => {\r",
									"        pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"    });\r",
									"\r",
									"    //4. Schema Validation -- TO BE DONE\r",
									"\r",
									"    //5. Data Validation\r",
									"    if(pm.variables.get(\"currentBatchName\") === pm.collectionVariables.get(\"batchName_Mandatory\")){\r",
									"        \r",
									"        pm.test(\"Validate stored Batch data with response data\", function () {\r",
									"\r",
									"        pm.expect(pm.collectionVariables.get(\"batchID_Mandatory\")).to.eql(response[0].batchId);\r",
									"        pm.expect(pm.collectionVariables.get(\"batchName_Mandatory\")).to.eql(response[0].batchName);\r",
									"        pm.expect(pm.collectionVariables.get(\"batchNoOfClasses_Mandatory\")).to.eql(response[0].batchNoOfClasses);\r",
									"        pm.expect(pm.collectionVariables.get(\"batchDesc_Mandatory\")).to.eql(response[0].batchDescription);\r",
									"        pm.expect(pm.collectionVariables.get(\"batchStatus_Mandatory\")).to.eql(response[0].batchStatus);\r",
									"         });\r",
									"\r",
									"    } else if (pm.variables.get(\"currentBatchName\") === \"batchName_ModuleIntegration\") {\r",
									"\r",
									"        console.log(pm.collectionVariables.get(\"batchID_ModuleIntegration\"))\r",
									"\r",
									"         pm.test(\"Validate stored programs data with response data\", function () {\r",
									"            pm.expect(pm.collectionVariables.get(\"programID_ModuleIntegration\")).to.eql(response[0].batchId);\r",
									"            pm.expect(pm.collectionVariables.get(\"batchName_ModuleIntegration\")).to.eql(response[0].batchName);\r",
									"            pm.expect(pm.collectionVariables.get(\"batchNoOfClasses_ModuleIntegration\")).to.eql(response[0].batchNoOfClasses);            \r",
									"            pm.expect(pm.collectionVariables.get(\"batchDesc_ModuleIntegration\")).to.eql(response[0].batchDescription);\r",
									"            pm.expect(pm.collectionVariables.get(\"batchStatus_ModuleIntegration\")).to.eql(response[0].batchStatus);\r",
									"         });\r",
									"    }\r",
									"\r",
									"\r",
									"}\r",
									"\r",
									"\r",
									"if(batchNameList.length>0){\r",
									"    console.log(\"Inside loop for next repetition\")\r",
									"    pm.execution.setNextRequest(\"BatchbyBatchName\")\r",
									"\r",
									"}\r",
									"else{\r",
									"    console.log(\"No more batchName list\")\r",
									"    pm.collectionVariables.unset(\"batchNameList\");\r",
									"    pm.collectionVariables.unset(\"currentBatchName\");\r",
									"    pm.execution.setNextRequest(null);\r",
									"}\r",
									"\r",
									"\r",
									"/*\r",
									"{\r",
									"    \"message\": \"Batch not found with Id : 91799 \",\r",
									"    \"success\": false\r",
									"}\r",
									" */\r",
									"/*\r",
									"{\r",
									"    \"message\": \"programBatch with name activejava43456 not found\",\r",
									"    \"success\": false\r",
									"}\r",
									" */"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "6a55eac9-71ce-4515-a034-366cce51f033",
								"exec": [
									"//Get list of program created\r",
									"var batchNameList = pm.collectionVariables.get(\"batchNameList\")\r",
									"console.log(batchNameList);\r",
									"\r",
									"\r",
									"if(!batchNameList){\r",
									"  batchNameList = [pm.collectionVariables.get(\"batchName_Mandatory\"), pm.collectionVariables.get(\"batchName_ModuleIntegration\")];\r",
									"  console.log(\"batchNameList = \"+batchNameList);\r",
									"}\r",
									"\r",
									"var currentBatchName = batchNameList.shift();\r",
									"console.log('Current BatchName = '+currentBatchName);\r",
									"\r",
									"pm.collectionVariables.set(\"currentBatchName\", currentBatchName)\r",
									"console.log(pm.collectionVariables.get(\"currentBatchName\"))\r",
									"\r",
									"//set the remainder names at data level\r",
									"pm.collectionVariables.set(\"batchNameList\", batchNameList); "
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "98920319-6d05-4e4d-9c7a-8db2099728b6",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/batches/batchName/:batchName",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"batches",
								"batchName",
								":batchName"
							],
							"variable": [
								{
									"id": "c58b3bd0-cad4-48f0-ab17-ddf01a2c2c9c",
									"key": "batchName",
									"value": "{{currentBatchName}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "BatchbyProgramId",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fa10bada-951f-415c-b7a6-f665a53166bd",
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"//Happy Path - Positive\r",
									"if(pm.response.to.have.status(200)){\r",
									"\r",
									"    //1. Status Code\r",
									"    pm.test(\"Status code is 200\", function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    });\r",
									"\r",
									"    //2. Status Line\r",
									"    pm.test(\"Status message is OK\", function () {\r",
									"        pm.response.to.have.status(\"OK\");\r",
									"    });\r",
									"\r",
									"    //3. Test for Content-Type header having a particular value\r",
									"    pm.test(\"Content-Type header is application/json\", () => {\r",
									"        pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"    });\r",
									"\r",
									"    //4. Schema Validation -- TO BE DONE\r",
									"\r",
									"    //5a. Data Validation\r",
									"    pm.test(\"Validate all batches have same programID and programName\", function () {\r",
									"\r",
									"        response.map(item => {\r",
									"        pm.expect(item.programId).to.eql(pm.collectionVariables.get(\"programID_ModuleIntegration\"));\r",
									"        pm.expect(item.programName).to.eql(pm.collectionVariables.get(\"programName_ModuleIntegration\"));\r",
									"        })\r",
									"    });\r",
									"\r",
									"    //5b. Data Validation\r",
									"    pm.test(\"Validate batch list contain Created Batches\", function () {\r",
									"\r",
									"        const batchIds = response.map(item => item.batchId);\r",
									"        const batchNames = response.map(item => item.batchName);\r",
									"        \r",
									"        pm.expect(batchIds).contains(pm.collectionVariables.get(\"batchID_Mandatory\"), pm.collectionVariables.get(\"batchID_All\"))\r",
									"        pm.expect(batchNames).contains(pm.collectionVariables.get(\"batchName_Mandatory\"), pm.collectionVariables.get(\"batchName_All\"))\r",
									"    });\r",
									"    \r",
									"\r",
									"}\r",
									"\r",
									"/*\r",
									"{\r",
									"    \"message\": \"batch with this programId 16591123 not found\",\r",
									"    \"success\": false\r",
									"}\r",
									" */"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "dc90bdd4-4eef-47a9-9519-a3060122e02f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/batches/program/:programId",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"batches",
								"program",
								":programId"
							],
							"variable": [
								{
									"id": "eefa0d53-03a7-467f-a8eb-5d65e6d63c96",
									"key": "programId",
									"value": "{{programID_ModuleIntegration}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "UpdatebyBatchId",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "99ea712a-4fa9-4733-a4b5-8151161a2bdc",
								"exec": [
									"//POSITIVE TEST VALIDATION\r",
									"if(pm.response.to.have.status(200)){ // HAPPY PATH\r",
									"\r",
									"    //1. Status\r",
									"    pm.test(\"Status code is 200\", function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    });\r",
									"\r",
									"    //2. Status Line\r",
									"    pm.test(\"Status message is OK\", function () {\r",
									"        pm.response.to.have.status(\"OK\");\r",
									"    });\r",
									"\r",
									"    //3. Test for Content-Type header having a particular value\r",
									"    pm.test(\"Content-Type header is application/json\", () => {\r",
									"        pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"    });\r",
									"\r",
									"    //4. Schema Validation -- TO BE DONE\r",
									"\r",
									"    //5. Request VS Response Body Validation\r",
									"    pm.test(\"Batch details in Request and Response matches\", function () {\r",
									"\r",
									"        // Get the raw request body and Parse it to JSON\r",
									"        const response = pm.response.json();\r",
									"\r",
									"        const rawRequestBody = pm.request.body.raw;\r",
									"        console.log(\"Raw Request Body:\", rawRequestBody);\r",
									"        const requestBody = JSON.parse(rawRequestBody);\r",
									"\r",
									"        pm.expect(pm.collectionVariables.get(\"batchID_Mandatory\")).to.eql(response.batchId)\r",
									"        pm.expect(requestBody.batchName).to.eql(response.batchName);\r",
									"        pm.expect(requestBody.batchDescription).to.eql(response.batchDescription);\r",
									"        pm.expect(requestBody.batchStatus).to.eql(response.batchStatus);\r",
									"        pm.expect(requestBody.batchNoOfClasses).to.eql(response.batchNoOfClasses);\r",
									"        pm.expect(requestBody.programId).to.eql(response.programId);\r",
									"        pm.expect(requestBody.programName).to.eql(response.programName);\r",
									"\r",
									"    });\r",
									"\r",
									"}\r",
									"\r",
									"\r",
									"/*\r",
									"{\r",
									"    \"message\": \"Invalid Status: must be Active or Inactive\",\r",
									"    \"success\": false\r",
									"}\r",
									"\r",
									"{\r",
									"    \"message\": \" No of Classes is needed; It should be a positive number \",\r",
									"    \"success\": false\r",
									"}\r",
									"\r",
									"{\r",
									"    \"message\": \" ProgramId should be a positive number \",\r",
									"    \"success\": false\r",
									"}\r",
									"\r",
									"{\r",
									"    \"message\": \"Batch not found with Id : 9097123 \",\r",
									"    \"success\": false\r",
									"}\r",
									" */"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "edb6e91f-bddf-4532-96e0-d76972ee72a6",
								"exec": [
									"function getRandomLetterString() {\r",
									"    const letters = 'abcdefghijklmnopqrstuvwxyz';\r",
									"    let randomString = '';\r",
									"    \r",
									"    // Loop 3 times to generate a 3-letter string\r",
									"    for (let i = 0; i < 3; i++) {\r",
									"        const randomIndex = Math.floor(Math.random() * letters.length); \r",
									"        randomString += letters[randomIndex]; \r",
									"    }\r",
									"\r",
									"    return randomString;\r",
									"}\r",
									"\r",
									"//var batchName_Mandatory_data = 'Batch Mandatory'+ getRandomLetterString(); //Defect\r",
									"var batchName_Mandatory_dataupdate = 'Batch-Mandatory-Update'+ getRandomLetterString(); //worked\r",
									"\r",
									"pm.variables.set(\"batchName_Mandatory_dataupdate\",batchName_Mandatory_dataupdate)"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "caf50a77-e2ec-4d4e-855f-188c883c5a9a",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n//  \"batchDescription\":\"Batch Desc Updated\",\r\n//  \"batchId\":{{batchID_Mandatory}},\r\n \"batchDescription\":\"\",\r\n \"batchId\":1234, //doesnt matter. it is whatever is passed as path parameter\r\n \"batchName\":\"{{batchName_Mandatory_dataupdate}}\",  //Mandatory\r\n \"batchNoOfClasses\":15, //Mandatory\r\n \"batchStatus\":\"Active\",  //Mandatory\r\n \"programId\": 16208,  //Mandatory\r\n \"programName\": \"DVLPRer\" //Mandatory\r\n }\r\n\r\n ",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/batches/:batchId",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"batches",
								":batchId"
							],
							"variable": [
								{
									"id": "2c945a2b-a19a-416b-a6d1-743570112d45",
									"key": "batchId",
									"value": "{{batchID_Mandatory}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DeletebatchbyBatchId",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1c22dca5-5599-48da-93e9-54e395d43d6b",
								"exec": [
									"// var batchNameList = pm.collectionVariables.get(\"batchNameList\");\r",
									"var currentBatch = pm.collectionVariables.get(\"batchID_Mandatory\");\r",
									"\r",
									"//Happy Path - Positive\r",
									"if(pm.response.to.have.status(200)){\r",
									"\r",
									"    //1. Status Code\r",
									"    pm.test(\"Status code is 200\", function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    });\r",
									"\r",
									"    //2. Status Line\r",
									"    pm.test(\"Status message is OK\", function () {\r",
									"        pm.response.to.have.status(\"OK\");\r",
									"    });\r",
									"\r",
									"    //3. Test for Content-Type header having a particular value\r",
									"    pm.test(\"Content-Type header is application/json\", () => {\r",
									"        pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"    });\r",
									"\r",
									"    //4. Schema Validation -- TO BE DONE\r",
									"\r",
									"    //5. Data Validation        \r",
									"  /*  pm.test(\"Validate stored Batch data with response data\", function () {\r",
									"\r",
									"        pm.expect(response).to.include('Message: Batch with Id-'+currentBatch+' deleted Successfully!');\r",
									"        DEFECT!! ERROR ENCOUNTERED --> JSONError: Unexpected token 'M' at 1:1 Message: Batch with Id-9684 deleted Successfully! ^  -- CANNOT VALIDATE DELETE MSG SINCE  Unexpected token 'M' at 1:1: This means that Postman was expecting JSON data (starting with {, [, or other JSON-valid characters), but it found the character 'M' (the first character of \"Message: Batch with Id-9684 deleted Successfully!\").  Message: Batch with Id-9684 deleted Successfully!: This is the raw text from your response body, which is not in valid JSON format \r",
									"    }); */\r",
									"\r",
									"    //5. Validate Delete Program status has changed to Inactive\r",
									"        // Programmatically make a GET request using the ProgramID\r",
									"        pm.sendRequest({\r",
									"            url:  pm.environment.get(\"baseURL\") + `/batches/batchId/` + currentBatch , \r",
									"            method: 'GET',\r",
									"            header: {\r",
									"                'Authorization': 'Bearer ' + pm.collectionVariables.get(\"BearerToken\") \r",
									"            }\r",
									"        }, function (err, res) {\r",
									"            if (err) {\r",
									"                pm.test(\"GET BatchByID request failed after Batch Deletion\", function() {\r",
									"                  console.log(err);\r",
									"                return;\r",
									"                });\r",
									"            } else {\r",
									"                pm.test(\"GET BatchByID request Successful after Batch Deletion\", function() {\r",
									"\r",
									"                    pm.expect(res.json().batchStatus).to.eql(\"Inactive\")\r",
									"\r",
									"                        // remove the batch info at collection level\r",
									"                        pm.collectionVariables.unset(\"batchID_Mandatory\");\r",
									"                        pm.collectionVariables.unset(\"batchName_Mandatory\")\r",
									"                        pm.collectionVariables.unset(\"batchDesc_Mandatory\")\r",
									"                        pm.collectionVariables.unset(\"batchNoOfClasses_Mandatory\")\r",
									"                        pm.collectionVariables.unset(\"batchStatus_Mandatory\")    \r",
									"                });\r",
									"\r",
									"                \r",
									"            }\r",
									"    });\r",
									"\r",
									"\r",
									"\r",
									"}\r",
									"\r",
									"\r",
									"/*\r",
									"{\r",
									"    \"message\": \"Batch not found with Id : 91799 \",\r",
									"    \"success\": false\r",
									"}\r",
									" */\r",
									"/*\r",
									"{\r",
									"    \"message\": \"programBatch with name activejava43456 not found\",\r",
									"    \"success\": false\r",
									"}\r",
									" */\r",
									"\r",
									"\r",
									"/*\r",
									"{\r",
									"    \"message\": \"Batch id not found or not exists 925122\",\r",
									"    \"success\": false\r",
									"} \r",
									"*/"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "eaee0068-97f3-4ffe-bb5b-e62eeb433c10",
								"exec": [
									"//Get list of program created\r",
									"// var batchList = pm.collectionVariables.get(\"batchList\")\r",
									"// console.log(batchList);\r",
									"\r",
									"\r",
									"// if (!batchList) {\r",
									"//     batchList = [pm.collectionVariables.get(\"batchID_Mandatory\"), pm.collectionVariables.get(\"batchID_All\")];\r",
									"//     console.log(\"batchList = \" + batchList);\r",
									"// }\r",
									"\r",
									"// var currentBatch = batchList.shift();\r",
									"// console.log('Current Batch = ' + currentBatch);\r",
									"\r",
									"// pm.collectionVariables.set(\"currentBatch\", currentBatch)\r",
									"// console.log(pm.collectionVariables.get(\"currentBatch\"))\r",
									"\r",
									"// //set the remainder names at data level\r",
									"// pm.collectionVariables.set(\"batchList\", batchList); "
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "77f44398-d857-41b3-a310-e66525b55532",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/batches/:id",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"batches",
								":id"
							],
							"variable": [
								{
									"id": "8cc4bdc7-54a5-48b4-97b7-c490bf4379f1",
									"key": "id",
									"value": "{{batchID_Mandatory}}"
								}
							]
						}
					},
					"response": [
						{
							"id": "911c75ee-1a1a-4a1c-80a5-6e3c497dd727",
							"name": "DeletebatchbyBatchIdResponse",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/batches/:id",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"batches",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "9865"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Cowboy"
								},
								{
									"key": "Report-To",
									"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1741625597&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=PDLt%2B00Gslhxfgkc1x%2FIEozuZjdj88gMBe2QrUbcjjE%3D\"}]}"
								},
								{
									"key": "Reporting-Endpoints",
									"value": "heroku-nel=https://nel.heroku.com/reports?ts=1741625597&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=PDLt%2B00Gslhxfgkc1x%2FIEozuZjdj88gMBe2QrUbcjjE%3D"
								},
								{
									"key": "Nel",
									"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-Xss-Protection",
									"value": "0"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, max-age=0, must-revalidate"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "0"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000 ; includeSubDomains"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Content-Length",
									"value": "49"
								},
								{
									"key": "Date",
									"value": "Mon, 10 Mar 2025 16:53:17 GMT"
								},
								{
									"key": "Via",
									"value": "1.1 vegur"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "Message: Batch with Id-9865 deleted Successfully!"
						}
					]
				}
			],
			"id": "ae705100-802f-4758-a9c0-df74e4d857fc"
		},
		{
			"name": "Users",
			"item": [],
			"id": "ac94d086-3b0f-459e-82a5-a8b4dfa537e2"
		},
		{
			"name": "Class",
			"item": [
				{
					"name": "K",
					"item": [
						{
							"name": "User Sign In",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d7879f0f-737d-4293-b2a7-bec56b12e059",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "db514d74-6e51-4599-a44a-8e6d9526237f",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"password\": \"March@2025\",\r\n\"userLoginEmailId\":\"sdetorganizer@gmail.com\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "https://lms-hackthon-feb25-803334c87fbe.herokuapp.com/lms/login"
							},
							"response": []
						},
						{
							"name": "Get All Programs",
							"id": "181f8a63-17bc-4a92-82a8-db7775803862",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJzZGV0b3JnYW5pemVyQGdtYWlsLmNvbSIsImlhdCI6MTc0MTU2ODE5NywiZXhwIjoxNzQxNTk2OTk3fQ.fIsOTX6iisMZGssO-cZK3MzyPHEGEPzbf75rsJjYXpPIeO80X134n3EcjjSkgHs1F6AbyNP0qEDHouu4AxHxgw"
									}
								},
								"method": "GET",
								"header": [],
								"url": "https://lms-hackthon-feb25-803334c87fbe.herokuapp.com/lms/allPrograms"
							},
							"response": []
						},
						{
							"name": "Add New Program",
							"id": "89e06bdd-04f1-4625-b166-2415da5665b0",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJzZGV0b3JnYW5pemVyQGdtYWlsLmNvbSIsImlhdCI6MTc0MTU1ODA1OCwiZXhwIjoxNzQxNTg2ODU4fQ.ot2l_28xxbqvfOrtqD0dRrSiN_-Lxc-k7xTGJb83gD_9eli--7xymJjqwIoXuv4SX4JU3yUoK2jLsFR6223J3g"
									}
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"programDescription\": \"nodejs-core-java-SDET96\",\r\n\"programName\": \"Nodejs-selenium-core-java\",\r\n\"programStatus\": \"active\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "https://lms-hackthon-feb25-803334c87fbe.herokuapp.com/lms/saveprogram"
							},
							"response": []
						},
						{
							"name": "Get All Programs with Users",
							"id": "295f0eb7-5937-4ace-a525-bec6b1c1ec6b",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJzZGV0b3JnYW5pemVyQGdtYWlsLmNvbSIsImlhdCI6MTc0MTU1ODA1OCwiZXhwIjoxNzQxNTg2ODU4fQ.ot2l_28xxbqvfOrtqD0dRrSiN_-Lxc-k7xTGJb83gD_9eli--7xymJjqwIoXuv4SX4JU3yUoK2jLsFR6223J3g"
									}
								},
								"method": "GET",
								"header": [],
								"url": "https://lms-hackthon-feb25-803334c87fbe.herokuapp.com/lms/allProgramsWithUsers"
							},
							"response": []
						},
						{
							"name": "Get Program by Program Id",
							"id": "a4fabe9b-770e-4ace-a5cc-fa11603053c1",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJzZGV0b3JnYW5pemVyQGdtYWlsLmNvbSIsImlhdCI6MTc0MTU1ODA1OCwiZXhwIjoxNzQxNTg2ODU4fQ.ot2l_28xxbqvfOrtqD0dRrSiN_-Lxc-k7xTGJb83gD_9eli--7xymJjqwIoXuv4SX4JU3yUoK2jLsFR6223J3g"
									}
								},
								"method": "GET",
								"header": [],
								"url": "https://lms-hackthon-feb25-803334c87fbe.herokuapp.com/lms/programs/17195"
							},
							"response": []
						},
						{
							"name": "Update Program by Program Name",
							"id": "77bf53b7-7fb7-4a1b-aca1-b82a74233687",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJzZGV0b3JnYW5pemVyQGdtYWlsLmNvbSIsImlhdCI6MTc0MTU1ODA1OCwiZXhwIjoxNzQxNTg2ODU4fQ.ot2l_28xxbqvfOrtqD0dRrSiN_-Lxc-k7xTGJb83gD_9eli--7xymJjqwIoXuv4SX4JU3yUoK2jLsFR6223J3g"
									}
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"programName\": \"selenium-core-java-script\",\r\n    \"programDescription\": \"selenium-core-java-script-SDET25\",\r\n    \"programStatus\": \"Active\"\r\n   }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "https://lms-hackthon-feb25-803334c87fbe.herokuapp.com/lms/program/selenium-core-java"
							},
							"response": []
						},
						{
							"name": "Update Program by Program Id",
							"id": "a66c2121-13ec-4475-9837-1cb9c7acc62e",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJzZGV0b3JnYW5pemVyQGdtYWlsLmNvbSIsImlhdCI6MTc0MTU1ODA1OCwiZXhwIjoxNzQxNTg2ODU4fQ.ot2l_28xxbqvfOrtqD0dRrSiN_-Lxc-k7xTGJb83gD_9eli--7xymJjqwIoXuv4SX4JU3yUoK2jLsFR6223J3g"
									}
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"programDescription\":\"Angular-java-script-SEDT25\",\r\n\"programName\": \"Angular-java-script\",\r\n\"programStatus\": \"active\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "https://lms-hackthon-feb25-803334c87fbe.herokuapp.com/lms/putprogram/17195"
							},
							"response": []
						},
						{
							"name": "Get All Batches",
							"id": "7a90d05f-b74e-4f66-bb12-08252cff20c5",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJzZGV0b3JnYW5pemVyQGdtYWlsLmNvbSIsImlhdCI6MTc0MTU1OTczMCwiZXhwIjoxNzQxNTg4NTMwfQ.CPrlPkrw8BFqn7nPEwE87FWVvfEYT8k3u_fAbiO7HGmTsd1Z5OYU0U4xX7SOEd8gTfi9oKkkl53LmxIjxEALyQ"
									}
								},
								"method": "GET",
								"header": [],
								"url": "https://lms-hackthon-feb25-803334c87fbe.herokuapp.com/lms/batches"
							},
							"response": []
						},
						{
							"name": "Create New Batch",
							"id": "537878d0-1640-4c13-bf02-ec7c38522787",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJzZGV0b3JnYW5pemVyQGdtYWlsLmNvbSIsImlhdCI6MTc0MTU1OTczMCwiZXhwIjoxNzQxNTg4NTMwfQ.CPrlPkrw8BFqn7nPEwE87FWVvfEYT8k3u_fAbiO7HGmTsd1Z5OYU0U4xX7SOEd8gTfi9oKkkl53LmxIjxEALyQ"
									}
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"batchDescription\": \"Code-Scrappers_25\",\r\n    \"batchName\": \"Node-js\",\r\n    \"batchNoOfClasses\": 5,\r\n    \"batchStatus\": \"Active\",\r\n    \"programId\": 17235\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "https://lms-hackthon-feb25-803334c87fbe.herokuapp.com/lms/batches"
							},
							"response": []
						},
						{
							"name": "Get Batch by Batch Id",
							"id": "2517c7db-d77a-44ed-8251-32d7272242ce",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJzZGV0b3JnYW5pemVyQGdtYWlsLmNvbSIsImlhdCI6MTc0MTU1OTczMCwiZXhwIjoxNzQxNTg4NTMwfQ.CPrlPkrw8BFqn7nPEwE87FWVvfEYT8k3u_fAbiO7HGmTsd1Z5OYU0U4xX7SOEd8gTfi9oKkkl53LmxIjxEALyQ"
									}
								},
								"method": "GET",
								"header": [],
								"url": "https://lms-hackthon-feb25-803334c87fbe.herokuapp.com/lms/batches/batchId/9776"
							},
							"response": []
						},
						{
							"name": "Get Batch by Batch Name",
							"id": "ad133152-66ea-49dd-91d3-ed2a1fca0b5a",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJzZGV0b3JnYW5pemVyQGdtYWlsLmNvbSIsImlhdCI6MTc0MTU2MDU3MywiZXhwIjoxNzQxNTg5MzczfQ.sGg-EwZQ7ZZoaBp2b56N0v7bljZMYNVFC67IPvb_qBzcjko6jvppuPMKuis5on5Q02oCXRemP-fUv9Eq6qD2rA"
									}
								},
								"method": "GET",
								"header": [],
								"url": "https://lms-hackthon-feb25-803334c87fbe.herokuapp.com/lms/batches/batchName/Node-js"
							},
							"response": []
						},
						{
							"name": "Get Batch by Program Id",
							"id": "fae3a81a-8ee2-41c7-a6cd-19a6c796fc16",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJzZGV0b3JnYW5pemVyQGdtYWlsLmNvbSIsImlhdCI6MTc0MTU2MDU3MywiZXhwIjoxNzQxNTg5MzczfQ.sGg-EwZQ7ZZoaBp2b56N0v7bljZMYNVFC67IPvb_qBzcjko6jvppuPMKuis5on5Q02oCXRemP-fUv9Eq6qD2rA"
									}
								},
								"method": "GET",
								"header": [],
								"url": "https://lms-hackthon-feb25-803334c87fbe.herokuapp.com/lms/batches/program/17235"
							},
							"response": []
						},
						{
							"name": "Update Batch by Batch Id",
							"id": "a88da34d-6af4-4453-9046-5b34de8eb502",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJzZGV0b3JnYW5pemVyQGdtYWlsLmNvbSIsImlhdCI6MTc0MTU2MDU3MywiZXhwIjoxNzQxNTg5MzczfQ.sGg-EwZQ7ZZoaBp2b56N0v7bljZMYNVFC67IPvb_qBzcjko6jvppuPMKuis5on5Q02oCXRemP-fUv9Eq6qD2rA"
									}
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"batchDescription\": \"Java-script-node\",\r\n\"batchId\": 9776,\r\n\"batchName\": \"java-script-45\",\r\n\"batchNoOfClasses\": 5,\r\n\"batchStatus\": \"Active\",\r\n\"programId\": 17235,\r\n\"programName\": \"DsAlgo\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "https://lms-hackthon-feb25-803334c87fbe.herokuapp.com/lms/batches/9776"
							},
							"response": []
						},
						{
							"name": "Get All Class List 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c8131416-8a75-4753-be8b-d67b5ce3eceb",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "8ce0a881-e788-498c-b0e1-a1caaa661d28",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJzZGV0b3JnYW5pemVyQGdtYWlsLmNvbSIsImlhdCI6MTc0MTU1MjI4NCwiZXhwIjoxNzQxNTgxMDg0fQ.jGbkebO41m-X9k86Ph9_R9AXNhrAGUM8FqCjFMZhybb4ucj14h3SiM3EhT3aBWweKijg6YMl8DRtJGpxFipKgw"
									}
								},
								"method": "GET",
								"header": [],
								"url": "https://lms-hackthon-feb25-803334c87fbe.herokuapp.com/lms/allClasses"
							},
							"response": []
						},
						{
							"name": "Create New Class",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fc70e53d-7e6a-4583-a90d-b4941e1c79f1",
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "3e0dbb0b-4324-49b6-bb08-1bee7f394bfa",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJzZGV0b3JnYW5pemVyQGdtYWlsLmNvbSIsImlhdCI6MTc0MTU1NzQ2NCwiZXhwIjoxNzQxNTg2MjY0fQ.VTut0K0mnumKLaYvaIw9SzJInCv8sJA2tlLA16L1kkIIvFBDN_a-6SwkZYjDR6rKBO-IRgk-pJA0vAWB8nM3Dw"
									}
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{ \r\n\"batchId\": 9776,\r\n\"classNo\": 1,\r\n\"classDate\": \"2025-06-06T19:04:41.220Z\",\r\n\"classTopic\": \"java\",\r\n\"classStatus\": \"null\",\r\n\"classStaffId\": \"U25\",\r\n\"classDescription\": \"java2.0\",\r\n\"classComments\": \"null\" ,\r\n\"classNotes\": \"null\",\r\n\"classRecordingPath\": \"null\",\r\n\"classScheduledDates\": [\"2025-06-06T19:04:41.220Z\"]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "https://lms-hackthon-feb25-803334c87fbe.herokuapp.com/lms/CreateClassSchedule"
							},
							"response": []
						},
						{
							"name": "Upcoming Classes for particular Student",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "162e9c59-bf49-4cfb-b4e5-d569eed50eda",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "5a1d1929-8afa-4f09-87e3-0b8b99fa9c74",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJzZGV0b3JnYW5pemVyQGdtYWlsLmNvbSIsImlhdCI6MTc0MTM3NTA4MiwiZXhwIjoxNzQxNDAzODgyfQ.h3EmuVdOucUj3pDJim8Il9bNUsKc7SyqtjDOvUM6E_FpG1u7CXfNuTYweLZ3nBXs3ySwQLnsL_juCSA8RL47lA"
									}
								},
								"method": "GET",
								"header": [],
								"url": "https://lms-hackthon-feb25-803334c87fbe.herokuapp.com/lms/upcomingClasses/297"
							},
							"response": []
						},
						{
							"name": "Update New Class",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d350511c-fc91-4538-99ee-cb45faff617e",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "4b7e9296-b644-4a76-be5f-2baba57f5d0b",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJzZGV0b3JnYW5pemVyQGdtYWlsLmNvbSIsImlhdCI6MTc0MTM3NTA4MiwiZXhwIjoxNzQxNDAzODgyfQ.h3EmuVdOucUj3pDJim8Il9bNUsKc7SyqtjDOvUM6E_FpG1u7CXfNuTYweLZ3nBXs3ySwQLnsL_juCSA8RL47lA"
									}
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{ \"csId\": 65,\r\n  \"batchId\": 78,\r\n  \"classNo\": 0,\r\n  \"classDate\": \"2025-03-07T21:02:04.502Z\",\r\n  \"classTopic\": \"java\",\r\n  \"classStatus\": \"null\",\r\n  \"classStaffId\": \"U78\",\r\n  \"classDescription\": \"lodk2 o-D-66_MdRIdH6oSFhkqPbb0VcTPy\",\r\n  \"classComments\": \"  \",\r\n  \"classNotes\": \"null\",\r\n  \"classRecordingPath\": \"c:\\\\recordings\",\r\n  \"batchName\": \"java2.5\",\r\n  \"classScheduledDates\": [\r\n    \"2025-03-07T21:02:04.504Z\"]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "https://lms-hackthon-feb25-803334c87fbe.herokuapp.com/lms/updateClass/62"
							},
							"response": []
						},
						{
							"name": "Get All Recordings",
							"id": "47bd8703-8b10-422c-b88a-7b22db6282ed",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJzZGV0b3JnYW5pemVyQGdtYWlsLmNvbSIsImlhdCI6MTc0MTU2MDU3MywiZXhwIjoxNzQxNTg5MzczfQ.sGg-EwZQ7ZZoaBp2b56N0v7bljZMYNVFC67IPvb_qBzcjko6jvppuPMKuis5on5Q02oCXRemP-fUv9Eq6qD2rA"
									}
								},
								"method": "GET",
								"header": [],
								"url": "https://lms-hackthon-feb25-803334c87fbe.herokuapp.com/lms/classrecordings"
							},
							"response": []
						},
						{
							"name": "Get class recordings by Batch Id",
							"id": "99100cd3-17a6-4e4d-943a-9b5fd7acd9f7",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJzZGV0b3JnYW5pemVyQGdtYWlsLmNvbSIsImlhdCI6MTc0MTU2MDU3MywiZXhwIjoxNzQxNTg5MzczfQ.sGg-EwZQ7ZZoaBp2b56N0v7bljZMYNVFC67IPvb_qBzcjko6jvppuPMKuis5on5Q02oCXRemP-fUv9Eq6qD2rA"
									}
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "https://lms-hackthon-feb25-803334c87fbe.herokuapp.com/lms/batchRecordings/9703"
							},
							"response": []
						},
						{
							"name": "Get Recordings by Class Id",
							"id": "95c28bab-d5ea-4543-8141-2af6b8735369",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJzZGV0b3JnYW5pemVyQGdtYWlsLmNvbSIsImlhdCI6MTc0MTU2MDU3MywiZXhwIjoxNzQxNTg5MzczfQ.sGg-EwZQ7ZZoaBp2b56N0v7bljZMYNVFC67IPvb_qBzcjko6jvppuPMKuis5on5Q02oCXRemP-fUv9Eq6qD2rA"
									}
								},
								"method": "GET",
								"header": [],
								"url": "https://lms-hackthon-feb25-803334c87fbe.herokuapp.com/lms/classRecordings/773"
							},
							"response": []
						},
						{
							"name": "Update Class Recording",
							"id": "d963d4a2-5d53-4d2e-a4ee-60307f9a4143",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJzZGV0b3JnYW5pemVyQGdtYWlsLmNvbSIsImlhdCI6MTc0MTU2MDU3MywiZXhwIjoxNzQxNTg5MzczfQ.sGg-EwZQ7ZZoaBp2b56N0v7bljZMYNVFC67IPvb_qBzcjko6jvppuPMKuis5on5Q02oCXRemP-fUv9Eq6qD2rA"
									}
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"classRecordingPath\": \"Bosch-5.6\",\r\n\"csId\": 773\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "https://lms-hackthon-feb25-803334c87fbe.herokuapp.com/lms/updateClassrecording/773"
							},
							"response": []
						},
						{
							"name": "Get All Classes by Class Topic",
							"id": "7203841e-f7d1-4abe-905a-d2b594e668d4",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJzZGV0b3JnYW5pemVyQGdtYWlsLmNvbSIsImlhdCI6MTc0MTU2MDU3MywiZXhwIjoxNzQxNTg5MzczfQ.sGg-EwZQ7ZZoaBp2b56N0v7bljZMYNVFC67IPvb_qBzcjko6jvppuPMKuis5on5Q02oCXRemP-fUv9Eq6qD2rA"
									}
								},
								"method": "GET",
								"header": [],
								"url": "https://lms-hackthon-feb25-803334c87fbe.herokuapp.com/lms/classes/Angular js"
							},
							"response": []
						},
						{
							"name": "Get Class Details by Class Id",
							"id": "ec6ebb00-7e58-45b1-ad97-d2c8220d9d1a",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJzZGV0b3JnYW5pemVyQGdtYWlsLmNvbSIsImlhdCI6MTc0MTU2MDU3MywiZXhwIjoxNzQxNTg5MzczfQ.sGg-EwZQ7ZZoaBp2b56N0v7bljZMYNVFC67IPvb_qBzcjko6jvppuPMKuis5on5Q02oCXRemP-fUv9Eq6qD2rA"
									}
								},
								"method": "GET",
								"header": [],
								"url": "https://lms-hackthon-feb25-803334c87fbe.herokuapp.com/lms/class/773"
							},
							"response": []
						},
						{
							"name": "Get all Classes by Batch Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f535f038-e7b3-4c30-b164-067147d5ab35",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "cca1892f-2beb-4a84-9b80-3d943bcd090d",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJzZGV0b3JnYW5pemVyQGdtYWlsLmNvbSIsImlhdCI6MTc0MTM3NTA4MiwiZXhwIjoxNzQxNDAzODgyfQ.h3EmuVdOucUj3pDJim8Il9bNUsKc7SyqtjDOvUM6E_FpG1u7CXfNuTYweLZ3nBXs3ySwQLnsL_juCSA8RL47lA"
									}
								},
								"method": "GET",
								"header": [],
								"url": "https://lms-hackthon-feb25-803334c87fbe.herokuapp.com/lms/classesbyBatch/9703"
							},
							"response": []
						},
						{
							"name": "Get all Classes By Staff Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ab47f3c0-47e8-4418-9003-3ad576455204",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "624df342-469e-438a-972a-f93b9cce0739",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJzZGV0b3JnYW5pemVyQGdtYWlsLmNvbSIsImlhdCI6MTc0MTM3NTA4MiwiZXhwIjoxNzQxNDAzODgyfQ.h3EmuVdOucUj3pDJim8Il9bNUsKc7SyqtjDOvUM6E_FpG1u7CXfNuTYweLZ3nBXs3ySwQLnsL_juCSA8RL47lA"
									}
								},
								"method": "GET",
								"header": [],
								"url": "https://lms-hackthon-feb25-803334c87fbe.herokuapp.com/lms/classesByStaff/U25"
							},
							"response": []
						},
						{
							"name": "Creating User with Role",
							"id": "5206b47d-0e88-42d2-ae94-83aa5104f357",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJzZGV0b3JnYW5pemVyQGdtYWlsLmNvbSIsImlhdCI6MTc0MTU2ODE5NywiZXhwIjoxNzQxNTk2OTk3fQ.fIsOTX6iisMZGssO-cZK3MzyPHEGEPzbf75rsJjYXpPIeO80X134n3EcjjSkgHs1F6AbyNP0qEDHouu4AxHxgw"
									}
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"userComments\": \"Nice\",\r\n\"userEduPg\": \"Computer Science Engineering\",\r\n\"userEduUg\": \"MCA\",\r\n\"userFirstName\": \"Mangal\",\r\n\"userLastName\": \"Dodhi\",\r\n\"userLinkedinUrl\": \"https://www.linkedin.com/in/Mangal/\",\r\n\"userLocation\": \"USA\",\r\n\"userMiddleName\": \"T\",\r\n\"userPhoneNumber\": \"+91 8956453420\",\r\n\"userRoleMaps\": [\r\n{\r\n\"roleId\": \"R01\",\r\n\"userRoleStatus\": \"Active\"\r\n}\r\n],\r\n\"userTimeZone\": \"EST\",\r\n\"userVisaStatus\": \"H4\",\r\n\"userLogin\": {\r\n\"loginStatus\" : \"Active\",\r\n\"userLoginEmail\": \"mangaldohi67@gmail.com\"\r\n}\r\n}\r\n\r\n ",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "https://lms-hackthon-feb25-803334c87fbe.herokuapp.com/lms/users/roleStatus"
							},
							"response": []
						},
						{
							"name": "Get All Users",
							"id": "cbde3ea3-d3ea-4d12-8f93-8af005d6ea59",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJzZGV0b3JnYW5pemVyQGdtYWlsLmNvbSIsImlhdCI6MTc0MTU2MDU3MywiZXhwIjoxNzQxNTg5MzczfQ.sGg-EwZQ7ZZoaBp2b56N0v7bljZMYNVFC67IPvb_qBzcjko6jvppuPMKuis5on5Q02oCXRemP-fUv9Eq6qD2rA"
									}
								},
								"method": "GET",
								"header": [],
								"url": "https://lms-hackthon-feb25-803334c87fbe.herokuapp.com/lms/users"
							},
							"response": []
						},
						{
							"name": "Get All Active Users",
							"id": "b9629a3c-ff8b-4763-ac59-40d1a3ef8048",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJzZGV0b3JnYW5pemVyQGdtYWlsLmNvbSIsImlhdCI6MTc0MTU2MDU3MywiZXhwIjoxNzQxNTg5MzczfQ.sGg-EwZQ7ZZoaBp2b56N0v7bljZMYNVFC67IPvb_qBzcjko6jvppuPMKuis5on5Q02oCXRemP-fUv9Eq6qD2rA"
									}
								},
								"method": "GET",
								"header": [],
								"url": "https://lms-hackthon-feb25-803334c87fbe.herokuapp.com/lms/users/activeUsers"
							},
							"response": []
						},
						{
							"name": "Get Emails of All Active Users",
							"id": "6cf6ae01-45aa-4523-89c1-21bc765b881f",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJzZGV0b3JnYW5pemVyQGdtYWlsLmNvbSIsImlhdCI6MTc0MTU2MDU3MywiZXhwIjoxNzQxNTg5MzczfQ.sGg-EwZQ7ZZoaBp2b56N0v7bljZMYNVFC67IPvb_qBzcjko6jvppuPMKuis5on5Q02oCXRemP-fUv9Eq6qD2rA"
									}
								},
								"method": "GET",
								"header": [],
								"url": "https://lms-hackthon-feb25-803334c87fbe.herokuapp.com/lms/fetch-emails"
							},
							"response": []
						},
						{
							"name": "Update user by User Id",
							"id": "160a9857-92a9-4374-a332-fac27cd8e17e",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJzZGV0b3JnYW5pemVyQGdtYWlsLmNvbSIsImlhdCI6MTc0MTU2ODE5NywiZXhwIjoxNzQxNTk2OTk3fQ.fIsOTX6iisMZGssO-cZK3MzyPHEGEPzbf75rsJjYXpPIeO80X134n3EcjjSkgHs1F6AbyNP0qEDHouu4AxHxgw"
									}
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"userComments\": \"Good\",\r\n\"userEduUg\": \"MCA\",\r\n\"userEduPg\": \"Computer Science Engineering\",\r\n\"userFirstName\": \"Mangala\",\r\n\"userLastName\": \"Doshi\",\r\n\"userMiddleName\": \"N\",\r\n\"userLinkedinUrl\": \"https://www.linkedin.com/in/MangalaD/\",\r\n\"userLocation\": \"USA\",\r\n\"userLoginEmail\": \"doshi23@gmail.com\",\r\n\"userPhoneNumber\": \"+91 6463458290\",\r\n\"userTimeZone\": \"EST\",\r\n\"userVisaStatus\": \"H1B\"\r\n}\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "https://lms-hackthon-feb25-803334c87fbe.herokuapp.com/lms/users/U408"
							},
							"response": []
						},
						{
							"name": "Get All Roles",
							"id": "b6d29350-4f66-4e55-b79c-be46ea86b6c2",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJzZGV0b3JnYW5pemVyQGdtYWlsLmNvbSIsImlhdCI6MTc0MTU2MDU3MywiZXhwIjoxNzQxNTg5MzczfQ.sGg-EwZQ7ZZoaBp2b56N0v7bljZMYNVFC67IPvb_qBzcjko6jvppuPMKuis5on5Q02oCXRemP-fUv9Eq6qD2rA"
									}
								},
								"method": "GET",
								"header": [],
								"url": "https://lms-hackthon-feb25-803334c87fbe.herokuapp.com/lms/roles"
							},
							"response": []
						},
						{
							"name": "Update User by Role Id",
							"id": "0d815874-d4d7-4625-8db3-548d53afdf21",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJzZGV0b3JnYW5pemVyQGdtYWlsLmNvbSIsImlhdCI6MTc0MTU2ODE5NywiZXhwIjoxNzQxNTk2OTk3fQ.fIsOTX6iisMZGssO-cZK3MzyPHEGEPzbf75rsJjYXpPIeO80X134n3EcjjSkgHs1F6AbyNP0qEDHouu4AxHxgw"
									}
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"userRoleList\": [\r\n{\r\n\"roleId\": \"R01\",\r\n\"userRoleStatus\": \"Active\"\r\n}\r\n]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "https://lms-hackthon-feb25-803334c87fbe.herokuapp.com/lms/users/roleId/U408"
							},
							"response": []
						},
						{
							"name": "Get User Information by User Id",
							"id": "f9b1e3cf-b30e-4d94-a9c8-e4392604b6f9",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJzZGV0b3JnYW5pemVyQGdtYWlsLmNvbSIsImlhdCI6MTc0MTU2MDU3MywiZXhwIjoxNzQxNTg5MzczfQ.sGg-EwZQ7ZZoaBp2b56N0v7bljZMYNVFC67IPvb_qBzcjko6jvppuPMKuis5on5Q02oCXRemP-fUv9Eq6qD2rA"
									}
								},
								"method": "GET",
								"header": [],
								"url": "https://lms-hackthon-feb25-803334c87fbe.herokuapp.com/lms/users/U48"
							},
							"response": []
						},
						{
							"name": "Get All Users with Roles",
							"id": "c266cd51-e60b-46ce-ba38-84fc3cc9b889",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJzZGV0b3JnYW5pemVyQGdtYWlsLmNvbSIsImlhdCI6MTc0MTU2MDU3MywiZXhwIjoxNzQxNTg5MzczfQ.sGg-EwZQ7ZZoaBp2b56N0v7bljZMYNVFC67IPvb_qBzcjko6jvppuPMKuis5on5Q02oCXRemP-fUv9Eq6qD2rA"
									}
								},
								"method": "GET",
								"header": [],
								"url": "https://lms-hackthon-feb25-803334c87fbe.herokuapp.com/lms/users/roles"
							},
							"response": []
						},
						{
							"name": "Gets Count of Active and Inactive Users",
							"id": "b0debc72-5e8a-4b87-9c62-b69d0a861534",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJzZGV0b3JnYW5pemVyQGdtYWlsLmNvbSIsImlhdCI6MTc0MTU2MDU3MywiZXhwIjoxNzQxNTg5MzczfQ.sGg-EwZQ7ZZoaBp2b56N0v7bljZMYNVFC67IPvb_qBzcjko6jvppuPMKuis5on5Q02oCXRemP-fUv9Eq6qD2rA"
									}
								},
								"method": "GET",
								"header": [],
								"url": "https://lms-hackthon-feb25-803334c87fbe.herokuapp.com/lms/users/byStatus"
							},
							"response": []
						},
						{
							"name": "Get User by Program Batches",
							"id": "9a6d4952-3498-4177-a5aa-41d61aa6329b",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJzZGV0b3JnYW5pemVyQGdtYWlsLmNvbSIsImlhdCI6MTc0MTU2MDU3MywiZXhwIjoxNzQxNTg5MzczfQ.sGg-EwZQ7ZZoaBp2b56N0v7bljZMYNVFC67IPvb_qBzcjko6jvppuPMKuis5on5Q02oCXRemP-fUv9Eq6qD2rA"
									}
								},
								"method": "GET",
								"header": [],
								"url": "https://lms-hackthon-feb25-803334c87fbe.herokuapp.com/lms/users/programBatch/9703"
							},
							"response": []
						},
						{
							"name": "Update User Role Program Batch Status",
							"id": "ebcf9fcd-9961-484e-97cb-534aa73391a4",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJzZGV0b3JnYW5pemVyQGdtYWlsLmNvbSIsImlhdCI6MTc0MTU2ODE5NywiZXhwIjoxNzQxNTk2OTk3fQ.fIsOTX6iisMZGssO-cZK3MzyPHEGEPzbf75rsJjYXpPIeO80X134n3EcjjSkgHs1F6AbyNP0qEDHouu4AxHxgw"
									}
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"programId\": 17211,\r\n\"roleId\": \"R01\",\r\n\"userId\": \"U408\",\r\n\"userRoleProgramBatches\": [\r\n{\r\n\"batchId\": 9698,\r\n\"userRoleProgramBatchStatus\":\"Active\"\r\n}\r\n]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "https://lms-hackthon-feb25-803334c87fbe.herokuapp.com/lms/users/roleProgramBatchStatus/U408"
							},
							"response": []
						},
						{
							"name": "Get Users for Program",
							"id": "26ca187e-ce06-450f-926a-12490fdb02ec",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJzZGV0b3JnYW5pemVyQGdtYWlsLmNvbSIsImlhdCI6MTc0MTU2MDU3MywiZXhwIjoxNzQxNTg5MzczfQ.sGg-EwZQ7ZZoaBp2b56N0v7bljZMYNVFC67IPvb_qBzcjko6jvppuPMKuis5on5Q02oCXRemP-fUv9Eq6qD2rA"
									}
								},
								"method": "GET",
								"header": [],
								"url": "https://lms-hackthon-feb25-803334c87fbe.herokuapp.com/lms/users/programs/17206"
							},
							"response": []
						},
						{
							"name": "Get Users by Role Id",
							"id": "d3ad639b-6d64-434e-8735-748b631e1529",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJzZGV0b3JnYW5pemVyQGdtYWlsLmNvbSIsImlhdCI6MTc0MTU2MDU3MywiZXhwIjoxNzQxNTg5MzczfQ.sGg-EwZQ7ZZoaBp2b56N0v7bljZMYNVFC67IPvb_qBzcjko6jvppuPMKuis5on5Q02oCXRemP-fUv9Eq6qD2rA"
									}
								},
								"method": "GET",
								"header": [],
								"url": "https://lms-hackthon-feb25-803334c87fbe.herokuapp.com/lms/users/roles/R01"
							},
							"response": []
						},
						{
							"name": "Add Request by Roled V2",
							"id": "016eeeba-445a-431e-a259-e1abb63d8b11",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJzZGV0b3JnYW5pemVyQGdtYWlsLmNvbSIsImlhdCI6MTc0MTU2MDU3MywiZXhwIjoxNzQxNTg5MzczfQ.sGg-EwZQ7ZZoaBp2b56N0v7bljZMYNVFC67IPvb_qBzcjko6jvppuPMKuis5on5Q02oCXRemP-fUv9Eq6qD2rA"
									}
								},
								"method": "GET",
								"header": [],
								"url": "https://lms-hackthon-feb25-803334c87fbe.herokuapp.com/lms/v2/users"
							},
							"response": []
						},
						{
							"name": "Update User Login Status",
							"id": "bf6503a9-b959-4cce-a51d-90a5612e947c",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJzZGV0b3JnYW5pemVyQGdtYWlsLmNvbSIsImlhdCI6MTc0MTU2ODE5NywiZXhwIjoxNzQxNTk2OTk3fQ.fIsOTX6iisMZGssO-cZK3MzyPHEGEPzbf75rsJjYXpPIeO80X134n3EcjjSkgHs1F6AbyNP0qEDHouu4AxHxgw"
									}
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"loginStatus\": \"Active\",\r\n\"password\": \"March@2025\",\r\n\"roleIds\": [\"R01\"],\r\n\"status\": \"Active\",\r\n\"userLoginEmail\": \"sdetorganizer@gmail.com\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "https://lms-hackthon-feb25-803334c87fbe.herokuapp.com/lms/users/userLogin/U408"
							},
							"response": []
						},
						{
							"name": "Delete User",
							"id": "9ebdf0fe-03b1-42f0-9bf6-5e8be7335880",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJzZGV0b3JnYW5pemVyQGdtYWlsLmNvbSIsImlhdCI6MTc0MTU2MDU3MywiZXhwIjoxNzQxNTg5MzczfQ.sGg-EwZQ7ZZoaBp2b56N0v7bljZMYNVFC67IPvb_qBzcjko6jvppuPMKuis5on5Q02oCXRemP-fUv9Eq6qD2rA"
									}
								},
								"method": "DELETE",
								"header": [],
								"url": "https://lms-hackthon-feb25-803334c87fbe.herokuapp.com/lms/users/U48"
							},
							"response": []
						},
						{
							"name": "Delete Class by Class Id",
							"id": "92298909-e55a-4e88-a2a4-9e712a2ca5a1",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJzZGV0b3JnYW5pemVyQGdtYWlsLmNvbSIsImlhdCI6MTc0MTU2MDU3MywiZXhwIjoxNzQxNTg5MzczfQ.sGg-EwZQ7ZZoaBp2b56N0v7bljZMYNVFC67IPvb_qBzcjko6jvppuPMKuis5on5Q02oCXRemP-fUv9Eq6qD2rA"
									}
								},
								"method": "DELETE",
								"header": [],
								"url": "https://lms-hackthon-feb25-803334c87fbe.herokuapp.com/lms/deleteByClass/773"
							},
							"response": []
						},
						{
							"name": "Delete Batch by Batch Id",
							"id": "e968a282-03e5-4a66-8076-d3cd1588c674",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJzZGV0b3JnYW5pemVyQGdtYWlsLmNvbSIsImlhdCI6MTc0MTU2MDU3MywiZXhwIjoxNzQxNTg5MzczfQ.sGg-EwZQ7ZZoaBp2b56N0v7bljZMYNVFC67IPvb_qBzcjko6jvppuPMKuis5on5Q02oCXRemP-fUv9Eq6qD2rA"
									}
								},
								"method": "DELETE",
								"header": [],
								"url": "https://lms-hackthon-feb25-803334c87fbe.herokuapp.com/lms/batches/9702"
							},
							"response": []
						},
						{
							"name": "Delete Program by Program Id",
							"id": "9db4d035-de49-4035-9a0f-cb08e43856ca",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJzZGV0b3JnYW5pemVyQGdtYWlsLmNvbSIsImlhdCI6MTc0MTU1ODA1OCwiZXhwIjoxNzQxNTg2ODU4fQ.ot2l_28xxbqvfOrtqD0dRrSiN_-Lxc-k7xTGJb83gD_9eli--7xymJjqwIoXuv4SX4JU3yUoK2jLsFR6223J3g"
									}
								},
								"method": "DELETE",
								"header": [],
								"url": "https://lms-hackthon-feb25-803334c87fbe.herokuapp.com/lms/deletebyprogid/17206"
							},
							"response": []
						},
						{
							"name": "Delete Program by Program Name",
							"id": "52410b55-37a2-49f1-bbec-2f1d12072405",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJzZGV0b3JnYW5pemVyQGdtYWlsLmNvbSIsImlhdCI6MTc0MTU1OTczMCwiZXhwIjoxNzQxNTg4NTMwfQ.CPrlPkrw8BFqn7nPEwE87FWVvfEYT8k3u_fAbiO7HGmTsd1Z5OYU0U4xX7SOEd8gTfi9oKkkl53LmxIjxEALyQ"
									}
								},
								"method": "DELETE",
								"header": [],
								"url": "https://lms-hackthon-feb25-803334c87fbe.herokuapp.com/lms/deletebyprogname/Java-Program"
							},
							"response": []
						},
						{
							"name": "Log Out",
							"id": "5b3f0d88-5a78-49af-85d7-50a044b9dd57",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJzZGV0b3JnYW5pemVyQGdtYWlsLmNvbSIsImlhdCI6MTc0MTU2MDU3MywiZXhwIjoxNzQxNTg5MzczfQ.sGg-EwZQ7ZZoaBp2b56N0v7bljZMYNVFC67IPvb_qBzcjko6jvppuPMKuis5on5Q02oCXRemP-fUv9Eq6qD2rA"
									}
								},
								"method": "GET",
								"header": [],
								"url": "https://lms-hackthon-feb25-803334c87fbe.herokuapp.com/lms/logoutlms"
							},
							"response": []
						}
					],
					"id": "91a77a08-b54a-4c6d-8cb5-58645e3360b2"
				},
				{
					"name": "Kavi",
					"item": [
						{
							"name": "User Sign In",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d7879f0f-737d-4293-b2a7-bec56b12e059",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "1db46d4e-d2de-49ba-9a31-32ad4f0dbcbf",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"password\": \"March@2025\",\r\n\"userLoginEmailId\":\"sdetorganizer@gmail.com\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "https://lms-hackthon-feb25-803334c87fbe.herokuapp.com/lms/login"
							},
							"response": []
						},
						{
							"name": "Add New Program",
							"id": "5cbc666c-7033-4d4b-aab7-79c78018334c",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJzZGV0b3JnYW5pemVyQGdtYWlsLmNvbSIsImlhdCI6MTc0MTU1ODA1OCwiZXhwIjoxNzQxNTg2ODU4fQ.ot2l_28xxbqvfOrtqD0dRrSiN_-Lxc-k7xTGJb83gD_9eli--7xymJjqwIoXuv4SX4JU3yUoK2jLsFR6223J3g"
									}
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"programDescription\": \"nodejs-core-java-SDET96\",\r\n\"programName\": \"Nodejs-selenium-core-java\",\r\n\"programStatus\": \"active\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "https://lms-hackthon-feb25-803334c87fbe.herokuapp.com/lms/saveprogram"
							},
							"response": []
						},
						{
							"name": "Create New Batch",
							"id": "cc69f625-9ed2-4dae-81a4-71e5eee6f8f3",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJzZGV0b3JnYW5pemVyQGdtYWlsLmNvbSIsImlhdCI6MTc0MTU1OTczMCwiZXhwIjoxNzQxNTg4NTMwfQ.CPrlPkrw8BFqn7nPEwE87FWVvfEYT8k3u_fAbiO7HGmTsd1Z5OYU0U4xX7SOEd8gTfi9oKkkl53LmxIjxEALyQ"
									}
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"batchDescription\": \"java-Code-Scrappers_25\",\r\n    \"batchName\": \"Node-angular-js\",\r\n    \"batchNoOfClasses\": 2,\r\n    \"batchStatus\": \"Active\",\r\n    \"programId\": 17235\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "https://lms-hackthon-feb25-803334c87fbe.herokuapp.com/lms/batches"
							},
							"response": []
						},
						{
							"name": "Creating User with Role",
							"id": "6b5379f8-6215-411d-a2df-319aaf9c4394",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJzZGV0b3JnYW5pemVyQGdtYWlsLmNvbSIsImlhdCI6MTc0MTU2ODE5NywiZXhwIjoxNzQxNTk2OTk3fQ.fIsOTX6iisMZGssO-cZK3MzyPHEGEPzbf75rsJjYXpPIeO80X134n3EcjjSkgHs1F6AbyNP0qEDHouu4AxHxgw"
									}
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"userComments\": \"Nice\",\r\n\"userEduPg\": \"Computer Science Engineering\",\r\n\"userEduUg\": \"MCA\",\r\n\"userFirstName\": \"Aangal\",\r\n\"userLastName\": \"Dodhi\",\r\n\"userLinkedinUrl\": \"https://www.linkedin.com/in/Aangala/\",\r\n\"userLocation\": \"USA\",\r\n\"userMiddleName\": \"T\",\r\n\"userPhoneNumber\": \"+91 8955453420\",\r\n\"userRoleMaps\": [\r\n{\r\n\"roleId\": \"R03\",\r\n\"userRoleStatus\": \"Active\"\r\n}\r\n],\r\n\"userTimeZone\": \"EST\",\r\n\"userVisaStatus\": \"H4\",\r\n\"userLogin\": {\r\n\"loginStatus\" : \"Active\",\r\n\"userLoginEmail\": \"angaldohi67@gmail.com\"\r\n}\r\n}\r\n\r\n ",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "https://lms-hackthon-feb25-803334c87fbe.herokuapp.com/lms/users/roleStatus"
							},
							"response": []
						},
						{
							"name": "Create New Class",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fc70e53d-7e6a-4583-a90d-b4941e1c79f1",
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"//POSITIVE TEST VALIDATION\r",
											"if(pm.response.to.have.status(201))\r",
											"{ // HAPPY PATH\r",
											"\r",
											"    //1. Status\r",
											"    pm.test(\"Status code is 201\", function () {\r",
											"        pm.response.to.have.status(201);\r",
											"    });\r",
											"\r",
											"    //2. Status Line\r",
											"    pm.test(\"Status message is Created\", function () {\r",
											"        pm.response.to.have.status();\r",
											"    });\r",
											"\r",
											"    //3. Test for Content-Type header having a particular value\r",
											"    pm.test(\"Content-Type header is application/json\", () => {\r",
											"        pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
											"    });\r",
											"}\r",
											"\r",
											"//4. schema validation\r",
											"var jsonData=pm.response.json();\r",
											"   \r",
											"var schema =\r",
											"{\r",
											"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": \r",
											"  {\r",
											"    \"batchId\": \r",
											"    {\r",
											"      \"type\": \"integer\",\r",
											"      \"minimum\": 0\r",
											"    },\r",
											"    \"classNo\": \r",
											"    {\r",
											"      \"type\": \"integer\",\r",
											"       \"minimum\": 1\r",
											"    },\r",
											"    \"classDate\":\r",
											"    {\r",
											"      \"type\": \"string\",\r",
											"      \"format\": \"date-time\"\r",
											"    },\r",
											"    \"classTopic\":\r",
											"    {\r",
											"      \"type\": \"string\",\r",
											"    },\r",
											"    \"classStatus\": \r",
											"    {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"classStaffId\": \r",
											"    {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"classDescription\": \r",
											"    {\r",
											"      \"type\": \"string\",\r",
											"    },\r",
											"    \"classComments\": \r",
											"    {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"classNotes\": \r",
											"    {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"classRecordingPath\": \r",
											"    {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"classScheduledDates\": \r",
											"    {\r",
											"      \"type\": \"array\",\r",
											"       \"items\": \r",
											"       {\r",
											"        \"type\": \"string\",\r",
											"        \"format\": \"date-time\"\r",
											"       },\r",
											"      \"minItems\": 1\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"batchId\",\r",
											"    \"classNo\",\r",
											"    \"classDate\",\r",
											"    \"classTopic\",\r",
											"    \"classStatus\",\r",
											"    \"classStaffId\",\r",
											"    \"classDescription\",\r",
											"    \"classComments\",\r",
											"    \"classNotes\",\r",
											"    \"classRecordingPath\",\r",
											"    \"classScheduledDates\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"console.log(responseBody.batchId);\r",
											"pm.global.set('batchId', responseBody.batchId);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "bdf40ef9-d3e6-4153-82d2-74f6fd77cc97",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJzZGV0b3JnYW5pemVyQGdtYWlsLmNvbSIsImlhdCI6MTc0MTU1NzQ2NCwiZXhwIjoxNzQxNTg2MjY0fQ.VTut0K0mnumKLaYvaIw9SzJInCv8sJA2tlLA16L1kkIIvFBDN_a-6SwkZYjDR6rKBO-IRgk-pJA0vAWB8nM3Dw"
									}
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{ \r\n\"batchId\": {{batchId}},\r\n\"classNo\": {{classNo}},\r\n\"classDate\": \"{{classDate}}\",\r\n\"classTopic\": \"{{classTopic}}\",\r\n\"classStatus\": \"{{classStatus}}\",\r\n\"classStaffId\": \"{{classStaffId}}\",\r\n\"classDescription\": \"{{classDescription}}\",\r\n\"classComments\": \"{{classComments}}\" ,\r\n\"classNotes\": \"{{classNotes}}\",\r\n\"classRecordingPath\": \"{{classRecordingPath}}\",\r\n\"classScheduledDates\": [\"{{classScheduledDates}}\"]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "https://lms-hackthon-feb25-803334c87fbe.herokuapp.com/lms/CreateClassSchedule"
							},
							"response": []
						}
					],
					"id": "b0e17d9c-da40-43f3-b064-8a3379575e2c"
				},
				{
					"name": "Class_K Copy",
					"item": [
						{
							"name": "Create New Class",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fc70e53d-7e6a-4583-a90d-b4941e1c79f1",
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"//POSITIVE TEST VALIDATION\r",
											"if(pm.response.to.have.status(201)){ // HAPPY PATH\r",
											"\r",
											"    //1. Status\r",
											"    pm.test(\"Status code is 201\", function () {\r",
											"        pm.response.to.have.status(201);\r",
											"    });\r",
											"\r",
											"    //2. Status Line\r",
											"    pm.test(\"Status message is Created\", function () {\r",
											"        pm.response.to.have.status();\r",
											"    });\r",
											"\r",
											"    //3. Test for Content-Type header having a particular value\r",
											"    pm.test(\"Content-Type header is application/json\", () => {\r",
											"        pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
											"    });\r",
											"\r",
											"    //4. Schema Validation -- TO BE DONE\r",
											"    const jsonData = pm.response.json();\r",
											"    const schema =\r",
											" {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": \r",
											"  {\r",
											"    \"batchId\": \r",
											"    {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"classComments\": \r",
											"    {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"classDate\": \r",
											"    {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"classDescription\":\r",
											"    {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"classNo\": \r",
											"    {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"classNotes\": \r",
											"    {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"classRecordingPath\": \r",
											"    {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"classStaffId\": \r",
											"    {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"classTopic\": \r",
											"    {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"csId\": \r",
											"    {\r",
											"      \"type\": \"integer\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"batchId\",\r",
											"    \"classComments\",\r",
											"    \"classDate\",\r",
											"    \"classDescription\",\r",
											"    \"classNo\",\r",
											"    \"classNotes\",\r",
											"    \"classRecordingPath\",\r",
											"    \"classStaffId\",\r",
											"    \"classTopic\",\r",
											"    \"csId\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"    //5. Request VS Response Body Validation\r",
											"    pm.test(\"Class details in Request and Response matches\", function () {\r",
											"\r",
											"        // Get the raw request body and Parse it to JSON\r",
											"        const rawRequestBody = pm.request.body.raw;\r",
											"        const requestBody = JSON.parse(rawRequestBody);\r",
											"\r",
											"       // pm.expect(response).to.include(\"classId\");\r",
											"        pm.expect(response).to.have.property(\"csId\");\r",
											"        pm.expect(requestBody.batchId).to.eql(response.batchId);\r",
											"        pm.expect(requestBody.classNo).to.eql(response.classNo);\r",
											"        pm.expect(requestBody.classDate).to.eql(response.classDate);\r",
											"        pm.expect(requestBody.classTopic).to.eql(response.classTopic);\r",
											"        pm.expect(requestBody.classStaffId).to.eql(response.classStaffId);\r",
											"        pm.expect(requestBody.classDescription).to.eql(response.classDescription);\r",
											"        pm.expect(requestBody.classComments).to.eql(response.classComments);\r",
											"        pm.expect(requestBody.classNotes).to.eql(response.classNotes);\r",
											"        pm.expect(requestBody.classRecordingPath).to.eql(response.classRecordingPath);\r",
											"    \r",
											"\r",
											"    });\r",
											"\r",
											"    //GET ALL CLASS COUNT AFTER CLASS CREATION\r",
											"    pm.test(\"Check Total Class Count increased by 1\", function () {\r",
											"        \r",
											"        // Perform GET request classically\r",
											"        pm.sendRequest({\r",
											"            url: pm.environment.get(\"baseURL\")+'/allClasses',  \r",
											"            method: 'GET',\r",
											"            header: {\r",
											"               'Authorization': 'Bearer ' + pm.collectionVariables.get(\"BearerToken\") \r",
											"            }\r",
											"        }, function (err, res) {\r",
											"            if (err) {\r",
											"                console.log(err);\r",
											"                   // pm.expect(err).to.be.null; // Ensure there is no error\r",
											"                return;\r",
											"            } else {\r",
											"               \r",
											"                const classes = res.json(); \r",
											"                const count = classes.length; \r",
											"\r",
											"                   pm.expect(count).to.equal((pm.collectionVariables.get(\"ClassCount_BeforeAdd\"))+1); \r",
											"                \r",
											"            }\r",
											"        });\r",
											"    });\r",
											"\r",
											"}\r",
											"\r",
											"\r",
											"//SET VALUE AT RUN TIME (LATER CHECK IF THIS COULD BE TRANSFERRED AS CLASS OBJECT!!!!)\r",
											"pm.collectionVariables.set(\"classId\", response.classId)\r",
											"pm.collectionVariables.set(\"batchId\", response.batchId)\r",
											"pm.collectionVariables.set(\"classNo\", response.classNo)\r",
											"pm.collectionVariables.set(\"classDate\", response.classDate)\r",
											"pm.collectionVariables.set(\"classTopic\", response.classTopic)\r",
											"pm.collectionVariables.set(\"classStaffId\", response.classStaffId)\r",
											"pm.collectionVariables.set(\"classDescription\", response.classDescription)\r",
											"pm.collectionVariables.set(\"classComments\", response.classComments)\r",
											"pm.collectionVariables.set(\"classNotes\", response.classNotes)\r",
											"pm.collectionVariables.set(\"classRecordingPath\", response.classRecordingPath)\r",
											"\r",
											"\r",
											"//NEGATIVE TEST VALIDATION\r",
											"\r",
											"\r",
											"/**\r",
											" * status code = 400\r",
											"{   \r",
											"    \"message\": \"programName Must contain only letters and sometimes hyphens\",\r",
											"    \"success\": false\r",
											"}\r",
											" */"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "0d29c538-7b1c-4894-8a41-04fedafdc273",
										"exec": [
											"function getRandomLetterString() {\r",
											"    const letters = 'abcdefghijklmnopqrstuvwxyz'; // Available letters\r",
											"    let randomString = '';\r",
											"    \r",
											"    // Loop 3 times to generate a 3-letter string\r",
											"    for (let i = 0; i < 3; i++) {\r",
											"        const randomIndex = Math.floor(Math.random() * letters.length); // Get a random index\r",
											"        randomString += letters[randomIndex]; // Add the random letter to the string\r",
											"    }\r",
											"\r",
											"    return randomString;\r",
											"}\r",
											"\r",
											"var className = 'SeleniumPython-Ten'+ getRandomLetterString();\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "da467f47-34b7-4340-8781-9731d9451bf3",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{ \r\n\"batchId\": {{batchId}},\r\n\"classNo\": {{classNo}},\r\n\"classDate\": \"{{classDate}}\",\r\n\"classTopic\": \"{{classTopic}}\",\r\n\"classStatus\": \"{{classStatus}}\",\r\n\"classStaffId\": \"{{classStaffId}}\",\r\n\"classDescription\": \"{{classDescription}}\",\r\n\"classComments\": \"{{classComments}}\" ,\r\n\"classNotes\": \"{{classNotes}}\",\r\n\"classRecordingPath\": \"{{classRecordingPath}}\",\r\n\"classScheduledDates\": [\"{{classScheduledDates}}\"]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}/CreateClassSchedule"
							},
							"response": []
						},
						{
							"name": "Negative - Create New Class",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fc70e53d-7e6a-4583-a90d-b4941e1c79f1",
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"//POSITIVE TEST VALIDATION\r",
											"if(pm.response.to.have.status(201)){ // HAPPY PATH\r",
											"\r",
											"    //1. Status\r",
											"    pm.test(\"Status code is 201\", function () {\r",
											"        pm.response.to.have.status(201);\r",
											"    });\r",
											"\r",
											"    //2. Status Line\r",
											"    pm.test(\"Status message is Created\", function () {\r",
											"        pm.response.to.have.status();\r",
											"    });\r",
											"\r",
											"    //3. Test for Content-Type header having a particular value\r",
											"    pm.test(\"Content-Type header is application/json\", () => {\r",
											"        pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
											"    });\r",
											"\r",
											"    //4. Schema Validation -- TO BE DONE\r",
											"    const jsonData = pm.response.json();\r",
											"    const schema =\r",
											" {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": \r",
											"  {\r",
											"    \"batchId\": \r",
											"    {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"classComments\": \r",
											"    {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"classDate\": \r",
											"    {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"classDescription\":\r",
											"    {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"classNo\": \r",
											"    {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"classNotes\": \r",
											"    {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"classRecordingPath\": \r",
											"    {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"classStaffId\": \r",
											"    {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"classTopic\": \r",
											"    {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"csId\": \r",
											"    {\r",
											"      \"type\": \"integer\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"batchId\",\r",
											"    \"classComments\",\r",
											"    \"classDate\",\r",
											"    \"classDescription\",\r",
											"    \"classNo\",\r",
											"    \"classNotes\",\r",
											"    \"classRecordingPath\",\r",
											"    \"classStaffId\",\r",
											"    \"classTopic\",\r",
											"    \"csId\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"    //5. Request VS Response Body Validation\r",
											"    pm.test(\"Class details in Request and Response matches\", function () {\r",
											"\r",
											"        // Get the raw request body and Parse it to JSON\r",
											"        const rawRequestBody = pm.request.body.raw;\r",
											"        const requestBody = JSON.parse(rawRequestBody);\r",
											"\r",
											"       // pm.expect(response).to.include(\"classId\");\r",
											"        pm.expect(response).to.have.property(\"csId\");\r",
											"        pm.expect(requestBody.batchId).to.eql(response.batchId);\r",
											"        pm.expect(requestBody.classNo).to.eql(response.classNo);\r",
											"        pm.expect(requestBody.classDate).to.eql(response.classDate);\r",
											"        pm.expect(requestBody.classTopic).to.eql(response.classTopic);\r",
											"        pm.expect(requestBody.classStaffId).to.eql(response.classStaffId);\r",
											"        pm.expect(requestBody.classDescription).to.eql(response.classDescription);\r",
											"        pm.expect(requestBody.classComments).to.eql(response.classComments);\r",
											"        pm.expect(requestBody.classNotes).to.eql(response.classNotes);\r",
											"        pm.expect(requestBody.classRecordingPath).to.eql(response.classRecordingPath);\r",
											"    \r",
											"\r",
											"    });\r",
											"\r",
											"    //GET ALL CLASS COUNT AFTER CLASS CREATION\r",
											"    pm.test(\"Check Total Class Count increased by 1\", function () {\r",
											"        \r",
											"        // Perform GET request classically\r",
											"        pm.sendRequest({\r",
											"            url: pm.environment.get(\"baseURL\")+'/allClasses',  \r",
											"            method: 'GET',\r",
											"            header: {\r",
											"               'Authorization': 'Bearer ' + pm.collectionVariables.get(\"BearerToken\") \r",
											"            }\r",
											"        }, function (err, res) {\r",
											"            if (err) {\r",
											"                console.log(err);\r",
											"                   // pm.expect(err).to.be.null; // Ensure there is no error\r",
											"                return;\r",
											"            } else {\r",
											"               \r",
											"                const classes = res.json(); \r",
											"                const count = classes.length; \r",
											"\r",
											"                   pm.expect(count).to.equal((pm.collectionVariables.get(\"ClassCount_BeforeAdd\"))+1); \r",
											"                \r",
											"            }\r",
											"        });\r",
											"    });\r",
											"\r",
											"}\r",
											"\r",
											"\r",
											"//SET VALUE AT RUN TIME (LATER CHECK IF THIS COULD BE TRANSFERRED AS CLASS OBJECT!!!!)\r",
											"pm.collectionVariables.set(\"classId\", response.classId)\r",
											"pm.collectionVariables.set(\"batchId\", response.batchId)\r",
											"pm.collectionVariables.set(\"classNo\", response.classNo)\r",
											"pm.collectionVariables.set(\"classDate\", response.classDate)\r",
											"pm.collectionVariables.set(\"classTopic\", response.classTopic)\r",
											"pm.collectionVariables.set(\"classStaffId\", response.classStaffId)\r",
											"pm.collectionVariables.set(\"classDescription\", response.classDescription)\r",
											"pm.collectionVariables.set(\"classComments\", response.classComments)\r",
											"pm.collectionVariables.set(\"classNotes\", response.classNotes)\r",
											"pm.collectionVariables.set(\"classRecordingPath\", response.classRecordingPath)\r",
											"\r",
											"\r",
											"//NEGATIVE TEST VALIDATION\r",
											"\r",
											"\r",
											"/**\r",
											" * status code = 400\r",
											"{   \r",
											"    \"message\": \"programName Must contain only letters and sometimes hyphens\",\r",
											"    \"success\": false\r",
											"}\r",
											" */"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "0d29c538-7b1c-4894-8a41-04fedafdc273",
										"exec": [
											"function getRandomLetterString() {\r",
											"    const letters = 'abcdefghijklmnopqrstuvwxyz'; // Available letters\r",
											"    let randomString = '';\r",
											"    \r",
											"    // Loop 3 times to generate a 3-letter string\r",
											"    for (let i = 0; i < 3; i++) {\r",
											"        const randomIndex = Math.floor(Math.random() * letters.length); // Get a random index\r",
											"        randomString += letters[randomIndex]; // Add the random letter to the string\r",
											"    }\r",
											"\r",
											"    return randomString;\r",
											"}\r",
											"\r",
											"var className = 'SeleniumPython-Ten'+ getRandomLetterString();\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "06e7ac81-331a-4032-ba0f-03edf200925b",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{ \r\n\"batchId\": {{batchId}},\r\n\"classNo\": {{classNo}},\r\n\"classDate\": \"{{classDate}}\",\r\n\"classTopic\": \"{{classTopic}}\",\r\n\"classStatus\": \"{{classStatus}}\",\r\n\"classStaffId\": \"{{classStaffId}}\",\r\n\"classDescription\": \"{{classDescription}}\",\r\n\"classComments\": \"{{classComments}}\" ,\r\n\"classNotes\": \"{{classNotes}}\",\r\n\"classRecordingPath\": \"{{classRecordingPath}}\",\r\n\"classScheduledDates\": [\"{{classScheduledDates}}\"]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}/{{endPoint}}"
							},
							"response": []
						},
						{
							"name": "Create New Class with No Auth",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "066c2f54-c788-4545-9aa3-c2d5d44414cd",
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "0f16d7d7-631e-4921-bcfd-6ae56d08feec",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{ \r\n\"batchId\": {{batchId}},\r\n\"classNo\": {{classNo}},\r\n\"classDate\": \"{{classDate}}\",\r\n\"classTopic\": \"{{classTopic}}\",\r\n\"classStatus\": \"{{classStatus}}\",\r\n\"classStaffId\": \"{{classStaffId}}\",\r\n\"classDescription\": \"{{classDescription}}\",\r\n\"classComments\": \"{{classComments}}\" ,\r\n\"classNotes\": \"{{classNotes}}\",\r\n\"classRecordingPath\": \"{{classRecordingPath}}\",\r\n\"classScheduledDates\": [\"{{classScheduledDates}}\"]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}/CreateClassSchedule"
							},
							"response": []
						},
						{
							"name": "Create New Class with blank Batch Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d0069301-56c1-40d6-b1cd-129f81c8a58c",
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"//POSITIVE TEST VALIDATION\r",
											"if(pm.response.to.have.status(201)){ // HAPPY PATH\r",
											"\r",
											"    //1. Status\r",
											"    pm.test(\"Status code is 201\", function () {\r",
											"        pm.response.to.have.status(201);\r",
											"    });\r",
											"\r",
											"    //2. Status Line\r",
											"    pm.test(\"Status message is Created\", function () {\r",
											"        pm.response.to.have.status();\r",
											"    });\r",
											"\r",
											"    //3. Test for Content-Type header having a particular value\r",
											"    pm.test(\"Content-Type header is application/json\", () => {\r",
											"        pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
											"    });\r",
											"\r",
											"    //4. Schema Validation -- TO BE DONE\r",
											"    var jsonData=pm.response.json();\r",
											"    var schema =\r",
											" {\r",
											"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": \r",
											"  {\r",
											"    \"batchId\": \r",
											"    {\r",
											"      \"type\": \"integer\",\r",
											"      \"minimum\": 0\r",
											"    },\r",
											"    \"classNo\": \r",
											"    {\r",
											"      \"type\": \"integer\",\r",
											"       \"minimum\": 1\r",
											"    },\r",
											"    \"classDate\":\r",
											"    {\r",
											"      \"type\": \"string\",\r",
											"      \"format\": \"date-time\"\r",
											"    },\r",
											"    \"classTopic\":\r",
											"    {\r",
											"      \"type\": \"string\",\r",
											"    },\r",
											"    \"classStatus\": \r",
											"    {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"classStaffId\": \r",
											"    {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"classDescription\": \r",
											"    {\r",
											"      \"type\": \"string\",\r",
											"    },\r",
											"    \"classComments\": \r",
											"    {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"classNotes\": \r",
											"    {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"classRecordingPath\": \r",
											"    {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"classScheduledDates\": \r",
											"    {\r",
											"      \"type\": \"array\",\r",
											"       \"items\": \r",
											"       {\r",
											"        \"type\": \"string\",\r",
											"        \"format\": \"date-time\"\r",
											"       },\r",
											"      \"minItems\": 1\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"batchId\",\r",
											"    \"classNo\",\r",
											"    \"classDate\",\r",
											"    \"classTopic\",\r",
											"    \"classStatus\",\r",
											"    \"classStaffId\",\r",
											"    \"classDescription\",\r",
											"    \"classComments\",\r",
											"    \"classNotes\",\r",
											"    \"classRecordingPath\",\r",
											"    \"classScheduledDates\"\r",
											"  ]\r",
											" }\r",
											"\r",
											"    //5. Request VS Response Body Validation\r",
											"    pm.test(\"Class details in Request and Response matches\", function () {\r",
											"\r",
											"        // Get the raw request body and Parse it to JSON\r",
											"        const rawRequestBody = pm.request.body.raw;\r",
											"        const requestBody = JSON.parse(rawRequestBody);\r",
											"\r",
											"       // pm.expect(response).to.include(\"classId\");\r",
											"        pm.expect(response).to.have.property(\"csId\");\r",
											"        pm.expect(requestBody.batchId).to.eql(response.batchId);\r",
											"        pm.expect(requestBody.classNo).to.eql(response.classNo);\r",
											"        pm.expect(requestBody.classDate).to.eql(response.classDate);\r",
											"        pm.expect(requestBody.classTopic).to.eql(response.classTopic);\r",
											"        pm.expect(requestBody.classStaffId).to.eql(response.classStaffId);\r",
											"        pm.expect(requestBody.classDescription).to.eql(response.classDescription);\r",
											"        pm.expect(requestBody.classComments).to.eql(response.classComments);\r",
											"        pm.expect(requestBody.classNotes).to.eql(response.classNotes);\r",
											"        pm.expect(requestBody.classRecordingPath).to.eql(response.classRecordingPath);\r",
											"    \r",
											"\r",
											"    });\r",
											"\r",
											"    //GET ALL CLASS COUNT AFTER CLASS CREATION\r",
											"    pm.test(\"Check Total Class Count increased by 1\", function () {\r",
											"        \r",
											"        // Perform GET request classically\r",
											"        pm.sendRequest({\r",
											"            url: pm.environment.get(\"baseURL\")+'/allClasses',  \r",
											"            method: 'GET',\r",
											"            header: {\r",
											"               'Authorization': 'Bearer ' + pm.collectionVariables.get(\"BearerToken\") \r",
											"            }\r",
											"        }, function (err, res) {\r",
											"            if (err) {\r",
											"                console.log(err);\r",
											"                   // pm.expect(err).to.be.null; // Ensure there is no error\r",
											"                return;\r",
											"            } else {\r",
											"               \r",
											"                const classes = res.json(); \r",
											"                const count = classes.length; \r",
											"\r",
											"                   pm.expect(count).to.equal((pm.collectionVariables.get(\"ClassCount_BeforeAdd\"))+1); \r",
											"                \r",
											"            }\r",
											"        });\r",
											"    });\r",
											"\r",
											"}\r",
											"\r",
											"\r",
											"//SET VALUE AT RUN TIME (LATER CHECK IF THIS COULD BE TRANSFERRED AS CLASS OBJECT!!!!)\r",
											"pm.collectionVariables.set(\"classId\", response.classId)\r",
											"pm.collectionVariables.set(\"batchId\", response.batchId)\r",
											"pm.collectionVariables.set(\"classNo\", response.classNo)\r",
											"pm.collectionVariables.set(\"classDate\", response.classDate)\r",
											"pm.collectionVariables.set(\"classTopic\", response.classTopic)\r",
											"pm.collectionVariables.set(\"classStaffId\", response.classStaffId)\r",
											"pm.collectionVariables.set(\"classDescription\", response.classDescription)\r",
											"pm.collectionVariables.set(\"classComments\", response.classComments)\r",
											"pm.collectionVariables.set(\"classNotes\", response.classNotes)\r",
											"pm.collectionVariables.set(\"classRecordingPath\", response.classRecordingPath)\r",
											"\r",
											"\r",
											"//NEGATIVE TEST VALIDATION\r",
											"\r",
											"\r",
											"/**\r",
											" * status code = 400\r",
											"{   \r",
											"    \"message\": \"programName Must contain only letters and sometimes hyphens\",\r",
											"    \"success\": false\r",
											"}\r",
											" */"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "000e4400-3bc2-40b7-a5e1-474c0177a1f5",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{ \r\n\"batchId\": {{ }},\r\n\"classNo\": {{classNo}},\r\n\"classDate\": \"{{classDate}}\",\r\n\"classTopic\": \"{{classTopic}}\",\r\n\"classStatus\": \"{{classStatus}}\",\r\n\"classStaffId\": \"{{classStaffId}}\",\r\n\"classDescription\": \"{{classDescription}}\",\r\n\"classComments\": \"{{classComments}}\" ,\r\n\"classNotes\": \"{{classNotes}}\",\r\n\"classRecordingPath\": \"{{classRecordingPath}}\",\r\n\"classScheduledDates\": [\"{{classScheduledDates}}\"]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}/CreateClassSchedule"
							},
							"response": []
						},
						{
							"name": "Create New Class with blank Class No",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fc70e53d-7e6a-4583-a90d-b4941e1c79f1",
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"//POSITIVE TEST VALIDATION\r",
											"if(pm.response.to.have.status(201)){ // HAPPY PATH\r",
											"\r",
											"    //1. Status\r",
											"    pm.test(\"Status code is 201\", function () {\r",
											"        pm.response.to.have.status(201);\r",
											"    });\r",
											"\r",
											"    //2. Status Line\r",
											"    pm.test(\"Status message is Created\", function () {\r",
											"        pm.response.to.have.status();\r",
											"    });\r",
											"\r",
											"    //3. Test for Content-Type header having a particular value\r",
											"    pm.test(\"Content-Type header is application/json\", () => {\r",
											"        pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
											"    });\r",
											"\r",
											"    //4. Schema Validation -- TO BE DONE\r",
											"    var jsonData=pm.response.json();\r",
											"    var schema =\r",
											" {\r",
											"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": \r",
											"  {\r",
											"    \"batchId\": \r",
											"    {\r",
											"      \"type\": \"integer\",\r",
											"      \"minimum\": 0\r",
											"    },\r",
											"    \"classNo\": \r",
											"    {\r",
											"      \"type\": \"integer\",\r",
											"       \"minimum\": 1\r",
											"    },\r",
											"    \"classDate\":\r",
											"    {\r",
											"      \"type\": \"string\",\r",
											"      \"format\": \"date-time\"\r",
											"    },\r",
											"    \"classTopic\":\r",
											"    {\r",
											"      \"type\": \"string\",\r",
											"    },\r",
											"    \"classStatus\": \r",
											"    {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"classStaffId\": \r",
											"    {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"classDescription\": \r",
											"    {\r",
											"      \"type\": \"string\",\r",
											"    },\r",
											"    \"classComments\": \r",
											"    {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"classNotes\": \r",
											"    {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"classRecordingPath\": \r",
											"    {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"classScheduledDates\": \r",
											"    {\r",
											"      \"type\": \"array\",\r",
											"       \"items\": \r",
											"       {\r",
											"        \"type\": \"string\",\r",
											"        \"format\": \"date-time\"\r",
											"       },\r",
											"      \"minItems\": 1\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"batchId\",\r",
											"    \"classNo\",\r",
											"    \"classDate\",\r",
											"    \"classTopic\",\r",
											"    \"classStatus\",\r",
											"    \"classStaffId\",\r",
											"    \"classDescription\",\r",
											"    \"classComments\",\r",
											"    \"classNotes\",\r",
											"    \"classRecordingPath\",\r",
											"    \"classScheduledDates\"\r",
											"  ]\r",
											" }\r",
											"\r",
											"    //5. Request VS Response Body Validation\r",
											"    pm.test(\"Class details in Request and Response matches\", function () {\r",
											"\r",
											"        // Get the raw request body and Parse it to JSON\r",
											"        const rawRequestBody = pm.request.body.raw;\r",
											"        const requestBody = JSON.parse(rawRequestBody);\r",
											"\r",
											"       // pm.expect(response).to.include(\"classId\");\r",
											"        pm.expect(response).to.have.property(\"csId\");\r",
											"        pm.expect(requestBody.batchId).to.eql(response.batchId);\r",
											"        pm.expect(requestBody.classNo).to.eql(response.classNo);\r",
											"        pm.expect(requestBody.classDate).to.eql(response.classDate);\r",
											"        pm.expect(requestBody.classTopic).to.eql(response.classTopic);\r",
											"        pm.expect(requestBody.classStaffId).to.eql(response.classStaffId);\r",
											"        pm.expect(requestBody.classDescription).to.eql(response.classDescription);\r",
											"        pm.expect(requestBody.classComments).to.eql(response.classComments);\r",
											"        pm.expect(requestBody.classNotes).to.eql(response.classNotes);\r",
											"        pm.expect(requestBody.classRecordingPath).to.eql(response.classRecordingPath);\r",
											"    \r",
											"\r",
											"    });\r",
											"\r",
											"    //GET ALL CLASS COUNT AFTER CLASS CREATION\r",
											"    pm.test(\"Check Total Class Count increased by 1\", function () {\r",
											"        \r",
											"        // Perform GET request classically\r",
											"        pm.sendRequest({\r",
											"            url: pm.environment.get(\"baseURL\")+'/allClasses',  \r",
											"            method: 'GET',\r",
											"            header: {\r",
											"               'Authorization': 'Bearer ' + pm.collectionVariables.get(\"BearerToken\") \r",
											"            }\r",
											"        }, function (err, res) {\r",
											"            if (err) {\r",
											"                console.log(err);\r",
											"                   // pm.expect(err).to.be.null; // Ensure there is no error\r",
											"                return;\r",
											"            } else {\r",
											"               \r",
											"                const classes = res.json(); \r",
											"                const count = classes.length; \r",
											"\r",
											"                   pm.expect(count).to.equal((pm.collectionVariables.get(\"ClassCount_BeforeAdd\"))+1); \r",
											"                \r",
											"            }\r",
											"        });\r",
											"    });\r",
											"\r",
											"}\r",
											"\r",
											"\r",
											"//SET VALUE AT RUN TIME (LATER CHECK IF THIS COULD BE TRANSFERRED AS CLASS OBJECT!!!!)\r",
											"pm.collectionVariables.set(\"classId\", response.classId)\r",
											"pm.collectionVariables.set(\"batchId\", response.batchId)\r",
											"pm.collectionVariables.set(\"classNo\", response.classNo)\r",
											"pm.collectionVariables.set(\"classDate\", response.classDate)\r",
											"pm.collectionVariables.set(\"classTopic\", response.classTopic)\r",
											"pm.collectionVariables.set(\"classStaffId\", response.classStaffId)\r",
											"pm.collectionVariables.set(\"classDescription\", response.classDescription)\r",
											"pm.collectionVariables.set(\"classComments\", response.classComments)\r",
											"pm.collectionVariables.set(\"classNotes\", response.classNotes)\r",
											"pm.collectionVariables.set(\"classRecordingPath\", response.classRecordingPath)\r",
											"\r",
											"\r",
											"//NEGATIVE TEST VALIDATION\r",
											"\r",
											"\r",
											"/**\r",
											" * status code = 400\r",
											"{   \r",
											"    \"message\": \"programName Must contain only letters and sometimes hyphens\",\r",
											"    \"success\": false\r",
											"}\r",
											" */"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "0d29c538-7b1c-4894-8a41-04fedafdc273",
										"exec": [
											"function getRandomLetterString() {\r",
											"    const letters = 'abcdefghijklmnopqrstuvwxyz'; // Available letters\r",
											"    let randomString = '';\r",
											"    \r",
											"    // Loop 3 times to generate a 3-letter string\r",
											"    for (let i = 0; i < 3; i++) {\r",
											"        const randomIndex = Math.floor(Math.random() * letters.length); // Get a random index\r",
											"        randomString += letters[randomIndex]; // Add the random letter to the string\r",
											"    }\r",
											"\r",
											"    return randomString;\r",
											"}\r",
											"\r",
											"var className = 'SeleniumPython-Ten'+ getRandomLetterString();\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "5fcacc80-c82c-49eb-83ec-a875381f6f3e",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{ \r\n\"batchId\": {{batchId}},\r\n\"classNo\": {{ }},\r\n\"classDate\": \"{{classDate}}\",\r\n\"classTopic\": \"{{classTopic}}\",\r\n\"classStatus\": \"{{classStatus}}\",\r\n\"classStaffId\": \"{{classStaffId}}\",\r\n\"classDescription\": \"{{classDescription}}\",\r\n\"classComments\": \"{{classComments}}\" ,\r\n\"classNotes\": \"{{classNotes}}\",\r\n\"classRecordingPath\": \"{{classRecordingPath}}\",\r\n\"classScheduledDates\": [\"{{classScheduledDates}}\"]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}/CreateClassSchedule"
							},
							"response": []
						},
						{
							"name": "Create New Class with blank Class Date",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fc70e53d-7e6a-4583-a90d-b4941e1c79f1",
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"//POSITIVE TEST VALIDATION\r",
											"if(pm.response.to.have.status(201)){ // HAPPY PATH\r",
											"\r",
											"    //1. Status\r",
											"    pm.test(\"Status code is 201\", function () {\r",
											"        pm.response.to.have.status(201);\r",
											"    });\r",
											"\r",
											"    //2. Status Line\r",
											"    pm.test(\"Status message is Created\", function () {\r",
											"        pm.response.to.have.status();\r",
											"    });\r",
											"\r",
											"    //3. Test for Content-Type header having a particular value\r",
											"    pm.test(\"Content-Type header is application/json\", () => {\r",
											"        pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
											"    });\r",
											"\r",
											"    //4. Schema Validation -- TO BE DONE\r",
											"    var jsonData=pm.response.json();\r",
											"    var schema =\r",
											" {\r",
											"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": \r",
											"  {\r",
											"    \"batchId\": \r",
											"    {\r",
											"      \"type\": \"integer\",\r",
											"      \"minimum\": 0\r",
											"    },\r",
											"    \"classNo\": \r",
											"    {\r",
											"      \"type\": \"integer\",\r",
											"       \"minimum\": 1\r",
											"    },\r",
											"    \"classDate\":\r",
											"    {\r",
											"      \"type\": \"string\",\r",
											"      \"format\": \"date-time\"\r",
											"    },\r",
											"    \"classTopic\":\r",
											"    {\r",
											"      \"type\": \"string\",\r",
											"    },\r",
											"    \"classStatus\": \r",
											"    {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"classStaffId\": \r",
											"    {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"classDescription\": \r",
											"    {\r",
											"      \"type\": \"string\",\r",
											"    },\r",
											"    \"classComments\": \r",
											"    {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"classNotes\": \r",
											"    {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"classRecordingPath\": \r",
											"    {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"classScheduledDates\": \r",
											"    {\r",
											"      \"type\": \"array\",\r",
											"       \"items\": \r",
											"       {\r",
											"        \"type\": \"string\",\r",
											"        \"format\": \"date-time\"\r",
											"       },\r",
											"      \"minItems\": 1\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"batchId\",\r",
											"    \"classNo\",\r",
											"    \"classDate\",\r",
											"    \"classTopic\",\r",
											"    \"classStatus\",\r",
											"    \"classStaffId\",\r",
											"    \"classDescription\",\r",
											"    \"classComments\",\r",
											"    \"classNotes\",\r",
											"    \"classRecordingPath\",\r",
											"    \"classScheduledDates\"\r",
											"  ]\r",
											" }\r",
											"\r",
											"    //5. Request VS Response Body Validation\r",
											"    pm.test(\"Class details in Request and Response matches\", function () {\r",
											"\r",
											"        // Get the raw request body and Parse it to JSON\r",
											"        const rawRequestBody = pm.request.body.raw;\r",
											"        const requestBody = JSON.parse(rawRequestBody);\r",
											"\r",
											"       // pm.expect(response).to.include(\"classId\");\r",
											"        pm.expect(response).to.have.property(\"csId\");\r",
											"        pm.expect(requestBody.batchId).to.eql(response.batchId);\r",
											"        pm.expect(requestBody.classNo).to.eql(response.classNo);\r",
											"        pm.expect(requestBody.classDate).to.eql(response.classDate);\r",
											"        pm.expect(requestBody.classTopic).to.eql(response.classTopic);\r",
											"        pm.expect(requestBody.classStaffId).to.eql(response.classStaffId);\r",
											"        pm.expect(requestBody.classDescription).to.eql(response.classDescription);\r",
											"        pm.expect(requestBody.classComments).to.eql(response.classComments);\r",
											"        pm.expect(requestBody.classNotes).to.eql(response.classNotes);\r",
											"        pm.expect(requestBody.classRecordingPath).to.eql(response.classRecordingPath);\r",
											"    \r",
											"\r",
											"    });\r",
											"\r",
											"    //GET ALL CLASS COUNT AFTER CLASS CREATION\r",
											"    pm.test(\"Check Total Class Count increased by 1\", function () {\r",
											"        \r",
											"        // Perform GET request classically\r",
											"        pm.sendRequest({\r",
											"            url: pm.environment.get(\"baseURL\")+'/allClasses',  \r",
											"            method: 'GET',\r",
											"            header: {\r",
											"               'Authorization': 'Bearer ' + pm.collectionVariables.get(\"BearerToken\") \r",
											"            }\r",
											"        }, function (err, res) {\r",
											"            if (err) {\r",
											"                console.log(err);\r",
											"                   // pm.expect(err).to.be.null; // Ensure there is no error\r",
											"                return;\r",
											"            } else {\r",
											"               \r",
											"                const classes = res.json(); \r",
											"                const count = classes.length; \r",
											"\r",
											"                   pm.expect(count).to.equal((pm.collectionVariables.get(\"ClassCount_BeforeAdd\"))+1); \r",
											"                \r",
											"            }\r",
											"        });\r",
											"    });\r",
											"\r",
											"}\r",
											"\r",
											"\r",
											"//SET VALUE AT RUN TIME (LATER CHECK IF THIS COULD BE TRANSFERRED AS CLASS OBJECT!!!!)\r",
											"pm.collectionVariables.set(\"classId\", response.classId)\r",
											"pm.collectionVariables.set(\"batchId\", response.batchId)\r",
											"pm.collectionVariables.set(\"classNo\", response.classNo)\r",
											"pm.collectionVariables.set(\"classDate\", response.classDate)\r",
											"pm.collectionVariables.set(\"classTopic\", response.classTopic)\r",
											"pm.collectionVariables.set(\"classStaffId\", response.classStaffId)\r",
											"pm.collectionVariables.set(\"classDescription\", response.classDescription)\r",
											"pm.collectionVariables.set(\"classComments\", response.classComments)\r",
											"pm.collectionVariables.set(\"classNotes\", response.classNotes)\r",
											"pm.collectionVariables.set(\"classRecordingPath\", response.classRecordingPath)\r",
											"\r",
											"\r",
											"//NEGATIVE TEST VALIDATION\r",
											"\r",
											"\r",
											"/**\r",
											" * status code = 400\r",
											"{   \r",
											"    \"message\": \"programName Must contain only letters and sometimes hyphens\",\r",
											"    \"success\": false\r",
											"}\r",
											" */"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "0d29c538-7b1c-4894-8a41-04fedafdc273",
										"exec": [
											"function getRandomLetterString() {\r",
											"    const letters = 'abcdefghijklmnopqrstuvwxyz'; // Available letters\r",
											"    let randomString = '';\r",
											"    \r",
											"    // Loop 3 times to generate a 3-letter string\r",
											"    for (let i = 0; i < 3; i++) {\r",
											"        const randomIndex = Math.floor(Math.random() * letters.length); // Get a random index\r",
											"        randomString += letters[randomIndex]; // Add the random letter to the string\r",
											"    }\r",
											"\r",
											"    return randomString;\r",
											"}\r",
											"\r",
											"var className = 'SeleniumPython-Ten'+ getRandomLetterString();\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "f1e78666-48c5-49a0-9c53-4ba1ed93f38f",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{ \r\n\"batchId\": {{batchId}},\r\n\"classNo\": {{classNo}},\r\n\"classDate\": \"{{ }}\",\r\n\"classTopic\": \"{{classTopic}}\",\r\n\"classStatus\": \"{{classStatus}}\",\r\n\"classStaffId\": \"{{classStaffId}}\",\r\n\"classDescription\": \"{{classDescription}}\",\r\n\"classComments\": \"{{classComments}}\" ,\r\n\"classNotes\": \"{{classNotes}}\",\r\n\"classRecordingPath\": \"{{classRecordingPath}}\",\r\n\"classScheduledDates\": [\"{{classScheduledDates}}\"]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}/CreateClassSchedule"
							},
							"response": []
						},
						{
							"name": "Create New Class with blank Class Staff Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fc70e53d-7e6a-4583-a90d-b4941e1c79f1",
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"//POSITIVE TEST VALIDATION\r",
											"if(pm.response.to.have.status(201)){ // HAPPY PATH\r",
											"\r",
											"    //1. Status\r",
											"    pm.test(\"Status code is 201\", function () {\r",
											"        pm.response.to.have.status(201);\r",
											"    });\r",
											"\r",
											"    //2. Status Line\r",
											"    pm.test(\"Status message is Created\", function () {\r",
											"        pm.response.to.have.status();\r",
											"    });\r",
											"\r",
											"    //3. Test for Content-Type header having a particular value\r",
											"    pm.test(\"Content-Type header is application/json\", () => {\r",
											"        pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
											"    });\r",
											"\r",
											"    //4. Schema Validation -- TO BE DONE\r",
											"    var jsonData=pm.response.json();\r",
											"    var schema =\r",
											" {\r",
											"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": \r",
											"  {\r",
											"    \"batchId\": \r",
											"    {\r",
											"      \"type\": \"integer\",\r",
											"      \"minimum\": 0\r",
											"    },\r",
											"    \"classNo\": \r",
											"    {\r",
											"      \"type\": \"integer\",\r",
											"       \"minimum\": 1\r",
											"    },\r",
											"    \"classDate\":\r",
											"    {\r",
											"      \"type\": \"string\",\r",
											"      \"format\": \"date-time\"\r",
											"    },\r",
											"    \"classTopic\":\r",
											"    {\r",
											"      \"type\": \"string\",\r",
											"    },\r",
											"    \"classStatus\": \r",
											"    {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"classStaffId\": \r",
											"    {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"classDescription\": \r",
											"    {\r",
											"      \"type\": \"string\",\r",
											"    },\r",
											"    \"classComments\": \r",
											"    {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"classNotes\": \r",
											"    {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"classRecordingPath\": \r",
											"    {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"classScheduledDates\": \r",
											"    {\r",
											"      \"type\": \"array\",\r",
											"       \"items\": \r",
											"       {\r",
											"        \"type\": \"string\",\r",
											"        \"format\": \"date-time\"\r",
											"       },\r",
											"      \"minItems\": 1\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"batchId\",\r",
											"    \"classNo\",\r",
											"    \"classDate\",\r",
											"    \"classTopic\",\r",
											"    \"classStatus\",\r",
											"    \"classStaffId\",\r",
											"    \"classDescription\",\r",
											"    \"classComments\",\r",
											"    \"classNotes\",\r",
											"    \"classRecordingPath\",\r",
											"    \"classScheduledDates\"\r",
											"  ]\r",
											" }\r",
											"\r",
											"    //5. Request VS Response Body Validation\r",
											"    pm.test(\"Class details in Request and Response matches\", function () {\r",
											"\r",
											"        // Get the raw request body and Parse it to JSON\r",
											"        const rawRequestBody = pm.request.body.raw;\r",
											"        const requestBody = JSON.parse(rawRequestBody);\r",
											"\r",
											"       // pm.expect(response).to.include(\"classId\");\r",
											"        pm.expect(response).to.have.property(\"csId\");\r",
											"        pm.expect(requestBody.batchId).to.eql(response.batchId);\r",
											"        pm.expect(requestBody.classNo).to.eql(response.classNo);\r",
											"        pm.expect(requestBody.classDate).to.eql(response.classDate);\r",
											"        pm.expect(requestBody.classTopic).to.eql(response.classTopic);\r",
											"        pm.expect(requestBody.classStaffId).to.eql(response.classStaffId);\r",
											"        pm.expect(requestBody.classDescription).to.eql(response.classDescription);\r",
											"        pm.expect(requestBody.classComments).to.eql(response.classComments);\r",
											"        pm.expect(requestBody.classNotes).to.eql(response.classNotes);\r",
											"        pm.expect(requestBody.classRecordingPath).to.eql(response.classRecordingPath);\r",
											"    \r",
											"\r",
											"    });\r",
											"\r",
											"    //GET ALL CLASS COUNT AFTER CLASS CREATION\r",
											"    pm.test(\"Check Total Class Count increased by 1\", function () {\r",
											"        \r",
											"        // Perform GET request classically\r",
											"        pm.sendRequest({\r",
											"            url: pm.environment.get(\"baseURL\")+'/allClasses',  \r",
											"            method: 'GET',\r",
											"            header: {\r",
											"               'Authorization': 'Bearer ' + pm.collectionVariables.get(\"BearerToken\") \r",
											"            }\r",
											"        }, function (err, res) {\r",
											"            if (err) {\r",
											"                console.log(err);\r",
											"                   // pm.expect(err).to.be.null; // Ensure there is no error\r",
											"                return;\r",
											"            } else {\r",
											"               \r",
											"                const classes = res.json(); \r",
											"                const count = classes.length; \r",
											"\r",
											"                   pm.expect(count).to.equal((pm.collectionVariables.get(\"ClassCount_BeforeAdd\"))+1); \r",
											"                \r",
											"            }\r",
											"        });\r",
											"    });\r",
											"\r",
											"}\r",
											"\r",
											"\r",
											"//SET VALUE AT RUN TIME (LATER CHECK IF THIS COULD BE TRANSFERRED AS CLASS OBJECT!!!!)\r",
											"pm.collectionVariables.set(\"classId\", response.classId)\r",
											"pm.collectionVariables.set(\"batchId\", response.batchId)\r",
											"pm.collectionVariables.set(\"classNo\", response.classNo)\r",
											"pm.collectionVariables.set(\"classDate\", response.classDate)\r",
											"pm.collectionVariables.set(\"classTopic\", response.classTopic)\r",
											"pm.collectionVariables.set(\"classStaffId\", response.classStaffId)\r",
											"pm.collectionVariables.set(\"classDescription\", response.classDescription)\r",
											"pm.collectionVariables.set(\"classComments\", response.classComments)\r",
											"pm.collectionVariables.set(\"classNotes\", response.classNotes)\r",
											"pm.collectionVariables.set(\"classRecordingPath\", response.classRecordingPath)\r",
											"\r",
											"\r",
											"//NEGATIVE TEST VALIDATION\r",
											"\r",
											"\r",
											"/**\r",
											" * status code = 400\r",
											"{   \r",
											"    \"message\": \"programName Must contain only letters and sometimes hyphens\",\r",
											"    \"success\": false\r",
											"}\r",
											" */"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "0d29c538-7b1c-4894-8a41-04fedafdc273",
										"exec": [
											"function getRandomLetterString() {\r",
											"    const letters = 'abcdefghijklmnopqrstuvwxyz'; // Available letters\r",
											"    let randomString = '';\r",
											"    \r",
											"    // Loop 3 times to generate a 3-letter string\r",
											"    for (let i = 0; i < 3; i++) {\r",
											"        const randomIndex = Math.floor(Math.random() * letters.length); // Get a random index\r",
											"        randomString += letters[randomIndex]; // Add the random letter to the string\r",
											"    }\r",
											"\r",
											"    return randomString;\r",
											"}\r",
											"\r",
											"var className = 'SeleniumPython-Ten'+ getRandomLetterString();\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "d6b1df22-3fb6-40c5-98f6-9fd7ed3e8401",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{ \r\n\"batchId\": {{batchId}},\r\n\"classNo\": {{classNo}},\r\n\"classDate\": \"{{classDate}}\",\r\n\"classTopic\": \"{{classTopic}}\",\r\n\"classStatus\": \"{{classStatus}}\",\r\n\"classStaffId\": \"{{ }}\",\r\n\"classDescription\": \"{{classDescription}}\",\r\n\"classComments\": \"{{classComments}}\" ,\r\n\"classNotes\": \"{{classNotes}}\",\r\n\"classRecordingPath\": \"{{classRecordingPath}}\",\r\n\"classScheduledDates\": [\"{{classScheduledDates}}\"]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}/CreateClassSchedule"
							},
							"response": []
						},
						{
							"name": "Create New Class with blank Class Description",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fc70e53d-7e6a-4583-a90d-b4941e1c79f1",
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"//POSITIVE TEST VALIDATION\r",
											"if(pm.response.to.have.status(201)){ // HAPPY PATH\r",
											"\r",
											"    //1. Status\r",
											"    pm.test(\"Status code is 201\", function () {\r",
											"        pm.response.to.have.status(201);\r",
											"    });\r",
											"\r",
											"    //2. Status Line\r",
											"    pm.test(\"Status message is Created\", function () {\r",
											"        pm.response.to.have.status();\r",
											"    });\r",
											"\r",
											"    //3. Test for Content-Type header having a particular value\r",
											"    pm.test(\"Content-Type header is application/json\", () => {\r",
											"        pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
											"    });\r",
											"\r",
											"    //4. Schema Validation -- TO BE DONE\r",
											"    var jsonData=pm.response.json();\r",
											"    var schema =\r",
											" {\r",
											"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": \r",
											"  {\r",
											"    \"batchId\": \r",
											"    {\r",
											"      \"type\": \"integer\",\r",
											"      \"minimum\": 0\r",
											"    },\r",
											"    \"classNo\": \r",
											"    {\r",
											"      \"type\": \"integer\",\r",
											"       \"minimum\": 1\r",
											"    },\r",
											"    \"classDate\":\r",
											"    {\r",
											"      \"type\": \"string\",\r",
											"      \"format\": \"date-time\"\r",
											"    },\r",
											"    \"classTopic\":\r",
											"    {\r",
											"      \"type\": \"string\",\r",
											"    },\r",
											"    \"classStatus\": \r",
											"    {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"classStaffId\": \r",
											"    {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"classDescription\": \r",
											"    {\r",
											"      \"type\": \"string\",\r",
											"    },\r",
											"    \"classComments\": \r",
											"    {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"classNotes\": \r",
											"    {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"classRecordingPath\": \r",
											"    {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"classScheduledDates\": \r",
											"    {\r",
											"      \"type\": \"array\",\r",
											"       \"items\": \r",
											"       {\r",
											"        \"type\": \"string\",\r",
											"        \"format\": \"date-time\"\r",
											"       },\r",
											"      \"minItems\": 1\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"batchId\",\r",
											"    \"classNo\",\r",
											"    \"classDate\",\r",
											"    \"classTopic\",\r",
											"    \"classStatus\",\r",
											"    \"classStaffId\",\r",
											"    \"classDescription\",\r",
											"    \"classComments\",\r",
											"    \"classNotes\",\r",
											"    \"classRecordingPath\",\r",
											"    \"classScheduledDates\"\r",
											"  ]\r",
											" }\r",
											"\r",
											"    //5. Request VS Response Body Validation\r",
											"    pm.test(\"Class details in Request and Response matches\", function () {\r",
											"\r",
											"        // Get the raw request body and Parse it to JSON\r",
											"        const rawRequestBody = pm.request.body.raw;\r",
											"        const requestBody = JSON.parse(rawRequestBody);\r",
											"\r",
											"       // pm.expect(response).to.include(\"classId\");\r",
											"        pm.expect(response).to.have.property(\"csId\");\r",
											"        pm.expect(requestBody.batchId).to.eql(response.batchId);\r",
											"        pm.expect(requestBody.classNo).to.eql(response.classNo);\r",
											"        pm.expect(requestBody.classDate).to.eql(response.classDate);\r",
											"        pm.expect(requestBody.classTopic).to.eql(response.classTopic);\r",
											"        pm.expect(requestBody.classStaffId).to.eql(response.classStaffId);\r",
											"        pm.expect(requestBody.classDescription).to.eql(response.classDescription);\r",
											"        pm.expect(requestBody.classComments).to.eql(response.classComments);\r",
											"        pm.expect(requestBody.classNotes).to.eql(response.classNotes);\r",
											"        pm.expect(requestBody.classRecordingPath).to.eql(response.classRecordingPath);\r",
											"    \r",
											"\r",
											"    });\r",
											"\r",
											"    //GET ALL CLASS COUNT AFTER CLASS CREATION\r",
											"    pm.test(\"Check Total Class Count increased by 1\", function () {\r",
											"        \r",
											"        // Perform GET request classically\r",
											"        pm.sendRequest({\r",
											"            url: pm.environment.get(\"baseURL\")+'/allClasses',  \r",
											"            method: 'GET',\r",
											"            header: {\r",
											"               'Authorization': 'Bearer ' + pm.collectionVariables.get(\"BearerToken\") \r",
											"            }\r",
											"        }, function (err, res) {\r",
											"            if (err) {\r",
											"                console.log(err);\r",
											"                   // pm.expect(err).to.be.null; // Ensure there is no error\r",
											"                return;\r",
											"            } else {\r",
											"               \r",
											"                const classes = res.json(); \r",
											"                const count = classes.length; \r",
											"\r",
											"                   pm.expect(count).to.equal((pm.collectionVariables.get(\"ClassCount_BeforeAdd\"))+1); \r",
											"                \r",
											"            }\r",
											"        });\r",
											"    });\r",
											"\r",
											"}\r",
											"\r",
											"\r",
											"//SET VALUE AT RUN TIME (LATER CHECK IF THIS COULD BE TRANSFERRED AS CLASS OBJECT!!!!)\r",
											"pm.collectionVariables.set(\"classId\", response.classId)\r",
											"pm.collectionVariables.set(\"batchId\", response.batchId)\r",
											"pm.collectionVariables.set(\"classNo\", response.classNo)\r",
											"pm.collectionVariables.set(\"classDate\", response.classDate)\r",
											"pm.collectionVariables.set(\"classTopic\", response.classTopic)\r",
											"pm.collectionVariables.set(\"classStaffId\", response.classStaffId)\r",
											"pm.collectionVariables.set(\"classDescription\", response.classDescription)\r",
											"pm.collectionVariables.set(\"classComments\", response.classComments)\r",
											"pm.collectionVariables.set(\"classNotes\", response.classNotes)\r",
											"pm.collectionVariables.set(\"classRecordingPath\", response.classRecordingPath)\r",
											"\r",
											"\r",
											"//NEGATIVE TEST VALIDATION\r",
											"\r",
											"\r",
											"/**\r",
											" * status code = 400\r",
											"{   \r",
											"    \"message\": \"programName Must contain only letters and sometimes hyphens\",\r",
											"    \"success\": false\r",
											"}\r",
											" */"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "0d29c538-7b1c-4894-8a41-04fedafdc273",
										"exec": [
											"function getRandomLetterString() {\r",
											"    const letters = 'abcdefghijklmnopqrstuvwxyz'; // Available letters\r",
											"    let randomString = '';\r",
											"    \r",
											"    // Loop 3 times to generate a 3-letter string\r",
											"    for (let i = 0; i < 3; i++) {\r",
											"        const randomIndex = Math.floor(Math.random() * letters.length); // Get a random index\r",
											"        randomString += letters[randomIndex]; // Add the random letter to the string\r",
											"    }\r",
											"\r",
											"    return randomString;\r",
											"}\r",
											"\r",
											"var className = 'SeleniumPython-Ten'+ getRandomLetterString();\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "7e2e88ea-a783-4f37-b60e-ee9563330473",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{ \r\n\"batchId\": {{batchId}},\r\n\"classNo\": {{classNo}},\r\n\"classDate\": \"{{classDate}}\",\r\n\"classTopic\": \"{{classTopic}}\",\r\n\"classStatus\": \"{{classStatus}}\",\r\n\"classStaffId\": \"{{classStaffId}}\",\r\n\"classDescription\": \"{{ }}\",\r\n\"classComments\": \"{{classComments}}\" ,\r\n\"classNotes\": \"{{classNotes}}\",\r\n\"classRecordingPath\": \"{{classRecordingPath}}\",\r\n\"classScheduledDates\": [\"{{classScheduledDates}}\"]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}/CreateClassSchedule"
							},
							"response": []
						},
						{
							"name": "Create New Class with blank Class Comments",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fc70e53d-7e6a-4583-a90d-b4941e1c79f1",
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"//POSITIVE TEST VALIDATION\r",
											"if(pm.response.to.have.status(201)){ // HAPPY PATH\r",
											"\r",
											"    //1. Status\r",
											"    pm.test(\"Status code is 201\", function () {\r",
											"        pm.response.to.have.status(201);\r",
											"    });\r",
											"\r",
											"    //2. Status Line\r",
											"    pm.test(\"Status message is Created\", function () {\r",
											"        pm.response.to.have.status();\r",
											"    });\r",
											"\r",
											"    //3. Test for Content-Type header having a particular value\r",
											"    pm.test(\"Content-Type header is application/json\", () => {\r",
											"        pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
											"    });\r",
											"\r",
											"    //4. Schema Validation -- TO BE DONE\r",
											"    var jsonData=pm.response.json();\r",
											"    var schema =\r",
											" {\r",
											"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": \r",
											"  {\r",
											"    \"batchId\": \r",
											"    {\r",
											"      \"type\": \"integer\",\r",
											"      \"minimum\": 0\r",
											"    },\r",
											"    \"classNo\": \r",
											"    {\r",
											"      \"type\": \"integer\",\r",
											"       \"minimum\": 1\r",
											"    },\r",
											"    \"classDate\":\r",
											"    {\r",
											"      \"type\": \"string\",\r",
											"      \"format\": \"date-time\"\r",
											"    },\r",
											"    \"classTopic\":\r",
											"    {\r",
											"      \"type\": \"string\",\r",
											"    },\r",
											"    \"classStatus\": \r",
											"    {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"classStaffId\": \r",
											"    {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"classDescription\": \r",
											"    {\r",
											"      \"type\": \"string\",\r",
											"    },\r",
											"    \"classComments\": \r",
											"    {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"classNotes\": \r",
											"    {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"classRecordingPath\": \r",
											"    {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"classScheduledDates\": \r",
											"    {\r",
											"      \"type\": \"array\",\r",
											"       \"items\": \r",
											"       {\r",
											"        \"type\": \"string\",\r",
											"        \"format\": \"date-time\"\r",
											"       },\r",
											"      \"minItems\": 1\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"batchId\",\r",
											"    \"classNo\",\r",
											"    \"classDate\",\r",
											"    \"classTopic\",\r",
											"    \"classStatus\",\r",
											"    \"classStaffId\",\r",
											"    \"classDescription\",\r",
											"    \"classComments\",\r",
											"    \"classNotes\",\r",
											"    \"classRecordingPath\",\r",
											"    \"classScheduledDates\"\r",
											"  ]\r",
											" }\r",
											"\r",
											"    //5. Request VS Response Body Validation\r",
											"    pm.test(\"Class details in Request and Response matches\", function () {\r",
											"\r",
											"        // Get the raw request body and Parse it to JSON\r",
											"        const rawRequestBody = pm.request.body.raw;\r",
											"        const requestBody = JSON.parse(rawRequestBody);\r",
											"\r",
											"       // pm.expect(response).to.include(\"classId\");\r",
											"        pm.expect(response).to.have.property(\"csId\");\r",
											"        pm.expect(requestBody.batchId).to.eql(response.batchId);\r",
											"        pm.expect(requestBody.classNo).to.eql(response.classNo);\r",
											"        pm.expect(requestBody.classDate).to.eql(response.classDate);\r",
											"        pm.expect(requestBody.classTopic).to.eql(response.classTopic);\r",
											"        pm.expect(requestBody.classStaffId).to.eql(response.classStaffId);\r",
											"        pm.expect(requestBody.classDescription).to.eql(response.classDescription);\r",
											"        pm.expect(requestBody.classComments).to.eql(response.classComments);\r",
											"        pm.expect(requestBody.classNotes).to.eql(response.classNotes);\r",
											"        pm.expect(requestBody.classRecordingPath).to.eql(response.classRecordingPath);\r",
											"    \r",
											"\r",
											"    });\r",
											"\r",
											"    //GET ALL CLASS COUNT AFTER CLASS CREATION\r",
											"    pm.test(\"Check Total Class Count increased by 1\", function () {\r",
											"        \r",
											"        // Perform GET request classically\r",
											"        pm.sendRequest({\r",
											"            url: pm.environment.get(\"baseURL\")+'/allClasses',  \r",
											"            method: 'GET',\r",
											"            header: {\r",
											"               'Authorization': 'Bearer ' + pm.collectionVariables.get(\"BearerToken\") \r",
											"            }\r",
											"        }, function (err, res) {\r",
											"            if (err) {\r",
											"                console.log(err);\r",
											"                   // pm.expect(err).to.be.null; // Ensure there is no error\r",
											"                return;\r",
											"            } else {\r",
											"               \r",
											"                const classes = res.json(); \r",
											"                const count = classes.length; \r",
											"\r",
											"                   pm.expect(count).to.equal((pm.collectionVariables.get(\"ClassCount_BeforeAdd\"))+1); \r",
											"                \r",
											"            }\r",
											"        });\r",
											"    });\r",
											"\r",
											"}\r",
											"\r",
											"\r",
											"//SET VALUE AT RUN TIME (LATER CHECK IF THIS COULD BE TRANSFERRED AS CLASS OBJECT!!!!)\r",
											"pm.collectionVariables.set(\"classId\", response.classId)\r",
											"pm.collectionVariables.set(\"batchId\", response.batchId)\r",
											"pm.collectionVariables.set(\"classNo\", response.classNo)\r",
											"pm.collectionVariables.set(\"classDate\", response.classDate)\r",
											"pm.collectionVariables.set(\"classTopic\", response.classTopic)\r",
											"pm.collectionVariables.set(\"classStaffId\", response.classStaffId)\r",
											"pm.collectionVariables.set(\"classDescription\", response.classDescription)\r",
											"pm.collectionVariables.set(\"classComments\", response.classComments)\r",
											"pm.collectionVariables.set(\"classNotes\", response.classNotes)\r",
											"pm.collectionVariables.set(\"classRecordingPath\", response.classRecordingPath)\r",
											"\r",
											"\r",
											"//NEGATIVE TEST VALIDATION\r",
											"\r",
											"\r",
											"/**\r",
											" * status code = 400\r",
											"{   \r",
											"    \"message\": \"programName Must contain only letters and sometimes hyphens\",\r",
											"    \"success\": false\r",
											"}\r",
											" */"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "0d29c538-7b1c-4894-8a41-04fedafdc273",
										"exec": [
											"function getRandomLetterString() {\r",
											"    const letters = 'abcdefghijklmnopqrstuvwxyz'; // Available letters\r",
											"    let randomString = '';\r",
											"    \r",
											"    // Loop 3 times to generate a 3-letter string\r",
											"    for (let i = 0; i < 3; i++) {\r",
											"        const randomIndex = Math.floor(Math.random() * letters.length); // Get a random index\r",
											"        randomString += letters[randomIndex]; // Add the random letter to the string\r",
											"    }\r",
											"\r",
											"    return randomString;\r",
											"}\r",
											"\r",
											"var className = 'SeleniumPython-Ten'+ getRandomLetterString();\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "e56421b7-9c4c-4820-8be7-732c9ccd8da1",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{ \r\n\"batchId\": {{batchId}},\r\n\"classNo\": {{classNo}},\r\n\"classDate\": \"{{classDate}}\",\r\n\"classTopic\": \"{{classTopic}}\",\r\n\"classStatus\": \"{{classStatus}}\",\r\n\"classStaffId\": \"{{classStaffId}}\",\r\n\"classDescription\": \"{{classDescription}}\",\r\n\"classComments\": \"{{ }}\" ,\r\n\"classNotes\": \"{{classNotes}}\",\r\n\"classRecordingPath\": \"{{classRecordingPath}}\",\r\n\"classScheduledDates\": [\"{{classScheduledDates}}\"]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}/CreateClassSchedule"
							},
							"response": []
						},
						{
							"name": "Create New Class with blank Class Notes",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fc70e53d-7e6a-4583-a90d-b4941e1c79f1",
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"//POSITIVE TEST VALIDATION\r",
											"if(pm.response.to.have.status(201)){ // HAPPY PATH\r",
											"\r",
											"    //1. Status\r",
											"    pm.test(\"Status code is 201\", function () {\r",
											"        pm.response.to.have.status(201);\r",
											"    });\r",
											"\r",
											"    //2. Status Line\r",
											"    pm.test(\"Status message is Created\", function () {\r",
											"        pm.response.to.have.status();\r",
											"    });\r",
											"\r",
											"    //3. Test for Content-Type header having a particular value\r",
											"    pm.test(\"Content-Type header is application/json\", () => {\r",
											"        pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
											"    });\r",
											"\r",
											"    //4. Schema Validation -- TO BE DONE\r",
											"    var jsonData=pm.response.json();\r",
											"    var schema =\r",
											" {\r",
											"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": \r",
											"  {\r",
											"    \"batchId\": \r",
											"    {\r",
											"      \"type\": \"integer\",\r",
											"      \"minimum\": 0\r",
											"    },\r",
											"    \"classNo\": \r",
											"    {\r",
											"      \"type\": \"integer\",\r",
											"       \"minimum\": 1\r",
											"    },\r",
											"    \"classDate\":\r",
											"    {\r",
											"      \"type\": \"string\",\r",
											"      \"format\": \"date-time\"\r",
											"    },\r",
											"    \"classTopic\":\r",
											"    {\r",
											"      \"type\": \"string\",\r",
											"    },\r",
											"    \"classStatus\": \r",
											"    {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"classStaffId\": \r",
											"    {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"classDescription\": \r",
											"    {\r",
											"      \"type\": \"string\",\r",
											"    },\r",
											"    \"classComments\": \r",
											"    {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"classNotes\": \r",
											"    {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"classRecordingPath\": \r",
											"    {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"classScheduledDates\": \r",
											"    {\r",
											"      \"type\": \"array\",\r",
											"       \"items\": \r",
											"       {\r",
											"        \"type\": \"string\",\r",
											"        \"format\": \"date-time\"\r",
											"       },\r",
											"      \"minItems\": 1\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"batchId\",\r",
											"    \"classNo\",\r",
											"    \"classDate\",\r",
											"    \"classTopic\",\r",
											"    \"classStatus\",\r",
											"    \"classStaffId\",\r",
											"    \"classDescription\",\r",
											"    \"classComments\",\r",
											"    \"classNotes\",\r",
											"    \"classRecordingPath\",\r",
											"    \"classScheduledDates\"\r",
											"  ]\r",
											" }\r",
											"\r",
											"    //5. Request VS Response Body Validation\r",
											"    pm.test(\"Class details in Request and Response matches\", function () {\r",
											"\r",
											"        // Get the raw request body and Parse it to JSON\r",
											"        const rawRequestBody = pm.request.body.raw;\r",
											"        const requestBody = JSON.parse(rawRequestBody);\r",
											"\r",
											"       // pm.expect(response).to.include(\"classId\");\r",
											"        pm.expect(response).to.have.property(\"csId\");\r",
											"        pm.expect(requestBody.batchId).to.eql(response.batchId);\r",
											"        pm.expect(requestBody.classNo).to.eql(response.classNo);\r",
											"        pm.expect(requestBody.classDate).to.eql(response.classDate);\r",
											"        pm.expect(requestBody.classTopic).to.eql(response.classTopic);\r",
											"        pm.expect(requestBody.classStaffId).to.eql(response.classStaffId);\r",
											"        pm.expect(requestBody.classDescription).to.eql(response.classDescription);\r",
											"        pm.expect(requestBody.classComments).to.eql(response.classComments);\r",
											"        pm.expect(requestBody.classNotes).to.eql(response.classNotes);\r",
											"        pm.expect(requestBody.classRecordingPath).to.eql(response.classRecordingPath);\r",
											"    \r",
											"\r",
											"    });\r",
											"\r",
											"    //GET ALL CLASS COUNT AFTER CLASS CREATION\r",
											"    pm.test(\"Check Total Class Count increased by 1\", function () {\r",
											"        \r",
											"        // Perform GET request classically\r",
											"        pm.sendRequest({\r",
											"            url: pm.environment.get(\"baseURL\")+'/allClasses',  \r",
											"            method: 'GET',\r",
											"            header: {\r",
											"               'Authorization': 'Bearer ' + pm.collectionVariables.get(\"BearerToken\") \r",
											"            }\r",
											"        }, function (err, res) {\r",
											"            if (err) {\r",
											"                console.log(err);\r",
											"                   // pm.expect(err).to.be.null; // Ensure there is no error\r",
											"                return;\r",
											"            } else {\r",
											"               \r",
											"                const classes = res.json(); \r",
											"                const count = classes.length; \r",
											"\r",
											"                   pm.expect(count).to.equal((pm.collectionVariables.get(\"ClassCount_BeforeAdd\"))+1); \r",
											"                \r",
											"            }\r",
											"        });\r",
											"    });\r",
											"\r",
											"}\r",
											"\r",
											"\r",
											"//SET VALUE AT RUN TIME (LATER CHECK IF THIS COULD BE TRANSFERRED AS CLASS OBJECT!!!!)\r",
											"pm.collectionVariables.set(\"classId\", response.classId)\r",
											"pm.collectionVariables.set(\"batchId\", response.batchId)\r",
											"pm.collectionVariables.set(\"classNo\", response.classNo)\r",
											"pm.collectionVariables.set(\"classDate\", response.classDate)\r",
											"pm.collectionVariables.set(\"classTopic\", response.classTopic)\r",
											"pm.collectionVariables.set(\"classStaffId\", response.classStaffId)\r",
											"pm.collectionVariables.set(\"classDescription\", response.classDescription)\r",
											"pm.collectionVariables.set(\"classComments\", response.classComments)\r",
											"pm.collectionVariables.set(\"classNotes\", response.classNotes)\r",
											"pm.collectionVariables.set(\"classRecordingPath\", response.classRecordingPath)\r",
											"\r",
											"\r",
											"//NEGATIVE TEST VALIDATION\r",
											"\r",
											"\r",
											"/**\r",
											" * status code = 400\r",
											"{   \r",
											"    \"message\": \"programName Must contain only letters and sometimes hyphens\",\r",
											"    \"success\": false\r",
											"}\r",
											" */"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "0d29c538-7b1c-4894-8a41-04fedafdc273",
										"exec": [
											"function getRandomLetterString() {\r",
											"    const letters = 'abcdefghijklmnopqrstuvwxyz'; // Available letters\r",
											"    let randomString = '';\r",
											"    \r",
											"    // Loop 3 times to generate a 3-letter string\r",
											"    for (let i = 0; i < 3; i++) {\r",
											"        const randomIndex = Math.floor(Math.random() * letters.length); // Get a random index\r",
											"        randomString += letters[randomIndex]; // Add the random letter to the string\r",
											"    }\r",
											"\r",
											"    return randomString;\r",
											"}\r",
											"\r",
											"var className = 'SeleniumPython-Ten'+ getRandomLetterString();\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "34368853-0837-459e-8894-5c4caef5436e",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{ \r\n\"batchId\": {{batchId}},\r\n\"classNo\": {{classNo}},\r\n\"classDate\": \"{{classDate}}\",\r\n\"classTopic\": \"{{classTopic}}\",\r\n\"classStatus\": \"{{classStatus}}\",\r\n\"classStaffId\": \"{{classStaffId}}\",\r\n\"classDescription\": \"{{classDescription}}\",\r\n\"classComments\": \"{{classComments}}\" ,\r\n\"classNotes\": \"{{ }}\",\r\n\"classRecordingPath\": \"{{classRecordingPath}}\",\r\n\"classScheduledDates\": [\"{{classScheduledDates}}\"]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}/CreateClassSchedule"
							},
							"response": []
						},
						{
							"name": "Create New Class with blank Class Recording Path",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fc70e53d-7e6a-4583-a90d-b4941e1c79f1",
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"//POSITIVE TEST VALIDATION\r",
											"if(pm.response.to.have.status(201)){ // HAPPY PATH\r",
											"\r",
											"    //1. Status\r",
											"    pm.test(\"Status code is 201\", function () {\r",
											"        pm.response.to.have.status(201);\r",
											"    });\r",
											"\r",
											"    //2. Status Line\r",
											"    pm.test(\"Status message is Created\", function () {\r",
											"        pm.response.to.have.status();\r",
											"    });\r",
											"\r",
											"    //3. Test for Content-Type header having a particular value\r",
											"    pm.test(\"Content-Type header is application/json\", () => {\r",
											"        pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
											"    });\r",
											"\r",
											"    //4. Schema Validation -- TO BE DONE\r",
											"    var jsonData=pm.response.json();\r",
											"    var schema =\r",
											" {\r",
											"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": \r",
											"  {\r",
											"    \"batchId\": \r",
											"    {\r",
											"      \"type\": \"integer\",\r",
											"      \"minimum\": 0\r",
											"    },\r",
											"    \"classNo\": \r",
											"    {\r",
											"      \"type\": \"integer\",\r",
											"       \"minimum\": 1\r",
											"    },\r",
											"    \"classDate\":\r",
											"    {\r",
											"      \"type\": \"string\",\r",
											"      \"format\": \"date-time\"\r",
											"    },\r",
											"    \"classTopic\":\r",
											"    {\r",
											"      \"type\": \"string\",\r",
											"    },\r",
											"    \"classStatus\": \r",
											"    {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"classStaffId\": \r",
											"    {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"classDescription\": \r",
											"    {\r",
											"      \"type\": \"string\",\r",
											"    },\r",
											"    \"classComments\": \r",
											"    {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"classNotes\": \r",
											"    {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"classRecordingPath\": \r",
											"    {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"classScheduledDates\": \r",
											"    {\r",
											"      \"type\": \"array\",\r",
											"       \"items\": \r",
											"       {\r",
											"        \"type\": \"string\",\r",
											"        \"format\": \"date-time\"\r",
											"       },\r",
											"      \"minItems\": 1\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"batchId\",\r",
											"    \"classNo\",\r",
											"    \"classDate\",\r",
											"    \"classTopic\",\r",
											"    \"classStatus\",\r",
											"    \"classStaffId\",\r",
											"    \"classDescription\",\r",
											"    \"classComments\",\r",
											"    \"classNotes\",\r",
											"    \"classRecordingPath\",\r",
											"    \"classScheduledDates\"\r",
											"  ]\r",
											" }\r",
											"\r",
											"    //5. Request VS Response Body Validation\r",
											"    pm.test(\"Class details in Request and Response matches\", function () {\r",
											"\r",
											"        // Get the raw request body and Parse it to JSON\r",
											"        const rawRequestBody = pm.request.body.raw;\r",
											"        const requestBody = JSON.parse(rawRequestBody);\r",
											"\r",
											"       // pm.expect(response).to.include(\"classId\");\r",
											"        pm.expect(response).to.have.property(\"csId\");\r",
											"        pm.expect(requestBody.batchId).to.eql(response.batchId);\r",
											"        pm.expect(requestBody.classNo).to.eql(response.classNo);\r",
											"        pm.expect(requestBody.classDate).to.eql(response.classDate);\r",
											"        pm.expect(requestBody.classTopic).to.eql(response.classTopic);\r",
											"        pm.expect(requestBody.classStaffId).to.eql(response.classStaffId);\r",
											"        pm.expect(requestBody.classDescription).to.eql(response.classDescription);\r",
											"        pm.expect(requestBody.classComments).to.eql(response.classComments);\r",
											"        pm.expect(requestBody.classNotes).to.eql(response.classNotes);\r",
											"        pm.expect(requestBody.classRecordingPath).to.eql(response.classRecordingPath);\r",
											"    \r",
											"\r",
											"    });\r",
											"\r",
											"    //GET ALL CLASS COUNT AFTER CLASS CREATION\r",
											"    pm.test(\"Check Total Class Count increased by 1\", function () {\r",
											"        \r",
											"        // Perform GET request classically\r",
											"        pm.sendRequest({\r",
											"            url: pm.environment.get(\"baseURL\")+'/allClasses',  \r",
											"            method: 'GET',\r",
											"            header: {\r",
											"               'Authorization': 'Bearer ' + pm.collectionVariables.get(\"BearerToken\") \r",
											"            }\r",
											"        }, function (err, res) {\r",
											"            if (err) {\r",
											"                console.log(err);\r",
											"                   // pm.expect(err).to.be.null; // Ensure there is no error\r",
											"                return;\r",
											"            } else {\r",
											"               \r",
											"                const classes = res.json(); \r",
											"                const count = classes.length; \r",
											"\r",
											"                   pm.expect(count).to.equal((pm.collectionVariables.get(\"ClassCount_BeforeAdd\"))+1); \r",
											"                \r",
											"            }\r",
											"        });\r",
											"    });\r",
											"\r",
											"}\r",
											"\r",
											"\r",
											"//SET VALUE AT RUN TIME (LATER CHECK IF THIS COULD BE TRANSFERRED AS CLASS OBJECT!!!!)\r",
											"pm.collectionVariables.set(\"classId\", response.classId)\r",
											"pm.collectionVariables.set(\"batchId\", response.batchId)\r",
											"pm.collectionVariables.set(\"classNo\", response.classNo)\r",
											"pm.collectionVariables.set(\"classDate\", response.classDate)\r",
											"pm.collectionVariables.set(\"classTopic\", response.classTopic)\r",
											"pm.collectionVariables.set(\"classStaffId\", response.classStaffId)\r",
											"pm.collectionVariables.set(\"classDescription\", response.classDescription)\r",
											"pm.collectionVariables.set(\"classComments\", response.classComments)\r",
											"pm.collectionVariables.set(\"classNotes\", response.classNotes)\r",
											"pm.collectionVariables.set(\"classRecordingPath\", response.classRecordingPath)\r",
											"\r",
											"\r",
											"//NEGATIVE TEST VALIDATION\r",
											"\r",
											"\r",
											"/**\r",
											" * status code = 400\r",
											"{   \r",
											"    \"message\": \"programName Must contain only letters and sometimes hyphens\",\r",
											"    \"success\": false\r",
											"}\r",
											" */"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "0d29c538-7b1c-4894-8a41-04fedafdc273",
										"exec": [
											"function getRandomLetterString() {\r",
											"    const letters = 'abcdefghijklmnopqrstuvwxyz'; // Available letters\r",
											"    let randomString = '';\r",
											"    \r",
											"    // Loop 3 times to generate a 3-letter string\r",
											"    for (let i = 0; i < 3; i++) {\r",
											"        const randomIndex = Math.floor(Math.random() * letters.length); // Get a random index\r",
											"        randomString += letters[randomIndex]; // Add the random letter to the string\r",
											"    }\r",
											"\r",
											"    return randomString;\r",
											"}\r",
											"\r",
											"var className = 'SeleniumPython-Ten'+ getRandomLetterString();\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "a117349c-c9f6-4a2e-9aa2-5a4c63f3424d",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{ \r\n\"batchId\": {{batchId}},\r\n\"classNo\": {{classNo}},\r\n\"classDate\": \"{{classDate}}\",\r\n\"classTopic\": \"{{classTopic}}\",\r\n\"classStatus\": \"{{classStatus}}\",\r\n\"classStaffId\": \"{{classStaffId}}\",\r\n\"classDescription\": \"{{classDescription}}\",\r\n\"classComments\": \"{{classComments}}\" ,\r\n\"classNotes\": \"{{classNotes}}\",\r\n\"classRecordingPath\": \"{{ }}\",\r\n\"classScheduledDates\": [\"{{classScheduledDates}}\"]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}/CreateClassSchedule"
							},
							"response": []
						},
						{
							"name": "Create New Class with blank Class Scheduled Dates",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fc70e53d-7e6a-4583-a90d-b4941e1c79f1",
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"//POSITIVE TEST VALIDATION\r",
											"if(pm.response.to.have.status(201)){ // HAPPY PATH\r",
											"\r",
											"    //1. Status\r",
											"    pm.test(\"Status code is 201\", function () {\r",
											"        pm.response.to.have.status(201);\r",
											"    });\r",
											"\r",
											"    //2. Status Line\r",
											"    pm.test(\"Status message is Created\", function () {\r",
											"        pm.response.to.have.status();\r",
											"    });\r",
											"\r",
											"    //3. Test for Content-Type header having a particular value\r",
											"    pm.test(\"Content-Type header is application/json\", () => {\r",
											"        pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
											"    });\r",
											"\r",
											"    //4. Schema Validation -- TO BE DONE\r",
											"    var jsonData=pm.response.json();\r",
											"    var schema =\r",
											" {\r",
											"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": \r",
											"  {\r",
											"    \"batchId\": \r",
											"    {\r",
											"      \"type\": \"integer\",\r",
											"      \"minimum\": 0\r",
											"    },\r",
											"    \"classNo\": \r",
											"    {\r",
											"      \"type\": \"integer\",\r",
											"       \"minimum\": 1\r",
											"    },\r",
											"    \"classDate\":\r",
											"    {\r",
											"      \"type\": \"string\",\r",
											"      \"format\": \"date-time\"\r",
											"    },\r",
											"    \"classTopic\":\r",
											"    {\r",
											"      \"type\": \"string\",\r",
											"    },\r",
											"    \"classStatus\": \r",
											"    {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"classStaffId\": \r",
											"    {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"classDescription\": \r",
											"    {\r",
											"      \"type\": \"string\",\r",
											"    },\r",
											"    \"classComments\": \r",
											"    {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"classNotes\": \r",
											"    {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"classRecordingPath\": \r",
											"    {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"classScheduledDates\": \r",
											"    {\r",
											"      \"type\": \"array\",\r",
											"       \"items\": \r",
											"       {\r",
											"        \"type\": \"string\",\r",
											"        \"format\": \"date-time\"\r",
											"       },\r",
											"      \"minItems\": 1\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"batchId\",\r",
											"    \"classNo\",\r",
											"    \"classDate\",\r",
											"    \"classTopic\",\r",
											"    \"classStatus\",\r",
											"    \"classStaffId\",\r",
											"    \"classDescription\",\r",
											"    \"classComments\",\r",
											"    \"classNotes\",\r",
											"    \"classRecordingPath\",\r",
											"    \"classScheduledDates\"\r",
											"  ]\r",
											" }\r",
											"\r",
											"    //5. Request VS Response Body Validation\r",
											"    pm.test(\"Class details in Request and Response matches\", function () {\r",
											"\r",
											"        // Get the raw request body and Parse it to JSON\r",
											"        const rawRequestBody = pm.request.body.raw;\r",
											"        const requestBody = JSON.parse(rawRequestBody);\r",
											"\r",
											"       // pm.expect(response).to.include(\"classId\");\r",
											"        pm.expect(response).to.have.property(\"csId\");\r",
											"        pm.expect(requestBody.batchId).to.eql(response.batchId);\r",
											"        pm.expect(requestBody.classNo).to.eql(response.classNo);\r",
											"        pm.expect(requestBody.classDate).to.eql(response.classDate);\r",
											"        pm.expect(requestBody.classTopic).to.eql(response.classTopic);\r",
											"        pm.expect(requestBody.classStaffId).to.eql(response.classStaffId);\r",
											"        pm.expect(requestBody.classDescription).to.eql(response.classDescription);\r",
											"        pm.expect(requestBody.classComments).to.eql(response.classComments);\r",
											"        pm.expect(requestBody.classNotes).to.eql(response.classNotes);\r",
											"        pm.expect(requestBody.classRecordingPath).to.eql(response.classRecordingPath);\r",
											"    \r",
											"\r",
											"    });\r",
											"\r",
											"    //GET ALL CLASS COUNT AFTER CLASS CREATION\r",
											"    pm.test(\"Check Total Class Count increased by 1\", function () {\r",
											"        \r",
											"        // Perform GET request classically\r",
											"        pm.sendRequest({\r",
											"            url: pm.environment.get(\"baseURL\")+'/allClasses',  \r",
											"            method: 'GET',\r",
											"            header: {\r",
											"               'Authorization': 'Bearer ' + pm.collectionVariables.get(\"BearerToken\") \r",
											"            }\r",
											"        }, function (err, res) {\r",
											"            if (err) {\r",
											"                console.log(err);\r",
											"                   // pm.expect(err).to.be.null; // Ensure there is no error\r",
											"                return;\r",
											"            } else {\r",
											"               \r",
											"                const classes = res.json(); \r",
											"                const count = classes.length; \r",
											"\r",
											"                   pm.expect(count).to.equal((pm.collectionVariables.get(\"ClassCount_BeforeAdd\"))+1); \r",
											"                \r",
											"            }\r",
											"        });\r",
											"    });\r",
											"\r",
											"}\r",
											"\r",
											"\r",
											"//SET VALUE AT RUN TIME (LATER CHECK IF THIS COULD BE TRANSFERRED AS CLASS OBJECT!!!!)\r",
											"pm.collectionVariables.set(\"classId\", response.classId)\r",
											"pm.collectionVariables.set(\"batchId\", response.batchId)\r",
											"pm.collectionVariables.set(\"classNo\", response.classNo)\r",
											"pm.collectionVariables.set(\"classDate\", response.classDate)\r",
											"pm.collectionVariables.set(\"classTopic\", response.classTopic)\r",
											"pm.collectionVariables.set(\"classStaffId\", response.classStaffId)\r",
											"pm.collectionVariables.set(\"classDescription\", response.classDescription)\r",
											"pm.collectionVariables.set(\"classComments\", response.classComments)\r",
											"pm.collectionVariables.set(\"classNotes\", response.classNotes)\r",
											"pm.collectionVariables.set(\"classRecordingPath\", response.classRecordingPath)\r",
											"\r",
											"\r",
											"//NEGATIVE TEST VALIDATION\r",
											"\r",
											"\r",
											"/**\r",
											" * status code = 400\r",
											"{   \r",
											"    \"message\": \"programName Must contain only letters and sometimes hyphens\",\r",
											"    \"success\": false\r",
											"}\r",
											" */"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "0d29c538-7b1c-4894-8a41-04fedafdc273",
										"exec": [
											"function getRandomLetterString() {\r",
											"    const letters = 'abcdefghijklmnopqrstuvwxyz'; // Available letters\r",
											"    let randomString = '';\r",
											"    \r",
											"    // Loop 3 times to generate a 3-letter string\r",
											"    for (let i = 0; i < 3; i++) {\r",
											"        const randomIndex = Math.floor(Math.random() * letters.length); // Get a random index\r",
											"        randomString += letters[randomIndex]; // Add the random letter to the string\r",
											"    }\r",
											"\r",
											"    return randomString;\r",
											"}\r",
											"\r",
											"var className = 'SeleniumPython-Ten'+ getRandomLetterString();\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "2162a0e4-4299-408c-8103-02881189a3c8",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{ \r\n\"batchId\": {{batchId}},\r\n\"classNo\": {{classNo}},\r\n\"classDate\": \"{{classDate}}\",\r\n\"classTopic\": \"{{classTopic}}\",\r\n\"classStatus\": \"{{classStatus}}\",\r\n\"classStaffId\": \"{{classStaffId}}\",\r\n\"classDescription\": \"{{classDescription}}\",\r\n\"classComments\": \"{{classComments}}\" ,\r\n\"classNotes\": \"{{classNotes}}\",\r\n\"classRecordingPath\": \"{{classRecordingPath}}\",\r\n\"classScheduledDates\": [\"{{ }}\"]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}/CreateClassSchedule"
							},
							"response": []
						},
						{
							"name": "Get All Class List",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c8131416-8a75-4753-be8b-d67b5ce3eceb",
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"//POSITIVE TEST VALIDATION\r",
											"//1. Status\r",
											"pm.test(\"Status code is 200\", function () \r",
											"{\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"//2. Status Line\r",
											"pm.test(\"Status message is OK\", function ()\r",
											"{\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"//3. Test for Content-Type header having a particular value\r",
											"pm.test(\"Content-Type header is application/json\", () => \r",
											"{\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
											"});\r",
											"\r",
											"//4. Schema Validation -- TO BE DONE\r",
											" var jsonData=pm.response.json();\r",
											"    var schema =\r",
											"{\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": \r",
											"  {\r",
											"    \"batchId\": \r",
											"    {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"classComments\": \r",
											"    {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"classDate\": \r",
											"    {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"classDescription\":\r",
											"    {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"classNo\": \r",
											"    {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"classNotes\": \r",
											"    {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"classRecordingPath\": \r",
											"    {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"classStaffId\": \r",
											"    {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"classTopic\": \r",
											"    {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"csId\": \r",
											"    {\r",
											"      \"type\": \"integer\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"batchId\",\r",
											"    \"classComments\",\r",
											"    \"classDate\",\r",
											"    \"classDescription\",\r",
											"    \"classNo\",\r",
											"    \"classNotes\",\r",
											"    \"classRecordingPath\",\r",
											"    \"classStaffId\",\r",
											"    \"classTopic\",\r",
											"    \"csId\"\r",
											"  ]\r",
											"}\r",
											"//SET TOTAL COUNT\r",
											"console.log(response.length)\r",
											"pm.collectionVariables.set(\"ClassCount_BeforeAdd\",response.length)"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "85ec0bf6-d97c-4b51-acb1-b2495c191a9e",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{baseURL}}/allClasses"
							},
							"response": []
						},
						{
							"name": "Negative - Get All Class List",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c8131416-8a75-4753-be8b-d67b5ce3eceb",
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"//POSITIVE TEST VALIDATION\r",
											"//1. Status\r",
											"pm.test(\"Status code is 200\", function () \r",
											"{\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"//2. Status Line\r",
											"pm.test(\"Status message is OK\", function ()\r",
											"{\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"//3. Test for Content-Type header having a particular value\r",
											"pm.test(\"Content-Type header is application/json\", () => \r",
											"{\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
											"});\r",
											"\r",
											"//4. Schema Validation -- TO BE DONE\r",
											" var jsonData=pm.response.json();\r",
											"    var schema =\r",
											"{\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": \r",
											"  {\r",
											"    \"batchId\": \r",
											"    {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"classComments\": \r",
											"    {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"classDate\": \r",
											"    {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"classDescription\":\r",
											"    {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"classNo\": \r",
											"    {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"classNotes\": \r",
											"    {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"classRecordingPath\": \r",
											"    {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"classStaffId\": \r",
											"    {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"classTopic\": \r",
											"    {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"csId\": \r",
											"    {\r",
											"      \"type\": \"integer\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"batchId\",\r",
											"    \"classComments\",\r",
											"    \"classDate\",\r",
											"    \"classDescription\",\r",
											"    \"classNo\",\r",
											"    \"classNotes\",\r",
											"    \"classRecordingPath\",\r",
											"    \"classStaffId\",\r",
											"    \"classTopic\",\r",
											"    \"csId\"\r",
											"  ]\r",
											"}\r",
											"//SET TOTAL COUNT\r",
											"console.log(response.length)\r",
											"pm.collectionVariables.set(\"ClassCount_BeforeAdd\",response.length)"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "4e759b9d-0e1e-4027-9923-6a59b546beb3",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{baseURL}}/allClasses"
							},
							"response": []
						},
						{
							"name": "Get All Class List with No Auth",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a341bc4d-0825-4536-a359-39c0b8e5695e",
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"//POSITIVE TEST VALIDATION\r",
											"//1. Status\r",
											"pm.test(\"Status code is 200\", function () \r",
											"{\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"//2. Status Line\r",
											"pm.test(\"Status message is OK\", function ()\r",
											"{\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"//3. Test for Content-Type header having a particular value\r",
											"pm.test(\"Content-Type header is application/json\", () => \r",
											"{\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
											"});\r",
											"\r",
											"//4. Schema Validation -- TO BE DONE\r",
											" var jsonData=pm.response.json();\r",
											"    var schema =\r",
											"{\r",
											" \"$schema\": \"http://json-schema.org/draft-07/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": \r",
											"  {\r",
											"    \"batchId\": \r",
											"    {\r",
											"      \"type\": \"integer\",\r",
											"      \"minimum\": 0\r",
											"    },\r",
											"    \"classNo\": \r",
											"    {\r",
											"      \"type\": \"integer\",\r",
											"       \"minimum\": 1\r",
											"    },\r",
											"    \"classDate\":\r",
											"    {\r",
											"      \"type\": \"string\",\r",
											"      \"format\": \"date-time\"\r",
											"    },\r",
											"    \"classTopic\":\r",
											"    {\r",
											"      \"type\": \"string\",\r",
											"    },\r",
											"    \"classStatus\": \r",
											"    {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"classStaffId\": \r",
											"    {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"classDescription\": \r",
											"    {\r",
											"      \"type\": \"string\",\r",
											"    },\r",
											"    \"classComments\": \r",
											"    {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"classNotes\": \r",
											"    {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"classRecordingPath\": \r",
											"    {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"classScheduledDates\": \r",
											"    {\r",
											"      \"type\": \"array\",\r",
											"       \"items\": \r",
											"       {\r",
											"        \"type\": \"string\",\r",
											"        \"format\": \"date-time\"\r",
											"       },\r",
											"      \"minItems\": 1\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"batchId\",\r",
											"    \"classNo\",\r",
											"    \"classDate\",\r",
											"    \"classTopic\",\r",
											"    \"classStatus\",\r",
											"    \"classStaffId\",\r",
											"    \"classDescription\",\r",
											"    \"classComments\",\r",
											"    \"classNotes\",\r",
											"    \"classRecordingPath\",\r",
											"    \"classScheduledDates\"\r",
											"  ]\r",
											"}\r",
											"//SET TOTAL COUNT\r",
											"console.log(response.length)\r",
											"pm.collectionVariables.set(\"ClassCount_BeforeAdd\",response.length)"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "5571ac69-4a30-492f-b6b9-7404d6e5f6ff",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": "{{baseURL}}/allClasses"
							},
							"response": []
						},
						{
							"name": "Get All Class List with invalid end points",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "989646da-763a-4cf0-969a-d31c36b5d495",
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"//POSITIVE TEST VALIDATION\r",
											"//1. Status\r",
											"pm.test(\"Status code is 200\", function () \r",
											"{\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"//2. Status Line\r",
											"pm.test(\"Status message is OK\", function ()\r",
											"{\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"//3. Test for Content-Type header having a particular value\r",
											"pm.test(\"Content-Type header is application/json\", () => \r",
											"{\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
											"});\r",
											"\r",
											"//4. Schema Validation -- TO BE DONE\r",
											" var jsonData=pm.response.json();\r",
											"    var schema =\r",
											"{\r",
											" \"$schema\": \"http://json-schema.org/draft-07/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": \r",
											"  {\r",
											"    \"batchId\": \r",
											"    {\r",
											"      \"type\": \"integer\",\r",
											"      \"minimum\": 0\r",
											"    },\r",
											"    \"classNo\": \r",
											"    {\r",
											"      \"type\": \"integer\",\r",
											"       \"minimum\": 1\r",
											"    },\r",
											"    \"classDate\":\r",
											"    {\r",
											"      \"type\": \"string\",\r",
											"      \"format\": \"date-time\"\r",
											"    },\r",
											"    \"classTopic\":\r",
											"    {\r",
											"      \"type\": \"string\",\r",
											"    },\r",
											"    \"classStatus\": \r",
											"    {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"classStaffId\": \r",
											"    {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"classDescription\": \r",
											"    {\r",
											"      \"type\": \"string\",\r",
											"    },\r",
											"    \"classComments\": \r",
											"    {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"classNotes\": \r",
											"    {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"classRecordingPath\": \r",
											"    {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"classScheduledDates\": \r",
											"    {\r",
											"      \"type\": \"array\",\r",
											"       \"items\": \r",
											"       {\r",
											"        \"type\": \"string\",\r",
											"        \"format\": \"date-time\"\r",
											"       },\r",
											"      \"minItems\": 1\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"batchId\",\r",
											"    \"classNo\",\r",
											"    \"classDate\",\r",
											"    \"classTopic\",\r",
											"    \"classStatus\",\r",
											"    \"classStaffId\",\r",
											"    \"classDescription\",\r",
											"    \"classComments\",\r",
											"    \"classNotes\",\r",
											"    \"classRecordingPath\",\r",
											"    \"classScheduledDates\"\r",
											"  ]\r",
											"}\r",
											"//SET TOTAL COUNT\r",
											"console.log(response.length)\r",
											"pm.collectionVariables.set(\"ClassCount_BeforeAdd\",response.length)"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "881763b5-ef9e-49c1-9a3e-8e32b8cf8cde",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{baseURL}}/allClass"
							},
							"response": []
						},
						{
							"name": "Upcoming Classes for particular Student",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "162e9c59-bf49-4cfb-b4e5-d569eed50eda",
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"//POSITIVE TEST VALIDATION\r",
											"//1. Status\r",
											"pm.test(\"Status code is 200\", function () \r",
											"{\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"//2. Status Line\r",
											"pm.test(\"Status message is OK\", function ()\r",
											"{\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"//3. Test for Content-Type header having a particular value\r",
											"pm.test(\"Content-Type header is application/json\", () => \r",
											"{\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
											"});\r",
											"\r",
											"//4. Schema Validation -- TO BE DONE\r",
											" var jsonData=pm.response.json();\r",
											"    var schema =\r",
											"{\r",
											" \"$schema\": \"http://json-schema.org/draft-07/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": \r",
											"  {\r",
											"    \"batchId\": \r",
											"    {\r",
											"      \"type\": \"integer\",\r",
											"      \"minimum\": 0\r",
											"    },\r",
											"    \"classNo\": \r",
											"    {\r",
											"      \"type\": \"integer\",\r",
											"       \"minimum\": 1\r",
											"    },\r",
											"    \"classDate\":\r",
											"    {\r",
											"      \"type\": \"string\",\r",
											"      \"format\": \"date-time\"\r",
											"    },\r",
											"    \"classTopic\":\r",
											"    {\r",
											"      \"type\": \"string\",\r",
											"    },\r",
											"    \"classStatus\": \r",
											"    {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"classStaffId\": \r",
											"    {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"classDescription\": \r",
											"    {\r",
											"      \"type\": \"string\",\r",
											"    },\r",
											"    \"classComments\": \r",
											"    {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"classNotes\": \r",
											"    {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"classRecordingPath\": \r",
											"    {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"classScheduledDates\": \r",
											"    {\r",
											"      \"type\": \"array\",\r",
											"       \"items\": \r",
											"       {\r",
											"        \"type\": \"string\",\r",
											"        \"format\": \"date-time\"\r",
											"       },\r",
											"      \"minItems\": 1\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"batchId\",\r",
											"    \"classNo\",\r",
											"    \"classDate\",\r",
											"    \"classTopic\",\r",
											"    \"classStatus\",\r",
											"    \"classStaffId\",\r",
											"    \"classDescription\",\r",
											"    \"classComments\",\r",
											"    \"classNotes\",\r",
											"    \"classRecordingPath\",\r",
											"    \"classScheduledDates\"\r",
											"  ]\r",
											"}\r",
											"//SET TOTAL COUNT\r",
											"console.log(response.length)\r",
											"pm.collectionVariables.set(\"ClassCount_BeforeAdd\",response.length)"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "d805545e-6e87-40b6-a216-1cc1a7e242bd",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{baseURL}}/upcomingClasses/297"
							},
							"response": []
						},
						{
							"name": "Upcoming Classes for particular Student with No Auth",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "162e9c59-bf49-4cfb-b4e5-d569eed50eda",
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"//POSITIVE TEST VALIDATION\r",
											"//1. Status\r",
											"pm.test(\"Status code is 200\", function () \r",
											"{\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"//2. Status Line\r",
											"pm.test(\"Status message is OK\", function ()\r",
											"{\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"//3. Test for Content-Type header having a particular value\r",
											"pm.test(\"Content-Type header is application/json\", () => \r",
											"{\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
											"});\r",
											"\r",
											"//4. Schema Validation -- TO BE DONE\r",
											" var jsonData=pm.response.json();\r",
											"    var schema =\r",
											"{\r",
											" \"$schema\": \"http://json-schema.org/draft-07/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": \r",
											"  {\r",
											"    \"batchId\": \r",
											"    {\r",
											"      \"type\": \"integer\",\r",
											"      \"minimum\": 0\r",
											"    },\r",
											"    \"classNo\": \r",
											"    {\r",
											"      \"type\": \"integer\",\r",
											"       \"minimum\": 1\r",
											"    },\r",
											"    \"classDate\":\r",
											"    {\r",
											"      \"type\": \"string\",\r",
											"      \"format\": \"date-time\"\r",
											"    },\r",
											"    \"classTopic\":\r",
											"    {\r",
											"      \"type\": \"string\",\r",
											"    },\r",
											"    \"classStatus\": \r",
											"    {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"classStaffId\": \r",
											"    {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"classDescription\": \r",
											"    {\r",
											"      \"type\": \"string\",\r",
											"    },\r",
											"    \"classComments\": \r",
											"    {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"classNotes\": \r",
											"    {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"classRecordingPath\": \r",
											"    {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"classScheduledDates\": \r",
											"    {\r",
											"      \"type\": \"array\",\r",
											"       \"items\": \r",
											"       {\r",
											"        \"type\": \"string\",\r",
											"        \"format\": \"date-time\"\r",
											"       },\r",
											"      \"minItems\": 1\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"batchId\",\r",
											"    \"classNo\",\r",
											"    \"classDate\",\r",
											"    \"classTopic\",\r",
											"    \"classStatus\",\r",
											"    \"classStaffId\",\r",
											"    \"classDescription\",\r",
											"    \"classComments\",\r",
											"    \"classNotes\",\r",
											"    \"classRecordingPath\",\r",
											"    \"classScheduledDates\"\r",
											"  ]\r",
											"}\r",
											"//SET TOTAL COUNT\r",
											"console.log(response.length)\r",
											"pm.collectionVariables.set(\"ClassCount_BeforeAdd\",response.length)"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "41363a63-0d67-4507-ae8d-8b4fd14e4bd3",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": "{{baseURL}}/upcomingClasses/48"
							},
							"response": []
						},
						{
							"name": "Upcoming Classes for particular Student with Invalid end points",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "162e9c59-bf49-4cfb-b4e5-d569eed50eda",
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"//POSITIVE TEST VALIDATION\r",
											"//1. Status\r",
											"pm.test(\"Status code is 200\", function () \r",
											"{\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"//2. Status Line\r",
											"pm.test(\"Status message is OK\", function ()\r",
											"{\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"//3. Test for Content-Type header having a particular value\r",
											"pm.test(\"Content-Type header is application/json\", () => \r",
											"{\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
											"});\r",
											"\r",
											"//4. Schema Validation -- TO BE DONE\r",
											" var jsonData=pm.response.json();\r",
											"    var schema =\r",
											"{\r",
											" \"$schema\": \"http://json-schema.org/draft-07/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": \r",
											"  {\r",
											"    \"batchId\": \r",
											"    {\r",
											"      \"type\": \"integer\",\r",
											"      \"minimum\": 0\r",
											"    },\r",
											"    \"classNo\": \r",
											"    {\r",
											"      \"type\": \"integer\",\r",
											"       \"minimum\": 1\r",
											"    },\r",
											"    \"classDate\":\r",
											"    {\r",
											"      \"type\": \"string\",\r",
											"      \"format\": \"date-time\"\r",
											"    },\r",
											"    \"classTopic\":\r",
											"    {\r",
											"      \"type\": \"string\",\r",
											"    },\r",
											"    \"classStatus\": \r",
											"    {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"classStaffId\": \r",
											"    {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"classDescription\": \r",
											"    {\r",
											"      \"type\": \"string\",\r",
											"    },\r",
											"    \"classComments\": \r",
											"    {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"classNotes\": \r",
											"    {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"classRecordingPath\": \r",
											"    {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"classScheduledDates\": \r",
											"    {\r",
											"      \"type\": \"array\",\r",
											"       \"items\": \r",
											"       {\r",
											"        \"type\": \"string\",\r",
											"        \"format\": \"date-time\"\r",
											"       },\r",
											"      \"minItems\": 1\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"batchId\",\r",
											"    \"classNo\",\r",
											"    \"classDate\",\r",
											"    \"classTopic\",\r",
											"    \"classStatus\",\r",
											"    \"classStaffId\",\r",
											"    \"classDescription\",\r",
											"    \"classComments\",\r",
											"    \"classNotes\",\r",
											"    \"classRecordingPath\",\r",
											"    \"classScheduledDates\"\r",
											"  ]\r",
											"}\r",
											"//SET TOTAL COUNT\r",
											"console.log(response.length)\r",
											"pm.collectionVariables.set(\"ClassCount_BeforeAdd\",response.length)"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "b391ce48-97fa-4d76-8cab-3b2b9cedf118",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{baseURL}}/upcomingClass/48"
							},
							"response": []
						},
						{
							"name": "Upcoming Classes for particular Student with special character student Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "162e9c59-bf49-4cfb-b4e5-d569eed50eda",
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"//POSITIVE TEST VALIDATION\r",
											"//1. Status\r",
											"pm.test(\"Status code is 200\", function () \r",
											"{\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"//2. Status Line\r",
											"pm.test(\"Status message is OK\", function ()\r",
											"{\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"//3. Test for Content-Type header having a particular value\r",
											"pm.test(\"Content-Type header is application/json\", () => \r",
											"{\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
											"});\r",
											"\r",
											"//4. Schema Validation -- TO BE DONE\r",
											" var jsonData=pm.response.json();\r",
											"    var schema =\r",
											"{\r",
											" \"$schema\": \"http://json-schema.org/draft-07/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": \r",
											"  {\r",
											"    \"batchId\": \r",
											"    {\r",
											"      \"type\": \"integer\",\r",
											"      \"minimum\": 0\r",
											"    },\r",
											"    \"classNo\": \r",
											"    {\r",
											"      \"type\": \"integer\",\r",
											"       \"minimum\": 1\r",
											"    },\r",
											"    \"classDate\":\r",
											"    {\r",
											"      \"type\": \"string\",\r",
											"      \"format\": \"date-time\"\r",
											"    },\r",
											"    \"classTopic\":\r",
											"    {\r",
											"      \"type\": \"string\",\r",
											"    },\r",
											"    \"classStatus\": \r",
											"    {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"classStaffId\": \r",
											"    {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"classDescription\": \r",
											"    {\r",
											"      \"type\": \"string\",\r",
											"    },\r",
											"    \"classComments\": \r",
											"    {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"classNotes\": \r",
											"    {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"classRecordingPath\": \r",
											"    {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"classScheduledDates\": \r",
											"    {\r",
											"      \"type\": \"array\",\r",
											"       \"items\": \r",
											"       {\r",
											"        \"type\": \"string\",\r",
											"        \"format\": \"date-time\"\r",
											"       },\r",
											"      \"minItems\": 1\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"batchId\",\r",
											"    \"classNo\",\r",
											"    \"classDate\",\r",
											"    \"classTopic\",\r",
											"    \"classStatus\",\r",
											"    \"classStaffId\",\r",
											"    \"classDescription\",\r",
											"    \"classComments\",\r",
											"    \"classNotes\",\r",
											"    \"classRecordingPath\",\r",
											"    \"classScheduledDates\"\r",
											"  ]\r",
											"}\r",
											"//SET TOTAL COUNT\r",
											"console.log(response.length)\r",
											"pm.collectionVariables.set(\"ClassCount_BeforeAdd\",response.length)"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "6a9d042e-28ec-4c76-9590-1229e1367736",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{baseURL}}/upcomingClasses/@f"
							},
							"response": []
						},
						{
							"name": "Upcoming Classes for particular Student with letters student Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "162e9c59-bf49-4cfb-b4e5-d569eed50eda",
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"//POSITIVE TEST VALIDATION\r",
											"//1. Status\r",
											"pm.test(\"Status code is 200\", function () \r",
											"{\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"//2. Status Line\r",
											"pm.test(\"Status message is OK\", function ()\r",
											"{\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"//3. Test for Content-Type header having a particular value\r",
											"pm.test(\"Content-Type header is application/json\", () => \r",
											"{\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
											"});\r",
											"\r",
											"//4. Schema Validation -- TO BE DONE\r",
											" var jsonData=pm.response.json();\r",
											"    var schema =\r",
											"{\r",
											" \"$schema\": \"http://json-schema.org/draft-07/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": \r",
											"  {\r",
											"    \"batchId\": \r",
											"    {\r",
											"      \"type\": \"integer\",\r",
											"      \"minimum\": 0\r",
											"    },\r",
											"    \"classNo\": \r",
											"    {\r",
											"      \"type\": \"integer\",\r",
											"       \"minimum\": 1\r",
											"    },\r",
											"    \"classDate\":\r",
											"    {\r",
											"      \"type\": \"string\",\r",
											"      \"format\": \"date-time\"\r",
											"    },\r",
											"    \"classTopic\":\r",
											"    {\r",
											"      \"type\": \"string\",\r",
											"    },\r",
											"    \"classStatus\": \r",
											"    {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"classStaffId\": \r",
											"    {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"classDescription\": \r",
											"    {\r",
											"      \"type\": \"string\",\r",
											"    },\r",
											"    \"classComments\": \r",
											"    {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"classNotes\": \r",
											"    {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"classRecordingPath\": \r",
											"    {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"classScheduledDates\": \r",
											"    {\r",
											"      \"type\": \"array\",\r",
											"       \"items\": \r",
											"       {\r",
											"        \"type\": \"string\",\r",
											"        \"format\": \"date-time\"\r",
											"       },\r",
											"      \"minItems\": 1\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"batchId\",\r",
											"    \"classNo\",\r",
											"    \"classDate\",\r",
											"    \"classTopic\",\r",
											"    \"classStatus\",\r",
											"    \"classStaffId\",\r",
											"    \"classDescription\",\r",
											"    \"classComments\",\r",
											"    \"classNotes\",\r",
											"    \"classRecordingPath\",\r",
											"    \"classScheduledDates\"\r",
											"  ]\r",
											"}\r",
											"//SET TOTAL COUNT\r",
											"console.log(response.length)\r",
											"pm.collectionVariables.set(\"ClassCount_BeforeAdd\",response.length)"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "71df4a50-e8d0-4b00-bffa-955e5a7be18d",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{baseURL}}/upcomingClasses/RY"
							},
							"response": []
						},
						{
							"name": "Upcoming Classes for particular Student with letters numbers and special character student Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "162e9c59-bf49-4cfb-b4e5-d569eed50eda",
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"//POSITIVE TEST VALIDATION\r",
											"//1. Status\r",
											"pm.test(\"Status code is 200\", function () \r",
											"{\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"//2. Status Line\r",
											"pm.test(\"Status message is OK\", function ()\r",
											"{\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"//3. Test for Content-Type header having a particular value\r",
											"pm.test(\"Content-Type header is application/json\", () => \r",
											"{\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
											"});\r",
											"\r",
											"//4. Schema Validation -- TO BE DONE\r",
											" var jsonData=pm.response.json();\r",
											"    var schema =\r",
											"{\r",
											" \"$schema\": \"http://json-schema.org/draft-07/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": \r",
											"  {\r",
											"    \"batchId\": \r",
											"    {\r",
											"      \"type\": \"integer\",\r",
											"      \"minimum\": 0\r",
											"    },\r",
											"    \"classNo\": \r",
											"    {\r",
											"      \"type\": \"integer\",\r",
											"       \"minimum\": 1\r",
											"    },\r",
											"    \"classDate\":\r",
											"    {\r",
											"      \"type\": \"string\",\r",
											"      \"format\": \"date-time\"\r",
											"    },\r",
											"    \"classTopic\":\r",
											"    {\r",
											"      \"type\": \"string\",\r",
											"    },\r",
											"    \"classStatus\": \r",
											"    {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"classStaffId\": \r",
											"    {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"classDescription\": \r",
											"    {\r",
											"      \"type\": \"string\",\r",
											"    },\r",
											"    \"classComments\": \r",
											"    {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"classNotes\": \r",
											"    {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"classRecordingPath\": \r",
											"    {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"classScheduledDates\": \r",
											"    {\r",
											"      \"type\": \"array\",\r",
											"       \"items\": \r",
											"       {\r",
											"        \"type\": \"string\",\r",
											"        \"format\": \"date-time\"\r",
											"       },\r",
											"      \"minItems\": 1\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"batchId\",\r",
											"    \"classNo\",\r",
											"    \"classDate\",\r",
											"    \"classTopic\",\r",
											"    \"classStatus\",\r",
											"    \"classStaffId\",\r",
											"    \"classDescription\",\r",
											"    \"classComments\",\r",
											"    \"classNotes\",\r",
											"    \"classRecordingPath\",\r",
											"    \"classScheduledDates\"\r",
											"  ]\r",
											"}\r",
											"//SET TOTAL COUNT\r",
											"console.log(response.length)\r",
											"pm.collectionVariables.set(\"ClassCount_BeforeAdd\",response.length)"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "ac2de80d-cc8e-46bf-b861-c9b3861b0d28",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{baseURL}}/upcomingClasses/@f3"
							},
							"response": []
						},
						{
							"name": "Update New Class",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d350511c-fc91-4538-99ee-cb45faff617e",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "c4af010b-cbbd-4b0d-9a3b-43fdd21db10e",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{ \r\n\"csId\": {{csId}},\r\n\"batchId\": {{batchId}},\r\n\"classNo\": {{updateclassNo}},\r\n\"classDate\": \"{{updateclassDate}}\",\r\n\"classTopic\": \"{{updateclassTopic}}\",\r\n\"classStatus\": \"{{updateclassStatus}}\",\r\n\"classStaffId\": \"{{classStaffId}}\",\r\n\"classDescription\": \"{{updateclassDescription}}\",\r\n\"classComments\": \"{{updateclassComments}}\" ,\r\n\"classNotes\": \"{{updateclassNotes}}\",\r\n\"classRecordingPath\": \"{{updateclassRecordingPath}}\",\r\n\"classScheduledDates\": [\"{{updateclassScheduledDates}}\"]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}/updateClass/{{classId}}"
							},
							"response": []
						},
						{
							"name": "Update New Class with No Auth",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d350511c-fc91-4538-99ee-cb45faff617e",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "a9f067af-f4ce-4efd-9e20-1efad27fb2c1",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{ \r\n\"csId\": {{csId}},\r\n\"batchId\": {{batchId}},\r\n\"classNo\": {{updateclassNo}},\r\n\"classDate\": \"{{updateclassDate}}\",\r\n\"classTopic\": \"{{updateclassTopic}}\",\r\n\"classStatus\": \"{{updateclassStatus}}\",\r\n\"classStaffId\": \"{{classStaffId}}\",\r\n\"classDescription\": \"{{updateclassDescription}}\",\r\n\"classComments\": \"{{updateclassComments}}\" ,\r\n\"classNotes\": \"{{updateclassNotes}}\",\r\n\"classRecordingPath\": \"{{updateclassRecordingPath}}\",\r\n\"classScheduledDates\": [\"{{updateclassScheduledDates}}\"]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}/updateClass/62"
							},
							"response": []
						},
						{
							"name": "Update New Class with No Class Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d350511c-fc91-4538-99ee-cb45faff617e",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "89f79c1a-0aff-46fe-97a9-be75dd012b3f",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{ \r\n\"csId\": {{ }},\r\n\"batchId\": {{batchId}},\r\n\"classNo\": {{updateclassNo}},\r\n\"classDate\": \"{{updateclassDate}}\",\r\n\"classTopic\": \"{{updateclassTopic}}\",\r\n\"classStatus\": \"{{updateclassStatus}}\",\r\n\"classStaffId\": \"{{classStaffId}}\",\r\n\"classDescription\": \"{{updateclassDescription}}\",\r\n\"classComments\": \"{{updateclassComments}}\" ,\r\n\"classNotes\": \"{{updateclassNotes}}\",\r\n\"classRecordingPath\": \"{{updateclassRecordingPath}}\",\r\n\"classScheduledDates\": [\"{{updateclassScheduledDates}}\"]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}/updateClass/{{classId}}"
							},
							"response": []
						},
						{
							"name": "Update New Class with blank Batch Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d350511c-fc91-4538-99ee-cb45faff617e",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "08c5191e-72dd-458f-8043-3365bfbcf81e",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{ \r\n\"csId\": {{csId}},\r\n\"batchId\": {{ }},\r\n\"classNo\": {{updateclassNo}},\r\n\"classDate\": \"{{updateclassDate}}\",\r\n\"classTopic\": \"{{updateclassTopic}}\",\r\n\"classStatus\": \"{{updateclassStatus}}\",\r\n\"classStaffId\": \"{{classStaffId}}\",\r\n\"classDescription\": \"{{updateclassDescription}}\",\r\n\"classComments\": \"{{updateclassComments}}\" ,\r\n\"classNotes\": \"{{updateclassNotes}}\",\r\n\"classRecordingPath\": \"{{updateclassRecordingPath}}\",\r\n\"classScheduledDates\": [\"{{updateclassScheduledDates}}\"]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}/updateClass/62"
							},
							"response": []
						},
						{
							"name": "Update New Class with blank Class No",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d350511c-fc91-4538-99ee-cb45faff617e",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "ff94fc39-9677-4c79-b0d8-3bb189901697",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{ \r\n\"csId\": {{csId}},\r\n\"batchId\": {{batchId}},\r\n\"classNo\": {{ }},\r\n\"classDate\": \"{{updateclassDate}}\",\r\n\"classTopic\": \"{{updateclassTopic}}\",\r\n\"classStatus\": \"{{updateclassStatus}}\",\r\n\"classStaffId\": \"{{classStaffId}}\",\r\n\"classDescription\": \"{{updateclassDescription}}\",\r\n\"classComments\": \"{{updateclassComments}}\" ,\r\n\"classNotes\": \"{{updateclassNotes}}\",\r\n\"classRecordingPath\": \"{{updateclassRecordingPath}}\",\r\n\"classScheduledDates\": [\"{{updateclassScheduledDates}}\"]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}/updateClass/62"
							},
							"response": []
						},
						{
							"name": "Update New Class with blank Class Date",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d350511c-fc91-4538-99ee-cb45faff617e",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "77262c99-c5d8-4e8b-a888-672c6669eb67",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{ \r\n\"csId\": {{csId}},\r\n\"batchId\": {{batchId}},\r\n\"classNo\": {{updateclassNo}},\r\n\"classDate\": \"{{ }}\",\r\n\"classTopic\": \"{{updateclassTopic}}\",\r\n\"classStatus\": \"{{updateclassStatus}}\",\r\n\"classStaffId\": \"{{classStaffId}}\",\r\n\"classDescription\": \"{{updateclassDescription}}\",\r\n\"classComments\": \"{{updateclassComments}}\" ,\r\n\"classNotes\": \"{{updateclassNotes}}\",\r\n\"classRecordingPath\": \"{{updateclassRecordingPath}}\",\r\n\"classScheduledDates\": [\"{{updateclassScheduledDates}}\"]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}/updateClass/62"
							},
							"response": []
						},
						{
							"name": "Update New Class with blank Class Topic",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d350511c-fc91-4538-99ee-cb45faff617e",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "27a2bb09-548f-479c-9bc7-28716ff860cd",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{ \r\n\"csId\": {{csId}},\r\n\"batchId\": {{batchId}},\r\n\"classNo\": {{updateclassNo}},\r\n\"classDate\": \"{{updateclassDate}}\",\r\n\"classTopic\": \"{{ }}\",\r\n\"classStatus\": \"{{updateclassStatus}}\",\r\n\"classStaffId\": \"{{classStaffId}}\",\r\n\"classDescription\": \"{{updateclassDescription}}\",\r\n\"classComments\": \"{{updateclassComments}}\" ,\r\n\"classNotes\": \"{{updateclassNotes}}\",\r\n\"classRecordingPath\": \"{{updateclassRecordingPath}}\",\r\n\"classScheduledDates\": [\"{{updateclassScheduledDates}}\"]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}/updateClass/{{classId}}"
							},
							"response": []
						},
						{
							"name": "Update New Class with blank Class Status",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d350511c-fc91-4538-99ee-cb45faff617e",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "eae29328-a86c-4311-843a-609684918119",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{ \r\n\"csId\": {{csId}},\r\n\"batchId\": {{batchId}},\r\n\"classNo\": {{updateclassNo}},\r\n\"classDate\": \"{{updateclassDate}}\",\r\n\"classTopic\": \"{{updateclassTopic}}\",\r\n\"classStatus\": \"{{ }}\",\r\n\"classStaffId\": \"{{classStaffId}}\",\r\n\"classDescription\": \"{{updateclassDescription}}\",\r\n\"classComments\": \"{{updateclassComments}}\" ,\r\n\"classNotes\": \"{{updateclassNotes}}\",\r\n\"classRecordingPath\": \"{{updateclassRecordingPath}}\",\r\n\"classScheduledDates\": [\"{{updateclassScheduledDates}}\"]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}/updateClass/62"
							},
							"response": []
						},
						{
							"name": "Update New Class with blank Class Staff Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d350511c-fc91-4538-99ee-cb45faff617e",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "81d468a9-396e-4471-884d-c888861a5ebc",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{ \r\n\"csId\": {{csId}},\r\n\"batchId\": {{batchId}},\r\n\"classNo\": {{updateclassNo}},\r\n\"classDate\": \"{{updateclassDate}}\",\r\n\"classTopic\": \"{{updateclassTopic}}\",\r\n\"classStatus\": \"{{updateclassStatus}}\",\r\n\"classStaffId\": \"{{ }}\",\r\n\"classDescription\": \"{{updateclassDescription}}\",\r\n\"classComments\": \"{{updateclassComments}}\" ,\r\n\"classNotes\": \"{{updateclassNotes}}\",\r\n\"classRecordingPath\": \"{{updateclassRecordingPath}}\",\r\n\"classScheduledDates\": [\"{{updateclassScheduledDates}}\"]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}/updateClass/62"
							},
							"response": []
						},
						{
							"name": "Update New Class with blank Class Description",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d350511c-fc91-4538-99ee-cb45faff617e",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "bccc6453-7ac8-44a6-8302-f3cf27779e99",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{ \r\n\"csId\": {{csId}},\r\n\"batchId\": {{batchId}},\r\n\"classNo\": {{updateclassNo}},\r\n\"classDate\": \"{{updateclassDate}}\",\r\n\"classTopic\": \"{{updateclassTopic}}\",\r\n\"classStatus\": \"{{updateclassStatus}}\",\r\n\"classStaffId\": \"{{classStaffId}}\",\r\n\"classDescription\": \"{{ }}\",\r\n\"classComments\": \"{{updateclassComments}}\" ,\r\n\"classNotes\": \"{{updateclassNotes}}\",\r\n\"classRecordingPath\": \"{{updateclassRecordingPath}}\",\r\n\"classScheduledDates\": [\"{{updateclassScheduledDates}}\"]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}/updateClass/62"
							},
							"response": []
						},
						{
							"name": "Update New Class with blank Class Comments",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d350511c-fc91-4538-99ee-cb45faff617e",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "9c0cacbb-cd7d-4e7c-ad8f-a2c8ce17a1ce",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{ \r\n\"csId\": {{csId}},\r\n\"batchId\": {{batchId}},\r\n\"classNo\": {{updateclassNo}},\r\n\"classDate\": \"{{updateclassDate}}\",\r\n\"classTopic\": \"{{updateclassTopic}}\",\r\n\"classStatus\": \"{{updateclassStatus}}\",\r\n\"classStaffId\": \"{{classStaffId}}\",\r\n\"classDescription\": \"{{updateclassDescription}}\",\r\n\"classComments\": \"{{ }}\" ,\r\n\"classNotes\": \"{{updateclassNotes}}\",\r\n\"classRecordingPath\": \"{{updateclassRecordingPath}}\",\r\n\"classScheduledDates\": [\"{{updateclassScheduledDates}}\"]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}/updateClass/62"
							},
							"response": []
						},
						{
							"name": "Update New Class with blank Class Notes",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d350511c-fc91-4538-99ee-cb45faff617e",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "30aab9b3-c014-4ff3-8a08-868cdc55b833",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{ \r\n\"csId\": {{csId}},\r\n\"batchId\": {{batchId}},\r\n\"classNo\": {{updateclassNo}},\r\n\"classDate\": \"{{updateclassDate}}\",\r\n\"classTopic\": \"{{updateclassTopic}}\",\r\n\"classStatus\": \"{{updateclassStatus}}\",\r\n\"classStaffId\": \"{{classStaffId}}\",\r\n\"classDescription\": \"{{updateclassDescription}}\",\r\n\"classComments\": \"{{updateclassComments}}\" ,\r\n\"classNotes\": \"{{ }}\",\r\n\"classRecordingPath\": \"{{updateclassRecordingPath}}\",\r\n\"classScheduledDates\": [\"{{updateclassScheduledDates}}\"]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}/updateClass/62"
							},
							"response": []
						},
						{
							"name": "Update New Class with blank Class Recording Path",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d350511c-fc91-4538-99ee-cb45faff617e",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "b2baa183-5956-49b0-9523-64891b4f4a09",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{ \r\n\"csId\": {{csId}},\r\n\"batchId\": {{batchId}},\r\n\"classNo\": {{updateclassNo}},\r\n\"classDate\": \"{{updateclassDate}}\",\r\n\"classTopic\": \"{{updateclassTopic}}\",\r\n\"classStatus\": \"{{updateclassStatus}}\",\r\n\"classStaffId\": \"{{classStaffId}}\",\r\n\"classDescription\": \"{{updateclassDescription}}\",\r\n\"classComments\": \"{{updateclassComments}}\" ,\r\n\"classNotes\": \"{{updateclassNotes}}\",\r\n\"classRecordingPath\": \"{{ }}\",\r\n\"classScheduledDates\": [\"{{updateclassScheduledDates}}\"]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}/updateClass/62"
							},
							"response": []
						},
						{
							"name": "Update New Class with blank Class Scheduled Dates",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d350511c-fc91-4538-99ee-cb45faff617e",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "332191f0-d959-4a26-8199-45aab4ca182f",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{ \r\n\"csId\": {{csId}},\r\n\"batchId\": {{batchId}},\r\n\"classNo\": {{updateclassNo}},\r\n\"classDate\": \"{{updateclassDate}}\",\r\n\"classTopic\": \"{{updateclassTopic}}\",\r\n\"classStatus\": \"{{updateclassStatus}}\",\r\n\"classStaffId\": \"{{classStaffId}}\",\r\n\"classDescription\": \"{{updateclassDescription}}\",\r\n\"classComments\": \"{{updateclassComments}}\" ,\r\n\"classNotes\": \"{{updateclassNotes}}\",\r\n\"classRecordingPath\": \"{{updateclassRecordingPath}}\",\r\n\"classScheduledDates\": [\"{{ }}\"]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}/updateClass/62"
							},
							"response": []
						},
						{
							"name": "Get All Recordings",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4b8734d8-b6bd-4f63-b803-b59dbb1adf9c",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "64fa576a-af14-467c-8ccd-9234668bef78",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{baseURL}}/classrecordings"
							},
							"response": []
						},
						{
							"name": "Get All Recordings with No Auth",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c8713d54-8903-4fef-8ecf-02b6ce033c79",
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "f66f99b9-1571-4baf-8d23-c183ce4ba57b",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": "{{baseURL}}/classrecordings"
							},
							"response": []
						},
						{
							"name": "Get All Recordings with invalid end points",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a4d1726e-41fa-4824-a05a-9f7136597585",
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "c6e5cf60-0c50-4cb6-8bdb-6daf89c0bb48",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{baseURL}}/classrecording"
							},
							"response": []
						},
						{
							"name": "Get all Classes by Batch Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f535f038-e7b3-4c30-b164-067147d5ab35",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "3f5593e0-07e8-4b3f-8b66-cd23d51c91b6",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{baseURL}}/classesbyBatch/8432"
							},
							"response": []
						},
						{
							"name": "Get all Classes by Batch Id with No Auth",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "16a03190-1afb-4e25-bad2-b6a7a88edfad",
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "59aae4b9-be6c-42bb-bfb2-4811ccb88df2",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": "{{baseURL}}/classesbyBatch/8432"
							},
							"response": []
						},
						{
							"name": "Get all Classes by Batch Id with invalid endpoints",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "af78921a-1df8-4805-be8d-b1f0fd48ef20",
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "532fbfaa-2623-486f-a01e-bf84f56d1262",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{baseURL}}/classesbyBat/8432"
							},
							"response": []
						},
						{
							"name": "Get all Classes by Batch Id with only letters",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "666cd6db-1215-4661-8389-ce62502be30e",
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "efa076fa-3ece-43ed-8b94-a2bda15c75a3",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{baseURL}}/classesbyBatch/abc"
							},
							"response": []
						},
						{
							"name": "Get all Classes by Batch Id with only special characters",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1f8dcfb0-589c-4136-ab0b-a183650258fc",
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "5def3e89-874f-4251-b359-cb33ce16f179",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{baseURL}}/classesbyBatch/&#%%"
							},
							"response": []
						},
						{
							"name": "Get all Classes by Batch Id with letters numbers and special character",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4a25b36a-d4f8-4f0d-9e84-dc3eb775d85f",
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "55939c29-06de-4ab1-9b44-1c1282230a36",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{baseURL}}/classesbyBatch/T4*"
							},
							"response": []
						},
						{
							"name": "Get all Classes By Staff Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ab47f3c0-47e8-4418-9003-3ad576455204",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "45b68369-c04a-46ca-93af-7bb945000524",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{baseURL}}/classesByStaff/U25"
							},
							"response": []
						},
						{
							"name": "Get all Classes By Staff with No Auth",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b8142df4-479e-4a53-87f0-bcb59430695b",
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "b0fe1cf0-8d47-44fc-a4aa-28502a78002a",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": "{{baseURL}}/classesByStaff/U25"
							},
							"response": []
						},
						{
							"name": "Get all Classes By Staff with invalid end points",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "db377aae-cea4-415c-a12c-34f99f01407f",
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "730821cc-0393-470f-a01c-4e16312b4562",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{baseURL}}/classesBySta/U25"
							},
							"response": []
						},
						{
							"name": "Get all Classes By Staff Id with only letters",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b38329e2-eb2b-48c7-8ef1-724ff36f0ee1",
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "1d385ddb-a274-478e-b02c-7f91e2e7f090",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{baseURL}}/classesByStaff/UN"
							},
							"response": []
						},
						{
							"name": "Get all Classes By Staff Id with only special characters",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7674f282-cffe-4b42-a508-0f74d607ae80",
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "dfda1113-3ea4-40cd-8a13-46feb5b5e69b",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{baseURL}}/classesByStaff/&*#"
							},
							"response": []
						},
						{
							"name": "Get all Classes By Staff Id with letters numbers and special character",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "237278da-7c43-472a-bf97-c3e801af8675",
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "9740a54f-8e60-42c8-a9dc-cf77d3cad01e",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{baseURL}}/classesByStaff/U2&"
							},
							"response": []
						}
					],
					"id": "6674c7c5-ef04-4271-914f-8ffaac2cc1ec"
				},
				{
					"name": "Class_K",
					"item": [
						{
							"name": "User Sign In",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d7879f0f-737d-4293-b2a7-bec56b12e059",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "ec95cab1-a4b6-4b6f-ae19-e4f0ee2df589",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"password\": \"March@2025\",\r\n\"userLoginEmailId\":\"sdetorganizer@gmail.com\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "https://lms-hackthon-feb25-803334c87fbe.herokuapp.com/lms/login"
							},
							"response": []
						},
						{
							"name": "Create New Class",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fc70e53d-7e6a-4583-a90d-b4941e1c79f1",
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "f748751a-21f6-4d92-b3c0-a721f16a8fc8",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJzZGV0b3JnYW5pemVyQGdtYWlsLmNvbSIsImlhdCI6MTc0MTU1NzQ2NCwiZXhwIjoxNzQxNTg2MjY0fQ.VTut0K0mnumKLaYvaIw9SzJInCv8sJA2tlLA16L1kkIIvFBDN_a-6SwkZYjDR6rKBO-IRgk-pJA0vAWB8nM3Dw"
									}
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{ \r\n\"batchId\": 8455,\r\n\"classNo\": 1,\r\n\"classDate\": \"2025-06-06T19:04:41.220Z\",\r\n\"classTopic\": \"java\",\r\n\"classStatus\": \"null\",\r\n\"classStaffId\": \"U25\",\r\n\"classDescription\": \"java2.0\",\r\n\"classComments\": \"null\" ,\r\n\"classNotes\": \"null\",\r\n\"classRecordingPath\": \"null\",\r\n\"classScheduledDates\": [\"2025-06-06T19:04:41.220Z\"]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "https://lms-hackthon-feb25-803334c87fbe.herokuapp.com/lms/CreateClassSchedule"
							},
							"response": []
						},
						{
							"name": "Create New Class with No Auth",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "066c2f54-c788-4545-9aa3-c2d5d44414cd",
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "e3979685-f5a1-4126-bb16-951aff624edc",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{ \r\n\"batchId\": 9518,\r\n\"classNo\": 45,\r\n\"classDate\": \"2025-03-06T19:04:41.220Z\",\r\n\"classTopic\": \"java\",\r\n\"classStatus\": \"null\",\r\n\"classStaffId\": \"U81\",\r\n\"classDescription\": \"java2.0\",\r\n\"classComments\": \"null\" ,\r\n\"classNotes\": \"null\",\r\n\"classRecordingPath\": \"null\",\r\n\"classScheduledDates\": [\"2025-03-06T19:04:41.220Z\"]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "https://lms-hackthon-feb25-803334c87fbe.herokuapp.com/lms/CreateClassSchedule"
							},
							"response": []
						},
						{
							"name": "Get All Class List",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c8131416-8a75-4753-be8b-d67b5ce3eceb",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "5f4f3039-ea96-4b9b-bd12-bffa62e51fbc",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJzZGV0b3JnYW5pemVyQGdtYWlsLmNvbSIsImlhdCI6MTc0MTU1MjI4NCwiZXhwIjoxNzQxNTgxMDg0fQ.jGbkebO41m-X9k86Ph9_R9AXNhrAGUM8FqCjFMZhybb4ucj14h3SiM3EhT3aBWweKijg6YMl8DRtJGpxFipKgw"
									}
								},
								"method": "GET",
								"header": [],
								"url": "https://lms-hackthon-feb25-803334c87fbe.herokuapp.com/lms/allClasses"
							},
							"response": []
						},
						{
							"name": "Get All Class List with No Auth",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a341bc4d-0825-4536-a359-39c0b8e5695e",
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "4691b1df-c0c4-49fd-abfb-150a471ab189",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": "https://lms-hackthon-feb25-803334c87fbe.herokuapp.com/lms/allClasses"
							},
							"response": []
						},
						{
							"name": "Get All Class List with invalid end points",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "989646da-763a-4cf0-969a-d31c36b5d495",
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "b637e6a9-706d-4932-b8f4-6f6be3575b64",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJzZGV0b3JnYW5pemVyQGdtYWlsLmNvbSIsImlhdCI6MTc0MTM3NTA4MiwiZXhwIjoxNzQxNDAzODgyfQ.h3EmuVdOucUj3pDJim8Il9bNUsKc7SyqtjDOvUM6E_FpG1u7CXfNuTYweLZ3nBXs3ySwQLnsL_juCSA8RL47lA"
									}
								},
								"method": "GET",
								"header": [],
								"url": "https://lms-hackthon-feb25-803334c87fbe.herokuapp.com/lms/allClass"
							},
							"response": []
						},
						{
							"name": "Upcoming Classes for particular Student",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "162e9c59-bf49-4cfb-b4e5-d569eed50eda",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "d6ca7a20-c03d-4e58-8093-20392467ccd2",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJzZGV0b3JnYW5pemVyQGdtYWlsLmNvbSIsImlhdCI6MTc0MTM3NTA4MiwiZXhwIjoxNzQxNDAzODgyfQ.h3EmuVdOucUj3pDJim8Il9bNUsKc7SyqtjDOvUM6E_FpG1u7CXfNuTYweLZ3nBXs3ySwQLnsL_juCSA8RL47lA"
									}
								},
								"method": "GET",
								"header": [],
								"url": "https://lms-hackthon-feb25-803334c87fbe.herokuapp.com/lms/upcomingClasses/297"
							},
							"response": []
						},
						{
							"name": "Upcoming Classes for particular Student with No Auth",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "162e9c59-bf49-4cfb-b4e5-d569eed50eda",
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "482f43f9-feaa-4e2a-872a-161cd5b8193a",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": "https://lms-hackthon-feb25-803334c87fbe.herokuapp.com/lms/upcomingClasses/48"
							},
							"response": []
						},
						{
							"name": "Upcoming Classes for particular Student with Invalid end points",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "162e9c59-bf49-4cfb-b4e5-d569eed50eda",
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "6b6789db-e9b7-49de-8347-b0d404571465",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJzZGV0b3JnYW5pemVyQGdtYWlsLmNvbSIsImlhdCI6MTc0MTM3NTA4MiwiZXhwIjoxNzQxNDAzODgyfQ.h3EmuVdOucUj3pDJim8Il9bNUsKc7SyqtjDOvUM6E_FpG1u7CXfNuTYweLZ3nBXs3ySwQLnsL_juCSA8RL47lA"
									}
								},
								"method": "GET",
								"header": [],
								"url": "https://lms-hackthon-feb25-803334c87fbe.herokuapp.com/lms/upcomingClass/48"
							},
							"response": []
						},
						{
							"name": "Upcoming Classes for particular Student with special character student Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "162e9c59-bf49-4cfb-b4e5-d569eed50eda",
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "8a49c288-7382-4544-a90e-82d112e69ada",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJzZGV0b3JnYW5pemVyQGdtYWlsLmNvbSIsImlhdCI6MTc0MTM3NTA4MiwiZXhwIjoxNzQxNDAzODgyfQ.h3EmuVdOucUj3pDJim8Il9bNUsKc7SyqtjDOvUM6E_FpG1u7CXfNuTYweLZ3nBXs3ySwQLnsL_juCSA8RL47lA"
									}
								},
								"method": "GET",
								"header": [],
								"url": "https://lms-hackthon-feb25-803334c87fbe.herokuapp.com/lms/upcomingClasses/@f"
							},
							"response": []
						},
						{
							"name": "Upcoming Classes for particular Student with letters student Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "162e9c59-bf49-4cfb-b4e5-d569eed50eda",
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "bc7e104a-d24a-4c48-b5e9-e840f32c2716",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJzZGV0b3JnYW5pemVyQGdtYWlsLmNvbSIsImlhdCI6MTc0MTM3NTA4MiwiZXhwIjoxNzQxNDAzODgyfQ.h3EmuVdOucUj3pDJim8Il9bNUsKc7SyqtjDOvUM6E_FpG1u7CXfNuTYweLZ3nBXs3ySwQLnsL_juCSA8RL47lA"
									}
								},
								"method": "GET",
								"header": [],
								"url": "https://lms-hackthon-feb25-803334c87fbe.herokuapp.com/lms/upcomingClasses/RY"
							},
							"response": []
						},
						{
							"name": "Upcoming Classes for particular Student with letters numbers and special character student Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "162e9c59-bf49-4cfb-b4e5-d569eed50eda",
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "6412e806-a2d9-427e-a440-802625dc8b7b",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJzZGV0b3JnYW5pemVyQGdtYWlsLmNvbSIsImlhdCI6MTc0MTM3NTA4MiwiZXhwIjoxNzQxNDAzODgyfQ.h3EmuVdOucUj3pDJim8Il9bNUsKc7SyqtjDOvUM6E_FpG1u7CXfNuTYweLZ3nBXs3ySwQLnsL_juCSA8RL47lA"
									}
								},
								"method": "GET",
								"header": [],
								"url": "https://lms-hackthon-feb25-803334c87fbe.herokuapp.com/lms/upcomingClasses/@f3"
							},
							"response": []
						},
						{
							"name": "Update New Class",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d350511c-fc91-4538-99ee-cb45faff617e",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "bd7d5be6-c0d1-4197-a40a-8b1c8f1f7bcb",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJzZGV0b3JnYW5pemVyQGdtYWlsLmNvbSIsImlhdCI6MTc0MTM3NTA4MiwiZXhwIjoxNzQxNDAzODgyfQ.h3EmuVdOucUj3pDJim8Il9bNUsKc7SyqtjDOvUM6E_FpG1u7CXfNuTYweLZ3nBXs3ySwQLnsL_juCSA8RL47lA"
									}
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{ \"csId\": 65,\r\n  \"batchId\": 78,\r\n  \"classNo\": 0,\r\n  \"classDate\": \"2025-03-07T21:02:04.502Z\",\r\n  \"classTopic\": \"java\",\r\n  \"classStatus\": \"null\",\r\n  \"classStaffId\": \"U78\",\r\n  \"classDescription\": \"lodk2 o-D-66_MdRIdH6oSFhkqPbb0VcTPy\",\r\n  \"classComments\": \"  \",\r\n  \"classNotes\": \"null\",\r\n  \"classRecordingPath\": \"c:\\\\recordings\",\r\n  \"batchName\": \"java2.5\",\r\n  \"classScheduledDates\": [\r\n    \"2025-03-07T21:02:04.504Z\"]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "https://lms-hackthon-feb25-803334c87fbe.herokuapp.com/lms/updateClass/62"
							},
							"response": []
						},
						{
							"name": "Get All Recordings",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4b8734d8-b6bd-4f63-b803-b59dbb1adf9c",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "7a58d320-0fe1-4d5c-9b60-1a4ecf42f351",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJzZGV0b3JnYW5pemVyQGdtYWlsLmNvbSIsImlhdCI6MTc0MTM3NTA4MiwiZXhwIjoxNzQxNDAzODgyfQ.h3EmuVdOucUj3pDJim8Il9bNUsKc7SyqtjDOvUM6E_FpG1u7CXfNuTYweLZ3nBXs3ySwQLnsL_juCSA8RL47lA"
									}
								},
								"method": "GET",
								"header": [],
								"url": "https://lms-hackthon-feb25-803334c87fbe.herokuapp.com/lms/classrecordings"
							},
							"response": []
						},
						{
							"name": "Get All Recordings with No Auth",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c8713d54-8903-4fef-8ecf-02b6ce033c79",
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "34db8d3b-1136-42f8-9b3f-074d4174f458",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": "https://lms-hackthon-feb25-803334c87fbe.herokuapp.com/lms/classrecordings"
							},
							"response": []
						},
						{
							"name": "Get All Recordings with invalid end points",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a4d1726e-41fa-4824-a05a-9f7136597585",
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "8648539c-c1be-4cd7-81b1-0bc1077e1641",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJzZGV0b3JnYW5pemVyQGdtYWlsLmNvbSIsImlhdCI6MTc0MTM3NTA4MiwiZXhwIjoxNzQxNDAzODgyfQ.h3EmuVdOucUj3pDJim8Il9bNUsKc7SyqtjDOvUM6E_FpG1u7CXfNuTYweLZ3nBXs3ySwQLnsL_juCSA8RL47lA"
									}
								},
								"method": "GET",
								"header": [],
								"url": "https://lms-hackthon-feb25-803334c87fbe.herokuapp.com/lms/classrecording"
							},
							"response": []
						},
						{
							"name": "Update class recordings by class Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "52e01a32-a06e-4eb9-9d75-2cdc15e56fb8",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "25b3ab4d-39a9-4011-9362-579412b13aea",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJzZGV0b3JnYW5pemVyQGdtYWlsLmNvbSIsImlhdCI6MTc0MTM3NTA4MiwiZXhwIjoxNzQxNDAzODgyfQ.h3EmuVdOucUj3pDJim8Il9bNUsKc7SyqtjDOvUM6E_FpG1u7CXfNuTYweLZ3nBXs3ySwQLnsL_juCSA8RL47lA"
									}
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"batchId\": 0,\r\n\"classComments\": \"string\",\r\n\"classDate\": \"2023-12-16T06:53:55.590Z\",\r\n\"classDescription\": \"string\",\r\n\"classNo\": 0,\r\n\"classNotes\": \"string\",\r\n\"classRecordingPath\": \"string\",\r\n\"classStaffId\": \"string\",\r\n\"classTopic\": \"string\",\r\n\"csId\": 0\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "https://lms-hackthon-feb25-803334c87fbe.herokuapp.com/lms/updateClassrecording/297"
							},
							"response": []
						},
						{
							"name": "Get all Classes by Batch Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f535f038-e7b3-4c30-b164-067147d5ab35",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "61ad6304-dc39-4ba7-a5cc-078d44bde0e1",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJzZGV0b3JnYW5pemVyQGdtYWlsLmNvbSIsImlhdCI6MTc0MTM3NTA4MiwiZXhwIjoxNzQxNDAzODgyfQ.h3EmuVdOucUj3pDJim8Il9bNUsKc7SyqtjDOvUM6E_FpG1u7CXfNuTYweLZ3nBXs3ySwQLnsL_juCSA8RL47lA"
									}
								},
								"method": "GET",
								"header": [],
								"url": "https://lms-hackthon-feb25-803334c87fbe.herokuapp.com/lms/classesbyBatch/8432"
							},
							"response": []
						},
						{
							"name": "Get all Classes by Batch Id with No Auth",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "16a03190-1afb-4e25-bad2-b6a7a88edfad",
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "6efd3ced-fb13-4a79-b6eb-76cb1bfc07c0",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": "https://lms-hackthon-feb25-803334c87fbe.herokuapp.com/lms/classesbyBatch/8432"
							},
							"response": []
						},
						{
							"name": "Get all Classes by Batch Id with invalid endpoints",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "af78921a-1df8-4805-be8d-b1f0fd48ef20",
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "b1d583fa-52e3-4b36-8cc1-72fe15c8a7e1",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJzZGV0b3JnYW5pemVyQGdtYWlsLmNvbSIsImlhdCI6MTc0MTM3NTA4MiwiZXhwIjoxNzQxNDAzODgyfQ.h3EmuVdOucUj3pDJim8Il9bNUsKc7SyqtjDOvUM6E_FpG1u7CXfNuTYweLZ3nBXs3ySwQLnsL_juCSA8RL47lA"
									}
								},
								"method": "GET",
								"header": [],
								"url": "https://lms-hackthon-feb25-803334c87fbe.herokuapp.com/lms/classesbyBat/8432"
							},
							"response": []
						},
						{
							"name": "Get all Classes by Batch Id with only letters",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "666cd6db-1215-4661-8389-ce62502be30e",
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "1d88325e-178e-4125-aa3a-fdf795a8b50f",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJzZGV0b3JnYW5pemVyQGdtYWlsLmNvbSIsImlhdCI6MTc0MTM3NTA4MiwiZXhwIjoxNzQxNDAzODgyfQ.h3EmuVdOucUj3pDJim8Il9bNUsKc7SyqtjDOvUM6E_FpG1u7CXfNuTYweLZ3nBXs3ySwQLnsL_juCSA8RL47lA"
									}
								},
								"method": "GET",
								"header": [],
								"url": "https://lms-hackthon-feb25-803334c87fbe.herokuapp.com/lms/classesbyBatch/abc"
							},
							"response": []
						},
						{
							"name": "Get all Classes by Batch Id with only special characters",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1f8dcfb0-589c-4136-ab0b-a183650258fc",
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "05514172-299c-4954-bbd0-e3655573120d",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJzZGV0b3JnYW5pemVyQGdtYWlsLmNvbSIsImlhdCI6MTc0MTM3NTA4MiwiZXhwIjoxNzQxNDAzODgyfQ.h3EmuVdOucUj3pDJim8Il9bNUsKc7SyqtjDOvUM6E_FpG1u7CXfNuTYweLZ3nBXs3ySwQLnsL_juCSA8RL47lA"
									}
								},
								"method": "GET",
								"header": [],
								"url": "https://lms-hackthon-feb25-803334c87fbe.herokuapp.com/lms/classesbyBatch/&#%%"
							},
							"response": []
						},
						{
							"name": "Get all Classes by Batch Id with letters numbers and special character",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4a25b36a-d4f8-4f0d-9e84-dc3eb775d85f",
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "4e483ab2-bed1-4449-ab63-7b87a7d33f87",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJzZGV0b3JnYW5pemVyQGdtYWlsLmNvbSIsImlhdCI6MTc0MTM3NTA4MiwiZXhwIjoxNzQxNDAzODgyfQ.h3EmuVdOucUj3pDJim8Il9bNUsKc7SyqtjDOvUM6E_FpG1u7CXfNuTYweLZ3nBXs3ySwQLnsL_juCSA8RL47lA"
									}
								},
								"method": "GET",
								"header": [],
								"url": "https://lms-hackthon-feb25-803334c87fbe.herokuapp.com/lms/classesbyBatch/T4*"
							},
							"response": []
						},
						{
							"name": "Get all Classes By Staff Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ab47f3c0-47e8-4418-9003-3ad576455204",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "fcb8bc83-d6af-450a-a0d1-b276ce2dd396",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJzZGV0b3JnYW5pemVyQGdtYWlsLmNvbSIsImlhdCI6MTc0MTM3NTA4MiwiZXhwIjoxNzQxNDAzODgyfQ.h3EmuVdOucUj3pDJim8Il9bNUsKc7SyqtjDOvUM6E_FpG1u7CXfNuTYweLZ3nBXs3ySwQLnsL_juCSA8RL47lA"
									}
								},
								"method": "GET",
								"header": [],
								"url": "https://lms-hackthon-feb25-803334c87fbe.herokuapp.com/lms/classesByStaff/U25"
							},
							"response": []
						},
						{
							"name": "Get all Classes By Staff with No Auth",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b8142df4-479e-4a53-87f0-bcb59430695b",
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "262299f2-8950-458f-8e0e-2e6d7c096b4e",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": "https://lms-hackthon-feb25-803334c87fbe.herokuapp.com/lms/classesByStaff/U25"
							},
							"response": []
						},
						{
							"name": "Get all Classes By Staff with invalid end points",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "db377aae-cea4-415c-a12c-34f99f01407f",
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "ba875f0f-77ee-4584-a4ae-8db503e5a343",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJzZGV0b3JnYW5pemVyQGdtYWlsLmNvbSIsImlhdCI6MTc0MTM3NTA4MiwiZXhwIjoxNzQxNDAzODgyfQ.h3EmuVdOucUj3pDJim8Il9bNUsKc7SyqtjDOvUM6E_FpG1u7CXfNuTYweLZ3nBXs3ySwQLnsL_juCSA8RL47lA"
									}
								},
								"method": "GET",
								"header": [],
								"url": "https://lms-hackthon-feb25-803334c87fbe.herokuapp.com/lms/classesBySta/U25"
							},
							"response": []
						},
						{
							"name": "Get all Classes By Staff Id with only letters",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b38329e2-eb2b-48c7-8ef1-724ff36f0ee1",
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "2ef28c76-4c25-4f00-8f39-e2a2c77f20c2",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJzZGV0b3JnYW5pemVyQGdtYWlsLmNvbSIsImlhdCI6MTc0MTM3NTA4MiwiZXhwIjoxNzQxNDAzODgyfQ.h3EmuVdOucUj3pDJim8Il9bNUsKc7SyqtjDOvUM6E_FpG1u7CXfNuTYweLZ3nBXs3ySwQLnsL_juCSA8RL47lA"
									}
								},
								"method": "GET",
								"header": [],
								"url": "https://lms-hackthon-feb25-803334c87fbe.herokuapp.com/lms/classesByStaff/UN"
							},
							"response": []
						},
						{
							"name": "Get all Classes By Staff Id with only special characters",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7674f282-cffe-4b42-a508-0f74d607ae80",
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "6ed5a370-a7d9-410a-9ffe-e40e908e058d",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJzZGV0b3JnYW5pemVyQGdtYWlsLmNvbSIsImlhdCI6MTc0MTM3NTA4MiwiZXhwIjoxNzQxNDAzODgyfQ.h3EmuVdOucUj3pDJim8Il9bNUsKc7SyqtjDOvUM6E_FpG1u7CXfNuTYweLZ3nBXs3ySwQLnsL_juCSA8RL47lA"
									}
								},
								"method": "GET",
								"header": [],
								"url": "https://lms-hackthon-feb25-803334c87fbe.herokuapp.com/lms/classesByStaff/&*#"
							},
							"response": []
						},
						{
							"name": "Get all Classes By Staff Id with letters numbers and special character",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "237278da-7c43-472a-bf97-c3e801af8675",
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "14de4947-1ab1-453c-a890-470ef3d81136",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJzZGV0b3JnYW5pemVyQGdtYWlsLmNvbSIsImlhdCI6MTc0MTM3NTA4MiwiZXhwIjoxNzQxNDAzODgyfQ.h3EmuVdOucUj3pDJim8Il9bNUsKc7SyqtjDOvUM6E_FpG1u7CXfNuTYweLZ3nBXs3ySwQLnsL_juCSA8RL47lA"
									}
								},
								"method": "GET",
								"header": [],
								"url": "https://lms-hackthon-feb25-803334c87fbe.herokuapp.com/lms/classesByStaff/U2&"
							},
							"response": []
						}
					],
					"id": "b26c8d5e-80a2-4705-84d4-887c85e707cd"
				},
				{
					"name": "Class_A",
					"item": [
						{
							"name": "Create New Class",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "26ab2a6c-e221-4296-bb45-3a1d35532574",
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "7b439c56-8cfe-4fbb-90ef-d9a4088e4c47",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{ \"batchId\": 9517, //Batch Module //for now hardcode it\r\n\"classNo\": 1,\r\n\"classDate\": \"2025-05-09T19:04:41.220Z\",\r\n\"classTopic\": \"JSP\", //Unique\r\n\"classStatus\": \"string\",\r\n\"classStaffId\": \"U25\", //User Module --> Create User with Roles //for now hardcode it\r\n\"classDescription\":\"JSP\",\r\n\"classComments\": \"null\",\r\n\"classNotes\": \"null\",\r\n\"classRecordingPath\": \"null\",\r\n\"classScheduledDates\": [\"2025-05-09T19:04:41.220Z\"]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}/CreateClassSchedule"
							},
							"response": []
						},
						{
							"name": "allClass",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "a104f06d-4d44-4ba8-b36b-c55d0bff0b43",
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "a8351add-ab82-4c04-8330-2e6e4c2e76f6",
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"//POSITIVE TEST VALIDATION\r",
											"//1. Status\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"//2. Status Line\r",
											"pm.test(\"Status message is OK\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"//3. Test for Content-Type header having a particular value\r",
											"pm.test(\"Content-Type header is application/json\", () => {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "639a5524-a76d-4b13-bea3-67c7f33d13cd",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{baseURL}}/allClasses"
							},
							"response": []
						},
						{
							"name": "Get all Classes by BatchId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b712cead-5010-4cb6-93ec-fbf616db3183",
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"//POSITIVE TEST VALIDATION\r",
											"//1. Status\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"//2. Status Line\r",
											"pm.test(\"Status message is OK\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"//3. Test for Content-Type header having a particular value\r",
											"pm.test(\"Content-Type header is application/json\", () => {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "3392a857-99fb-4943-83db-52afe2a8394d",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{baseURL}}/classesbyBatch/9721"
							},
							"response": []
						},
						{
							"name": "Get all Classes by BatchIdInvalid",
							"id": "1fa0de83-bf81-41a7-9d4b-dbf030281e30",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{baseURL}}/classesbyBatch/!!!"
							},
							"response": []
						},
						{
							"name": "Get all Classes by StaffId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d65d35dc-ac44-4511-bca7-1df9a80a5b2c",
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"//POSITIVE TEST VALIDATION\r",
											"//1. Status\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"//2. Status Line\r",
											"pm.test(\"Status message is OK\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"//3. Test for Content-Type header having a particular value\r",
											"pm.test(\"Content-Type header is application/json\", () => {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "459f4fa9-235d-4bbe-99cc-cfcefafc5bb7",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{baseURL}}/classesByStaff/U34"
							},
							"response": []
						},
						{
							"name": "Get all Classes by StaffIdInvalid",
							"id": "26e5a2c8-75b8-499d-8bcb-0955ee7746a1",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{baseURL}}/classesByStaff/UWM"
							},
							"response": []
						},
						{
							"name": "Get all recordings",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0e034a8d-2d08-4db5-8dae-d56bc5c0841f",
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"//POSITIVE TEST VALIDATION\r",
											"//1. Status\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"//2. Status Line\r",
											"pm.test(\"Status message is OK\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"//3. Test for Content-Type header having a particular value\r",
											"pm.test(\"Content-Type header is application/json\", () => {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "dd229c7f-f6ed-4845-8684-4630978dd069",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{baseURL}}/classrecordings"
							},
							"response": []
						},
						{
							"name": "Get all recordingsInvalid",
							"id": "f60967e3-0657-4964-a4ae-64cf8def24cb",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{baseURL}}/classrecordings/ABN"
							},
							"response": []
						},
						{
							"name": "Update New Class",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fde4e6e8-5705-4a0a-817d-23dca0e8994e",
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"//POSITIVE TEST VALIDATION\r",
											"//1. Status\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"//2. Status Line\r",
											"pm.test(\"Status message is OK\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"//3. Test for Content-Type header having a particular value\r",
											"pm.test(\"Content-Type header is application/json\", () => {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "eec56a6d-2cd8-4e06-a77d-b19e6f301261",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{ \"batchId\": 8452,\r\n\"classNo\":1,\r\n\"classDate\": \"2025-06-06T19:04:41.220Z\",\r\n\"classTopic\": \"Math\",\r\n\"classStatus\": \"string\",\r\n\"classStaffId\": \"U70\",\r\n\"classDescription\": \"String\",\r\n\"classComments\": \"string\",\r\n\"classNotes\": \"string\",\r\n\"classRecordingPath\": \"string\",\r\n\"classScheduledDates\": [\"2025-06-06T19:04:41.220Z\"]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}/updateClass/304"
							},
							"response": []
						},
						{
							"name": "Delete class by Class Id2",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a8233490-305a-4d7c-9500-9d03cd8d2c85",
										"exec": [
											"var classid = pm.collectionVariables.get(\"class_Id\")\r",
											"pm.variables.set(\"classid \",classid)\r",
											"\r",
											"pm.test(\"Successfully deleted the resource\", function () {    pm.response.to.have.status(200); \r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "a9c0b923-0cf6-451e-b089-fd18842e53ed",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/deleteByClass/:classId",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"deleteByClass",
										":classId"
									],
									"variable": [
										{
											"id": "e81b741e-35e3-4251-b1ed-30a4c3f81063",
											"key": "classId",
											"value": "{{classid}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"id": "e3f7e8fa-8c63-4f01-a149-a3aa9e156a66"
				}
			],
			"id": "a00d91cd-42c2-4c66-bef9-0c0eb60714e7"
		},
		{
			"name": "Tear Down and Logout",
			"item": [
				{
					"name": "Logout",
					"id": "6c64072c-651e-4ab2-b31b-8741802b1701",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseURL}}//logoutlms"
					},
					"response": []
				},
				{
					"name": "DeletebatchbyBatchId Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1c22dca5-5599-48da-93e9-54e395d43d6b",
								"exec": [
									"//const response = pm.response.json();\r",
									"console.log(pm.response) //doesnt contain the message displayed\r",
									"//Happy Path - Positive\r",
									"if(pm.response.to.have.status(200)){\r",
									"\r",
									"    //1. Status Code\r",
									"    pm.test(\"Status code is 200\", function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    });\r",
									"\r",
									"    //2. Status Line\r",
									"    pm.test(\"Status message is OK\", function () {\r",
									"        pm.response.to.have.status(\"OK\");\r",
									"    });\r",
									"\r",
									"    //3. Test for Content-Type header having a particular value\r",
									"    pm.test(\"Content-Type header is application/json\", () => {\r",
									"        pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"    });\r",
									"\r",
									"    //4. Schema Validation -- TO BE DONE\r",
									"\r",
									"    //5. Data Validation   DEFECT!! ERROR ENCOUNTERED --> JSONError: Unexpected token 'M' at 1:1 Message: Batch with Id-9684 deleted Successfully! ^  -- CANNOT VALIDATE DELETE MSG SINCE  Unexpected token 'M' at 1:1: This means that Postman was expecting JSON data (starting with {, [, or other JSON-valid characters), but it found the character 'M' (the first character of \"Message: Batch with Id-9684 deleted Successfully!\").  Message: Batch with Id-9684 deleted Successfully!: This is the raw text from your response body, which is not in valid JSON format\r",
									"    /*\r",
									"    pm.test(\"Validate stored Batch data with response data\", function () {\r",
									"        console.log('response in using JSON.stringify() = '+JSON.stringify(pm.response.json()));\r",
									"        pm.expect(JSON.stringify(pm.response.json())).to.include('Message: Batch with Id-'+9684+' deleted Successfully!');\r",
									"    });\r",
									"    */\r",
									"    //5. Validate Delete Program status has changed to Inactive\r",
									"        // Programmatically make a GET request using the ProgramID\r",
									"    /*    pm.sendRequest({\r",
									"            url:  pm.environment.get(\"baseURL\") + `/batches/batchId/` + currentBatch , \r",
									"            method: 'GET',\r",
									"            header: {\r",
									"                'Authorization': 'Bearer ' + pm.collectionVariables.get(\"BearerToken\") \r",
									"            }\r",
									"        }, function (err, res) {\r",
									"            if (err) {\r",
									"                pm.test(\"GET BatchByID request failed after Batch Deletion\", function() {\r",
									"                  console.log(err);\r",
									"                return;\r",
									"                });\r",
									"            } else {\r",
									"                pm.test(\"GET BatchByID request Successful after Batch Deletion\", function() {\r",
									"\r",
									"                    pm.expect(res.json().batchStatus).to.eql(\"Inactive\")\r",
									"\r",
									"                    if(res.json().batchId === pm.collectionVariables.get(\"batchID_Mandatory\")){\r",
									"                        // remove the batch info at collection level\r",
									"                        pm.collectionVariables.unset(\"batchID_Mandatory\");\r",
									"                        pm.collectionVariables.unset(\"batchName_Mandatory\")\r",
									"                        pm.collectionVariables.unset(\"batchDesc_Mandatory\")\r",
									"                        pm.collectionVariables.unset(\"batchNoOfClasses_Mandatory\")\r",
									"                        pm.collectionVariables.unset(\"batchStatus_Mandatory\")  \r",
									"                    }\r",
									"                    else{\r",
									"\r",
									"                        // remove the batch info at collection level\r",
									"                        pm.collectionVariables.unset(\"batchID_All\");\r",
									"                        pm.collectionVariables.unset(\"batchName_All\")\r",
									"                        pm.collectionVariables.unset(\"batchDesc_All\")\r",
									"                        pm.collectionVariables.unset(\"batchNoOfClasses_All\")\r",
									"                        pm.collectionVariables.unset(\"batchStatus_All\") \r",
									"                    }   \r",
									"                });\r",
									"\r",
									"                \r",
									"            }\r",
									"    });*/\r",
									"\r",
									"\r",
									"\r",
									"}\r",
									"\r",
									"\r",
									"/*\r",
									"{\r",
									"    \"message\": \"Batch not found with Id : 91799 \",\r",
									"    \"success\": false\r",
									"}\r",
									" */\r",
									"/*\r",
									"{\r",
									"    \"message\": \"programBatch with name activejava43456 not found\",\r",
									"    \"success\": false\r",
									"}\r",
									" */\r",
									"\r",
									"\r",
									"/*\r",
									"{\r",
									"    \"message\": \"Batch id not found or not exists 925122\",\r",
									"    \"success\": false\r",
									"} \r",
									"*/"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "eaee0068-97f3-4ffe-bb5b-e62eeb433c10",
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "f5f7f6fd-e91c-453d-80b2-234994b7288c",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/batches/:id",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"batches",
								":id"
							],
							"variable": [
								{
									"id": "8ad4056f-3968-445b-9abd-6f59395d0e04",
									"key": "id",
									"value": "9877"
								}
							]
						}
					},
					"response": [
						{
							"id": "a8cb1d51-a3e7-48cf-ac5d-3192c611c3a9",
							"name": "DeletebatchbyBatchIdResponse",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/batches/:id",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"batches",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "9865"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Cowboy"
								},
								{
									"key": "Report-To",
									"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1741625597&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=PDLt%2B00Gslhxfgkc1x%2FIEozuZjdj88gMBe2QrUbcjjE%3D\"}]}"
								},
								{
									"key": "Reporting-Endpoints",
									"value": "heroku-nel=https://nel.heroku.com/reports?ts=1741625597&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=PDLt%2B00Gslhxfgkc1x%2FIEozuZjdj88gMBe2QrUbcjjE%3D"
								},
								{
									"key": "Nel",
									"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-Xss-Protection",
									"value": "0"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, max-age=0, must-revalidate"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "0"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000 ; includeSubDomains"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Content-Length",
									"value": "49"
								},
								{
									"key": "Date",
									"value": "Mon, 10 Mar 2025 16:53:17 GMT"
								},
								{
									"key": "Via",
									"value": "1.1 vegur"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "Message: Batch with Id-9865 deleted Successfully!"
						}
					]
				}
			],
			"id": "1408e38f-5719-4e08-b9a8-d3ccbd19a17b"
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": {
			"token": "{{BearerToken}}"
		}
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "cc75d732-0622-4154-bcda-33d90cd37a35",
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"// Load data from json file to collection variable 'requestData'\r",
					"if (typeof pm.variables.get('requestData') !== 'object') {\r",
					"    pm.variables.set('requestData', pm.iterationData.toObject()); \r",
					"}\r",
					"\r",
					"// Read input data from collection variable 'requestData'\r",
					"const requestData = pm.variables.get('requestData');\r",
					"//console.log('requestData', requestData); //in object form\r",
					"\r",
					"// If 'requestData'/input data is empty  Following block is for error handling, just in case we are not passing any data file\r",
					"if (typeof requestData !== 'object' || Object.keys(requestData).length === 0) {\r",
					"    console.log('No external data provided/data set is empty');\r",
					"    return;\r",
					"}\r",
					"\r",
					"// Find current request's data  contains request’s name along with list of data array\r",
					"const currentRequest = requestData.requests.find(({ name }) => name === pm.info.requestName); \r",
					"\r",
					"// If no data found for current request\r",
					"if (!currentRequest) {\r",
					"    console.log(`Request ${pm.info.requestName} has no data.`);\r",
					"    return;\r",
					"}\r",
					"\r",
					"// If data found for current request\r",
					"if (currentRequest && currentRequest.data && currentRequest.data.length > 0) {\r",
					"    console.log(\"Size of current request data set = \" + currentRequest.data.length)\r",
					"    const currentDataSet = currentRequest.data.shift(); //object\r",
					"        \r",
					"    if (currentDataSet) {\r",
					"        Object.entries(currentDataSet).forEach(([key, value]) => {\r",
					"            pm.collectionVariables.set(key,value)\r",
					"        });\r",
					"\r",
					"        pm.collectionVariables.set(\"requestData\", JSON.stringify(requestData));\r",
					"\r",
					"        if (currentRequest.data.length > 0) {\r",
					"            pm.execution.setNextRequest(pm.info.requestName);\r",
					"        }\r",
					"    } else {\r",
					"        console.error('No variables found for this request.');\r",
					"    }\r",
					"}\r",
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "4abd62f4-9c3a-489c-bb31-0a8b05fbdaae",
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"//Add a retry function and see if it works"
				]
			}
		}
	],
	"variable": [
		{
			"id": "67feb1bc-1430-4d11-8f9c-e48039e51a37",
			"key": "BearerToken",
			"value": ""
		},
		{
			"id": "acffe57c-1800-4073-9478-c18f917cb81d",
			"key": "Admin_UserID",
			"value": ""
		},
		{
			"id": "f2849313-7db9-4dab-bf15-6eefd3517001",
			"key": "programID_ModuleIntegration",
			"value": ""
		},
		{
			"id": "57bbb406-641d-46e3-9cf3-12f6dfa284d9",
			"key": "programName_ModuleIntegration",
			"value": ""
		},
		{
			"id": "4b019cd7-c34d-4434-b8c3-57b9ef20e1d2",
			"key": "programDesc_ModuleIntegration",
			"value": ""
		},
		{
			"id": "4a70f5c0-7f59-4c6e-b5da-2c275704d2c6",
			"key": "programStatus_ModuleIntegration",
			"value": ""
		},
		{
			"id": "7a6bbe65-7770-4122-a549-4f2d08aedbd2",
			"key": "BatchCount_BeforeAdd",
			"value": ""
		},
		{
			"id": "1ca28679-4cfc-4753-962e-7b3887abb40b",
			"key": "batchID_ModuleIntegration",
			"value": ""
		},
		{
			"id": "362ed4bd-d712-488c-b416-d295bb97c967",
			"key": "batchName_ModuleIntegration",
			"value": ""
		},
		{
			"id": "0425b1db-5813-4fdd-b851-0dae2e02b02d",
			"key": "batchNoOfClasses_ModuleIntegration",
			"value": ""
		},
		{
			"id": "32056a6c-3ed0-49ff-a968-d0ce5fc5c0e4",
			"key": "batchDesc_ModuleIntegration",
			"value": ""
		},
		{
			"id": "3f34957f-298f-47b0-b398-43b064e8e6aa",
			"key": "batchStatus_ModuleIntegration",
			"value": ""
		},
		{
			"id": "3db3d549-a484-4c3b-beae-38bff6473d0e",
			"key": "scenarioName",
			"value": ""
		},
		{
			"id": "64dbba3b-807b-4da9-9f08-d0c4c1a563f9",
			"key": "httpMethod",
			"value": ""
		},
		{
			"id": "49e76c88-7655-4d8a-89b0-b3069b845f0d",
			"key": "endPoint",
			"value": ""
		},
		{
			"id": "f2eaf896-2e9c-42db-b474-b47be48deb2d",
			"key": "baseURL",
			"value": ""
		},
		{
			"id": "79f7cbe7-1741-4aa8-8b8f-46c74f498010",
			"key": "statusCode",
			"value": ""
		},
		{
			"id": "ce5b2bef-07cc-4571-938c-da9751e4dd39",
			"key": "statusLine",
			"value": ""
		},
		{
			"id": "b62bc42b-6eb1-4bc5-b646-7016b67948fa",
			"key": "requestData",
			"value": ""
		},
		{
			"id": "357c1145-ffd9-4633-9b37-e0817b2b3f87",
			"key": "pathParameter",
			"value": ""
		},
		{
			"id": "c3803b48-6b92-4a02-8341-224ea74c83c6",
			"key": "message",
			"value": ""
		},
		{
			"id": "7863dee6-b935-441d-9dd9-acee12b11056",
			"key": "userLoginEmailId",
			"value": ""
		},
		{
			"id": "b6237173-f518-41fd-be45-26827e0c9f12",
			"key": "password",
			"value": ""
		}
	]
}